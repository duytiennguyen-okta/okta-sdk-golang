/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"time"
)

// VerifyUserFactorResponse struct for VerifyUserFactorResponse
type VerifyUserFactorResponse struct {
	ExpiresAt            *time.Time                        `json:"expiresAt,omitempty"`
	FactorResult         *VerifyUserFactorResult           `json:"factorResult,omitempty"`
	FactorResultMessage  *string                           `json:"factorResultMessage,omitempty"`
	Embedded             map[string]map[string]interface{} `json:"_embedded,omitempty"`
	Links                map[string]map[string]interface{} `json:"_links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VerifyUserFactorResponse VerifyUserFactorResponse

// NewVerifyUserFactorResponse instantiates a new VerifyUserFactorResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVerifyUserFactorResponse() *VerifyUserFactorResponse {
	this := VerifyUserFactorResponse{}
	return &this
}

// NewVerifyUserFactorResponseWithDefaults instantiates a new VerifyUserFactorResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVerifyUserFactorResponseWithDefaults() *VerifyUserFactorResponse {
	this := VerifyUserFactorResponse{}
	return &this
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *VerifyUserFactorResponse) GetExpiresAt() time.Time {
	if o == nil || o.ExpiresAt == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerifyUserFactorResponse) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil || o.ExpiresAt == nil {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *VerifyUserFactorResponse) HasExpiresAt() bool {
	if o != nil && o.ExpiresAt != nil {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given time.Time and assigns it to the ExpiresAt field.
func (o *VerifyUserFactorResponse) SetExpiresAt(v time.Time) {
	o.ExpiresAt = &v
}

// GetFactorResult returns the FactorResult field value if set, zero value otherwise.
func (o *VerifyUserFactorResponse) GetFactorResult() VerifyUserFactorResult {
	if o == nil || o.FactorResult == nil {
		var ret VerifyUserFactorResult
		return ret
	}
	return *o.FactorResult
}

// GetFactorResultOk returns a tuple with the FactorResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerifyUserFactorResponse) GetFactorResultOk() (*VerifyUserFactorResult, bool) {
	if o == nil || o.FactorResult == nil {
		return nil, false
	}
	return o.FactorResult, true
}

// HasFactorResult returns a boolean if a field has been set.
func (o *VerifyUserFactorResponse) HasFactorResult() bool {
	if o != nil && o.FactorResult != nil {
		return true
	}

	return false
}

// SetFactorResult gets a reference to the given VerifyUserFactorResult and assigns it to the FactorResult field.
func (o *VerifyUserFactorResponse) SetFactorResult(v VerifyUserFactorResult) {
	o.FactorResult = &v
}

// GetFactorResultMessage returns the FactorResultMessage field value if set, zero value otherwise.
func (o *VerifyUserFactorResponse) GetFactorResultMessage() string {
	if o == nil || o.FactorResultMessage == nil {
		var ret string
		return ret
	}
	return *o.FactorResultMessage
}

// GetFactorResultMessageOk returns a tuple with the FactorResultMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerifyUserFactorResponse) GetFactorResultMessageOk() (*string, bool) {
	if o == nil || o.FactorResultMessage == nil {
		return nil, false
	}
	return o.FactorResultMessage, true
}

// HasFactorResultMessage returns a boolean if a field has been set.
func (o *VerifyUserFactorResponse) HasFactorResultMessage() bool {
	if o != nil && o.FactorResultMessage != nil {
		return true
	}

	return false
}

// SetFactorResultMessage gets a reference to the given string and assigns it to the FactorResultMessage field.
func (o *VerifyUserFactorResponse) SetFactorResultMessage(v string) {
	o.FactorResultMessage = &v
}

// GetEmbedded returns the Embedded field value if set, zero value otherwise.
func (o *VerifyUserFactorResponse) GetEmbedded() map[string]map[string]interface{} {
	if o == nil || o.Embedded == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Embedded
}

// GetEmbeddedOk returns a tuple with the Embedded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerifyUserFactorResponse) GetEmbeddedOk() (map[string]map[string]interface{}, bool) {
	if o == nil || o.Embedded == nil {
		return nil, false
	}
	return o.Embedded, true
}

// HasEmbedded returns a boolean if a field has been set.
func (o *VerifyUserFactorResponse) HasEmbedded() bool {
	if o != nil && o.Embedded != nil {
		return true
	}

	return false
}

// SetEmbedded gets a reference to the given map[string]map[string]interface{} and assigns it to the Embedded field.
func (o *VerifyUserFactorResponse) SetEmbedded(v map[string]map[string]interface{}) {
	o.Embedded = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *VerifyUserFactorResponse) GetLinks() map[string]map[string]interface{} {
	if o == nil || o.Links == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerifyUserFactorResponse) GetLinksOk() (map[string]map[string]interface{}, bool) {
	if o == nil || o.Links == nil {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *VerifyUserFactorResponse) HasLinks() bool {
	if o != nil && o.Links != nil {
		return true
	}

	return false
}

// SetLinks gets a reference to the given map[string]map[string]interface{} and assigns it to the Links field.
func (o *VerifyUserFactorResponse) SetLinks(v map[string]map[string]interface{}) {
	o.Links = v
}

func (o VerifyUserFactorResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ExpiresAt != nil {
		toSerialize["expiresAt"] = o.ExpiresAt
	}
	if o.FactorResult != nil {
		toSerialize["factorResult"] = o.FactorResult
	}
	if o.FactorResultMessage != nil {
		toSerialize["factorResultMessage"] = o.FactorResultMessage
	}
	if o.Embedded != nil {
		toSerialize["_embedded"] = o.Embedded
	}
	if o.Links != nil {
		toSerialize["_links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *VerifyUserFactorResponse) UnmarshalJSON(bytes []byte) (err error) {
	varVerifyUserFactorResponse := _VerifyUserFactorResponse{}

	err = json.Unmarshal(bytes, &varVerifyUserFactorResponse)
	if err == nil {
		*o = VerifyUserFactorResponse(varVerifyUserFactorResponse)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &additionalProperties)
	if err == nil {
		delete(additionalProperties, "expiresAt")
		delete(additionalProperties, "factorResult")
		delete(additionalProperties, "factorResultMessage")
		delete(additionalProperties, "_embedded")
		delete(additionalProperties, "_links")
		o.AdditionalProperties = additionalProperties
	} else {
		return err
	}

	return err
}

type NullableVerifyUserFactorResponse struct {
	value *VerifyUserFactorResponse
	isSet bool
}

func (v NullableVerifyUserFactorResponse) Get() *VerifyUserFactorResponse {
	return v.value
}

func (v *NullableVerifyUserFactorResponse) Set(val *VerifyUserFactorResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableVerifyUserFactorResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableVerifyUserFactorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerifyUserFactorResponse(val *VerifyUserFactorResponse) *NullableVerifyUserFactorResponse {
	return &NullableVerifyUserFactorResponse{value: val, isSet: true}
}

func (v NullableVerifyUserFactorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerifyUserFactorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
