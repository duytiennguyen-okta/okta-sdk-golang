/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// FactorType the model 'FactorType'
type FactorType string

// List of FactorType
const (
	FACTORTYPE_CALL              FactorType = "call"
	FACTORTYPE_EMAIL             FactorType = "email"
	FACTORTYPE_HOTP              FactorType = "hotp"
	FACTORTYPE_PUSH              FactorType = "push"
	FACTORTYPE_QUESTION          FactorType = "question"
	FACTORTYPE_SMS               FactorType = "sms"
	FACTORTYPE_TOKEN             FactorType = "token"
	FACTORTYPE_TOKENHARDWARE     FactorType = "token:hardware"
	FACTORTYPE_TOKENHOTP         FactorType = "token:hotp"
	FACTORTYPE_TOKENSOFTWARETOTP FactorType = "token:software:totp"
	FACTORTYPE_U2F               FactorType = "u2f"
	FACTORTYPE_WEB               FactorType = "web"
	FACTORTYPE_WEBAUTHN          FactorType = "webauthn"
)

// All allowed values of FactorType enum
var AllowedFactorTypeEnumValues = []FactorType{
	"call",
	"email",
	"hotp",
	"push",
	"question",
	"sms",
	"token",
	"token:hardware",
	"token:hotp",
	"token:software:totp",
	"u2f",
	"web",
	"webauthn",
}

func (v *FactorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FactorType(value)
	for _, existing := range AllowedFactorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FactorType", value)
}

// NewFactorTypeFromValue returns a pointer to a valid FactorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFactorTypeFromValue(v string) (*FactorType, error) {
	ev := FactorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FactorType: valid values are %v", v, AllowedFactorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FactorType) IsValid() bool {
	for _, existing := range AllowedFactorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FactorType value
func (v FactorType) Ptr() *FactorType {
	return &v
}

type NullableFactorType struct {
	value *FactorType
	isSet bool
}

func (v NullableFactorType) Get() *FactorType {
	return v.value
}

func (v *NullableFactorType) Set(val *FactorType) {
	v.value = val
	v.isSet = true
}

func (v NullableFactorType) IsSet() bool {
	return v.isSet
}

func (v *NullableFactorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFactorType(val *FactorType) *NullableFactorType {
	return &NullableFactorType{value: val, isSet: true}
}

func (v NullableFactorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFactorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
