/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// SignInPageTouchPointVariant the model 'SignInPageTouchPointVariant'
type SignInPageTouchPointVariant string

// List of SignInPageTouchPointVariant
const (
	SIGNINPAGETOUCHPOINTVARIANT_BACKGROUND_IMAGE           SignInPageTouchPointVariant = "BACKGROUND_IMAGE"
	SIGNINPAGETOUCHPOINTVARIANT_BACKGROUND_SECONDARY_COLOR SignInPageTouchPointVariant = "BACKGROUND_SECONDARY_COLOR"
	SIGNINPAGETOUCHPOINTVARIANT_OKTA_DEFAULT               SignInPageTouchPointVariant = "OKTA_DEFAULT"
)

// All allowed values of SignInPageTouchPointVariant enum
var AllowedSignInPageTouchPointVariantEnumValues = []SignInPageTouchPointVariant{
	"BACKGROUND_IMAGE",
	"BACKGROUND_SECONDARY_COLOR",
	"OKTA_DEFAULT",
}

func (v *SignInPageTouchPointVariant) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SignInPageTouchPointVariant(value)
	for _, existing := range AllowedSignInPageTouchPointVariantEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SignInPageTouchPointVariant", value)
}

// NewSignInPageTouchPointVariantFromValue returns a pointer to a valid SignInPageTouchPointVariant
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSignInPageTouchPointVariantFromValue(v string) (*SignInPageTouchPointVariant, error) {
	ev := SignInPageTouchPointVariant(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SignInPageTouchPointVariant: valid values are %v", v, AllowedSignInPageTouchPointVariantEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SignInPageTouchPointVariant) IsValid() bool {
	for _, existing := range AllowedSignInPageTouchPointVariantEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SignInPageTouchPointVariant value
func (v SignInPageTouchPointVariant) Ptr() *SignInPageTouchPointVariant {
	return &v
}

type NullableSignInPageTouchPointVariant struct {
	value *SignInPageTouchPointVariant
	isSet bool
}

func (v NullableSignInPageTouchPointVariant) Get() *SignInPageTouchPointVariant {
	return v.value
}

func (v *NullableSignInPageTouchPointVariant) Set(val *SignInPageTouchPointVariant) {
	v.value = val
	v.isSet = true
}

func (v NullableSignInPageTouchPointVariant) IsSet() bool {
	return v.isSet
}

func (v *NullableSignInPageTouchPointVariant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignInPageTouchPointVariant(val *SignInPageTouchPointVariant) *NullableSignInPageTouchPointVariant {
	return &NullableSignInPageTouchPointVariant{value: val, isSet: true}
}

func (v NullableSignInPageTouchPointVariant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignInPageTouchPointVariant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
