/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// PrincipalType the model 'PrincipalType'
type PrincipalType string

// List of PrincipalType
const (
	PRINCIPALTYPE_SSWS_TOKEN PrincipalType = "SSWS_TOKEN"
)

// All allowed values of PrincipalType enum
var AllowedPrincipalTypeEnumValues = []PrincipalType{
	"SSWS_TOKEN",
}

func (v *PrincipalType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PrincipalType(value)
	for _, existing := range AllowedPrincipalTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PrincipalType", value)
}

// NewPrincipalTypeFromValue returns a pointer to a valid PrincipalType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPrincipalTypeFromValue(v string) (*PrincipalType, error) {
	ev := PrincipalType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PrincipalType: valid values are %v", v, AllowedPrincipalTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PrincipalType) IsValid() bool {
	for _, existing := range AllowedPrincipalTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PrincipalType value
func (v PrincipalType) Ptr() *PrincipalType {
	return &v
}

type NullablePrincipalType struct {
	value *PrincipalType
	isSet bool
}

func (v NullablePrincipalType) Get() *PrincipalType {
	return v.value
}

func (v *NullablePrincipalType) Set(val *PrincipalType) {
	v.value = val
	v.isSet = true
}

func (v NullablePrincipalType) IsSet() bool {
	return v.isSet
}

func (v *NullablePrincipalType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrincipalType(val *PrincipalType) *NullablePrincipalType {
	return &NullablePrincipalType{value: val, isSet: true}
}

func (v NullablePrincipalType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrincipalType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
