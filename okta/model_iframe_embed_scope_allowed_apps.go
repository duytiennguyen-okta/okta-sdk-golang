/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// IframeEmbedScopeAllowedApps the model 'IframeEmbedScopeAllowedApps'
type IframeEmbedScopeAllowedApps string

// List of IframeEmbedScopeAllowedApps
const (
	IFRAMEEMBEDSCOPEALLOWEDAPPS_OKTA_ENDUSER IframeEmbedScopeAllowedApps = "OKTA_ENDUSER"
)

// All allowed values of IframeEmbedScopeAllowedApps enum
var AllowedIframeEmbedScopeAllowedAppsEnumValues = []IframeEmbedScopeAllowedApps{
	"OKTA_ENDUSER",
}

func (v *IframeEmbedScopeAllowedApps) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IframeEmbedScopeAllowedApps(value)
	for _, existing := range AllowedIframeEmbedScopeAllowedAppsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IframeEmbedScopeAllowedApps", value)
}

// NewIframeEmbedScopeAllowedAppsFromValue returns a pointer to a valid IframeEmbedScopeAllowedApps
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIframeEmbedScopeAllowedAppsFromValue(v string) (*IframeEmbedScopeAllowedApps, error) {
	ev := IframeEmbedScopeAllowedApps(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IframeEmbedScopeAllowedApps: valid values are %v", v, AllowedIframeEmbedScopeAllowedAppsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IframeEmbedScopeAllowedApps) IsValid() bool {
	for _, existing := range AllowedIframeEmbedScopeAllowedAppsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IframeEmbedScopeAllowedApps value
func (v IframeEmbedScopeAllowedApps) Ptr() *IframeEmbedScopeAllowedApps {
	return &v
}

type NullableIframeEmbedScopeAllowedApps struct {
	value *IframeEmbedScopeAllowedApps
	isSet bool
}

func (v NullableIframeEmbedScopeAllowedApps) Get() *IframeEmbedScopeAllowedApps {
	return v.value
}

func (v *NullableIframeEmbedScopeAllowedApps) Set(val *IframeEmbedScopeAllowedApps) {
	v.value = val
	v.isSet = true
}

func (v NullableIframeEmbedScopeAllowedApps) IsSet() bool {
	return v.isSet
}

func (v *NullableIframeEmbedScopeAllowedApps) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIframeEmbedScopeAllowedApps(val *IframeEmbedScopeAllowedApps) *NullableIframeEmbedScopeAllowedApps {
	return &NullableIframeEmbedScopeAllowedApps{value: val, isSet: true}
}

func (v NullableIframeEmbedScopeAllowedApps) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIframeEmbedScopeAllowedApps) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
