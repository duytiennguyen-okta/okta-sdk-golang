/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// PolicyPlatformOperatingSystemType the model 'PolicyPlatformOperatingSystemType'
type PolicyPlatformOperatingSystemType string

// List of PolicyPlatformOperatingSystemType
const (
	POLICYPLATFORMOPERATINGSYSTEMTYPE_ANDROID PolicyPlatformOperatingSystemType = "ANDROID"
	POLICYPLATFORMOPERATINGSYSTEMTYPE_ANY     PolicyPlatformOperatingSystemType = "ANY"
	POLICYPLATFORMOPERATINGSYSTEMTYPE_IOS     PolicyPlatformOperatingSystemType = "IOS"
	POLICYPLATFORMOPERATINGSYSTEMTYPE_OSX     PolicyPlatformOperatingSystemType = "OSX"
	POLICYPLATFORMOPERATINGSYSTEMTYPE_OTHER   PolicyPlatformOperatingSystemType = "OTHER"
	POLICYPLATFORMOPERATINGSYSTEMTYPE_WINDOWS PolicyPlatformOperatingSystemType = "WINDOWS"
)

// All allowed values of PolicyPlatformOperatingSystemType enum
var AllowedPolicyPlatformOperatingSystemTypeEnumValues = []PolicyPlatformOperatingSystemType{
	"ANDROID",
	"ANY",
	"IOS",
	"OSX",
	"OTHER",
	"WINDOWS",
}

func (v *PolicyPlatformOperatingSystemType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PolicyPlatformOperatingSystemType(value)
	for _, existing := range AllowedPolicyPlatformOperatingSystemTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PolicyPlatformOperatingSystemType", value)
}

// NewPolicyPlatformOperatingSystemTypeFromValue returns a pointer to a valid PolicyPlatformOperatingSystemType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPolicyPlatformOperatingSystemTypeFromValue(v string) (*PolicyPlatformOperatingSystemType, error) {
	ev := PolicyPlatformOperatingSystemType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PolicyPlatformOperatingSystemType: valid values are %v", v, AllowedPolicyPlatformOperatingSystemTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PolicyPlatformOperatingSystemType) IsValid() bool {
	for _, existing := range AllowedPolicyPlatformOperatingSystemTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PolicyPlatformOperatingSystemType value
func (v PolicyPlatformOperatingSystemType) Ptr() *PolicyPlatformOperatingSystemType {
	return &v
}

type NullablePolicyPlatformOperatingSystemType struct {
	value *PolicyPlatformOperatingSystemType
	isSet bool
}

func (v NullablePolicyPlatformOperatingSystemType) Get() *PolicyPlatformOperatingSystemType {
	return v.value
}

func (v *NullablePolicyPlatformOperatingSystemType) Set(val *PolicyPlatformOperatingSystemType) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyPlatformOperatingSystemType) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyPlatformOperatingSystemType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyPlatformOperatingSystemType(val *PolicyPlatformOperatingSystemType) *NullablePolicyPlatformOperatingSystemType {
	return &NullablePolicyPlatformOperatingSystemType{value: val, isSet: true}
}

func (v NullablePolicyPlatformOperatingSystemType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyPlatformOperatingSystemType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
