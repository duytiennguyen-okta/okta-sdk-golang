/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// EmailDomainStatus the model 'EmailDomainStatus'
type EmailDomainStatus string

// List of EmailDomainStatus
const (
	EMAILDOMAINSTATUS_DELETED     EmailDomainStatus = "DELETED"
	EMAILDOMAINSTATUS_ERROR       EmailDomainStatus = "ERROR"
	EMAILDOMAINSTATUS_NOT_STARTED EmailDomainStatus = "NOT_STARTED"
	EMAILDOMAINSTATUS_POLLING     EmailDomainStatus = "POLLING"
	EMAILDOMAINSTATUS_VERIFIED    EmailDomainStatus = "VERIFIED"
)

// All allowed values of EmailDomainStatus enum
var AllowedEmailDomainStatusEnumValues = []EmailDomainStatus{
	"DELETED",
	"ERROR",
	"NOT_STARTED",
	"POLLING",
	"VERIFIED",
}

func (v *EmailDomainStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EmailDomainStatus(value)
	for _, existing := range AllowedEmailDomainStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EmailDomainStatus", value)
}

// NewEmailDomainStatusFromValue returns a pointer to a valid EmailDomainStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEmailDomainStatusFromValue(v string) (*EmailDomainStatus, error) {
	ev := EmailDomainStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EmailDomainStatus: valid values are %v", v, AllowedEmailDomainStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EmailDomainStatus) IsValid() bool {
	for _, existing := range AllowedEmailDomainStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EmailDomainStatus value
func (v EmailDomainStatus) Ptr() *EmailDomainStatus {
	return &v
}

type NullableEmailDomainStatus struct {
	value *EmailDomainStatus
	isSet bool
}

func (v NullableEmailDomainStatus) Get() *EmailDomainStatus {
	return v.value
}

func (v *NullableEmailDomainStatus) Set(val *EmailDomainStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailDomainStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailDomainStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailDomainStatus(val *EmailDomainStatus) *NullableEmailDomainStatus {
	return &NullableEmailDomainStatus{value: val, isSet: true}
}

func (v NullableEmailDomainStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailDomainStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
