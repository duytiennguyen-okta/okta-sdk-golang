/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// AwsRegion An AWS region
type AwsRegion string

// List of AwsRegion
const (
	AWSREGION_CA_CENTRAL_1 AwsRegion = "ca-central-1"
	AWSREGION_EU_CENTRAL_1 AwsRegion = "eu-central-1"
	AWSREGION_EU_NORTH_1   AwsRegion = "eu-north-1"
	AWSREGION_EU_SOUTH_1   AwsRegion = "eu-south-1"
	AWSREGION_EU_WEST_1    AwsRegion = "eu-west-1"
	AWSREGION_EU_WEST_2    AwsRegion = "eu-west-2"
	AWSREGION_EU_WEST_3    AwsRegion = "eu-west-3"
	AWSREGION_US_EAST_1    AwsRegion = "us-east-1"
	AWSREGION_US_EAST_2    AwsRegion = "us-east-2"
	AWSREGION_US_WEST_1    AwsRegion = "us-west-1"
	AWSREGION_US_WEST_2    AwsRegion = "us-west-2"
)

// All allowed values of AwsRegion enum
var AllowedAwsRegionEnumValues = []AwsRegion{
	"ca-central-1",
	"eu-central-1",
	"eu-north-1",
	"eu-south-1",
	"eu-west-1",
	"eu-west-2",
	"eu-west-3",
	"us-east-1",
	"us-east-2",
	"us-west-1",
	"us-west-2",
}

func (v *AwsRegion) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AwsRegion(value)
	for _, existing := range AllowedAwsRegionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AwsRegion", value)
}

// NewAwsRegionFromValue returns a pointer to a valid AwsRegion
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAwsRegionFromValue(v string) (*AwsRegion, error) {
	ev := AwsRegion(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AwsRegion: valid values are %v", v, AllowedAwsRegionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AwsRegion) IsValid() bool {
	for _, existing := range AllowedAwsRegionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AwsRegion value
func (v AwsRegion) Ptr() *AwsRegion {
	return &v
}

type NullableAwsRegion struct {
	value *AwsRegion
	isSet bool
}

func (v NullableAwsRegion) Get() *AwsRegion {
	return v.value
}

func (v *NullableAwsRegion) Set(val *AwsRegion) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsRegion) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsRegion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsRegion(val *AwsRegion) *NullableAwsRegion {
	return &NullableAwsRegion{value: val, isSet: true}
}

func (v NullableAwsRegion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsRegion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
