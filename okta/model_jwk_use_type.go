/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// JwkUseType the model 'JwkUseType'
type JwkUseType string

// List of JwkUseType
const (
	JWKUSETYPE_SIG JwkUseType = "sig"
)

// All allowed values of JwkUseType enum
var AllowedJwkUseTypeEnumValues = []JwkUseType{
	"sig",
}

func (v *JwkUseType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JwkUseType(value)
	for _, existing := range AllowedJwkUseTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JwkUseType", value)
}

// NewJwkUseTypeFromValue returns a pointer to a valid JwkUseType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJwkUseTypeFromValue(v string) (*JwkUseType, error) {
	ev := JwkUseType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JwkUseType: valid values are %v", v, AllowedJwkUseTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JwkUseType) IsValid() bool {
	for _, existing := range AllowedJwkUseTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to JwkUseType value
func (v JwkUseType) Ptr() *JwkUseType {
	return &v
}

type NullableJwkUseType struct {
	value *JwkUseType
	isSet bool
}

func (v NullableJwkUseType) Get() *JwkUseType {
	return v.value
}

func (v *NullableJwkUseType) Set(val *JwkUseType) {
	v.value = val
	v.isSet = true
}

func (v NullableJwkUseType) IsSet() bool {
	return v.isSet
}

func (v *NullableJwkUseType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJwkUseType(val *JwkUseType) *NullableJwkUseType {
	return &NullableJwkUseType{value: val, isSet: true}
}

func (v NullableJwkUseType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJwkUseType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
