/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// IdentitySourceSessionStatus the model 'IdentitySourceSessionStatus'
type IdentitySourceSessionStatus string

// List of IdentitySourceSessionStatus
const (
	IDENTITYSOURCESESSIONSTATUS_CLOSED    IdentitySourceSessionStatus = "CLOSED"
	IDENTITYSOURCESESSIONSTATUS_COMPLETED IdentitySourceSessionStatus = "COMPLETED"
	IDENTITYSOURCESESSIONSTATUS_CREATED   IdentitySourceSessionStatus = "CREATED"
	IDENTITYSOURCESESSIONSTATUS_ERROR     IdentitySourceSessionStatus = "ERROR"
	IDENTITYSOURCESESSIONSTATUS_EXPIRED   IdentitySourceSessionStatus = "EXPIRED"
	IDENTITYSOURCESESSIONSTATUS_TRIGGERED IdentitySourceSessionStatus = "TRIGGERED"
)

// All allowed values of IdentitySourceSessionStatus enum
var AllowedIdentitySourceSessionStatusEnumValues = []IdentitySourceSessionStatus{
	"CLOSED",
	"COMPLETED",
	"CREATED",
	"ERROR",
	"EXPIRED",
	"TRIGGERED",
}

func (v *IdentitySourceSessionStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IdentitySourceSessionStatus(value)
	for _, existing := range AllowedIdentitySourceSessionStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IdentitySourceSessionStatus", value)
}

// NewIdentitySourceSessionStatusFromValue returns a pointer to a valid IdentitySourceSessionStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIdentitySourceSessionStatusFromValue(v string) (*IdentitySourceSessionStatus, error) {
	ev := IdentitySourceSessionStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IdentitySourceSessionStatus: valid values are %v", v, AllowedIdentitySourceSessionStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IdentitySourceSessionStatus) IsValid() bool {
	for _, existing := range AllowedIdentitySourceSessionStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IdentitySourceSessionStatus value
func (v IdentitySourceSessionStatus) Ptr() *IdentitySourceSessionStatus {
	return &v
}

type NullableIdentitySourceSessionStatus struct {
	value *IdentitySourceSessionStatus
	isSet bool
}

func (v NullableIdentitySourceSessionStatus) Get() *IdentitySourceSessionStatus {
	return v.value
}

func (v *NullableIdentitySourceSessionStatus) Set(val *IdentitySourceSessionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentitySourceSessionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentitySourceSessionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentitySourceSessionStatus(val *IdentitySourceSessionStatus) *NullableIdentitySourceSessionStatus {
	return &NullableIdentitySourceSessionStatus{value: val, isSet: true}
}

func (v NullableIdentitySourceSessionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentitySourceSessionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
