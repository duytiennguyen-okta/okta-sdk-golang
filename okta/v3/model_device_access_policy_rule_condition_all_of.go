/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
)

// DeviceAccessPolicyRuleConditionAllOf struct for DeviceAccessPolicyRuleConditionAllOf
type DeviceAccessPolicyRuleConditionAllOf struct {
	Managed              *bool `json:"managed,omitempty"`
	Registered           *bool `json:"registered,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DeviceAccessPolicyRuleConditionAllOf DeviceAccessPolicyRuleConditionAllOf

// NewDeviceAccessPolicyRuleConditionAllOf instantiates a new DeviceAccessPolicyRuleConditionAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceAccessPolicyRuleConditionAllOf() *DeviceAccessPolicyRuleConditionAllOf {
	this := DeviceAccessPolicyRuleConditionAllOf{}
	return &this
}

// NewDeviceAccessPolicyRuleConditionAllOfWithDefaults instantiates a new DeviceAccessPolicyRuleConditionAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceAccessPolicyRuleConditionAllOfWithDefaults() *DeviceAccessPolicyRuleConditionAllOf {
	this := DeviceAccessPolicyRuleConditionAllOf{}
	return &this
}

// GetManaged returns the Managed field value if set, zero value otherwise.
func (o *DeviceAccessPolicyRuleConditionAllOf) GetManaged() bool {
	if o == nil || o.Managed == nil {
		var ret bool
		return ret
	}
	return *o.Managed
}

// GetManagedOk returns a tuple with the Managed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceAccessPolicyRuleConditionAllOf) GetManagedOk() (*bool, bool) {
	if o == nil || o.Managed == nil {
		return nil, false
	}
	return o.Managed, true
}

// HasManaged returns a boolean if a field has been set.
func (o *DeviceAccessPolicyRuleConditionAllOf) HasManaged() bool {
	if o != nil && o.Managed != nil {
		return true
	}

	return false
}

// SetManaged gets a reference to the given bool and assigns it to the Managed field.
func (o *DeviceAccessPolicyRuleConditionAllOf) SetManaged(v bool) {
	o.Managed = &v
}

// GetRegistered returns the Registered field value if set, zero value otherwise.
func (o *DeviceAccessPolicyRuleConditionAllOf) GetRegistered() bool {
	if o == nil || o.Registered == nil {
		var ret bool
		return ret
	}
	return *o.Registered
}

// GetRegisteredOk returns a tuple with the Registered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceAccessPolicyRuleConditionAllOf) GetRegisteredOk() (*bool, bool) {
	if o == nil || o.Registered == nil {
		return nil, false
	}
	return o.Registered, true
}

// HasRegistered returns a boolean if a field has been set.
func (o *DeviceAccessPolicyRuleConditionAllOf) HasRegistered() bool {
	if o != nil && o.Registered != nil {
		return true
	}

	return false
}

// SetRegistered gets a reference to the given bool and assigns it to the Registered field.
func (o *DeviceAccessPolicyRuleConditionAllOf) SetRegistered(v bool) {
	o.Registered = &v
}

func (o DeviceAccessPolicyRuleConditionAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Managed != nil {
		toSerialize["managed"] = o.Managed
	}
	if o.Registered != nil {
		toSerialize["registered"] = o.Registered
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *DeviceAccessPolicyRuleConditionAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varDeviceAccessPolicyRuleConditionAllOf := _DeviceAccessPolicyRuleConditionAllOf{}

	err = json.Unmarshal(bytes, &varDeviceAccessPolicyRuleConditionAllOf)
	if err == nil {
		*o = DeviceAccessPolicyRuleConditionAllOf(varDeviceAccessPolicyRuleConditionAllOf)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &additionalProperties)
	if err == nil {
		delete(additionalProperties, "managed")
		delete(additionalProperties, "registered")
		o.AdditionalProperties = additionalProperties
	} else {
		return err
	}

	return err
}

type NullableDeviceAccessPolicyRuleConditionAllOf struct {
	value *DeviceAccessPolicyRuleConditionAllOf
	isSet bool
}

func (v NullableDeviceAccessPolicyRuleConditionAllOf) Get() *DeviceAccessPolicyRuleConditionAllOf {
	return v.value
}

func (v *NullableDeviceAccessPolicyRuleConditionAllOf) Set(val *DeviceAccessPolicyRuleConditionAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceAccessPolicyRuleConditionAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceAccessPolicyRuleConditionAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceAccessPolicyRuleConditionAllOf(val *DeviceAccessPolicyRuleConditionAllOf) *NullableDeviceAccessPolicyRuleConditionAllOf {
	return &NullableDeviceAccessPolicyRuleConditionAllOf{value: val, isSet: true}
}

func (v NullableDeviceAccessPolicyRuleConditionAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceAccessPolicyRuleConditionAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
