/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// BehaviorRuleType the model 'BehaviorRuleType'
type BehaviorRuleType string

// List of BehaviorRuleType
const (
	BEHAVIORRULETYPE_ANOMALOUS_DEVICE   BehaviorRuleType = "ANOMALOUS_DEVICE"
	BEHAVIORRULETYPE_ANOMALOUS_IP       BehaviorRuleType = "ANOMALOUS_IP"
	BEHAVIORRULETYPE_ANOMALOUS_LOCATION BehaviorRuleType = "ANOMALOUS_LOCATION"
	BEHAVIORRULETYPE_VELOCITY           BehaviorRuleType = "VELOCITY"
)

// All allowed values of BehaviorRuleType enum
var AllowedBehaviorRuleTypeEnumValues = []BehaviorRuleType{
	"ANOMALOUS_DEVICE",
	"ANOMALOUS_IP",
	"ANOMALOUS_LOCATION",
	"VELOCITY",
}

func (v *BehaviorRuleType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BehaviorRuleType(value)
	for _, existing := range AllowedBehaviorRuleTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BehaviorRuleType", value)
}

// NewBehaviorRuleTypeFromValue returns a pointer to a valid BehaviorRuleType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBehaviorRuleTypeFromValue(v string) (*BehaviorRuleType, error) {
	ev := BehaviorRuleType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BehaviorRuleType: valid values are %v", v, AllowedBehaviorRuleTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BehaviorRuleType) IsValid() bool {
	for _, existing := range AllowedBehaviorRuleTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BehaviorRuleType value
func (v BehaviorRuleType) Ptr() *BehaviorRuleType {
	return &v
}

type NullableBehaviorRuleType struct {
	value *BehaviorRuleType
	isSet bool
}

func (v NullableBehaviorRuleType) Get() *BehaviorRuleType {
	return v.value
}

func (v *NullableBehaviorRuleType) Set(val *BehaviorRuleType) {
	v.value = val
	v.isSet = true
}

func (v NullableBehaviorRuleType) IsSet() bool {
	return v.isSet
}

func (v *NullableBehaviorRuleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBehaviorRuleType(val *BehaviorRuleType) *NullableBehaviorRuleType {
	return &NullableBehaviorRuleType{value: val, isSet: true}
}

func (v NullableBehaviorRuleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBehaviorRuleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
