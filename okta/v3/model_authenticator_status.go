/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// AuthenticatorStatus the model 'AuthenticatorStatus'
type AuthenticatorStatus string

// List of AuthenticatorStatus
const (
	AUTHENTICATORSTATUS_ACTIVE   AuthenticatorStatus = "ACTIVE"
	AUTHENTICATORSTATUS_INACTIVE AuthenticatorStatus = "INACTIVE"
)

// All allowed values of AuthenticatorStatus enum
var AllowedAuthenticatorStatusEnumValues = []AuthenticatorStatus{
	"ACTIVE",
	"INACTIVE",
}

func (v *AuthenticatorStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AuthenticatorStatus(value)
	for _, existing := range AllowedAuthenticatorStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AuthenticatorStatus", value)
}

// NewAuthenticatorStatusFromValue returns a pointer to a valid AuthenticatorStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuthenticatorStatusFromValue(v string) (*AuthenticatorStatus, error) {
	ev := AuthenticatorStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuthenticatorStatus: valid values are %v", v, AllowedAuthenticatorStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuthenticatorStatus) IsValid() bool {
	for _, existing := range AllowedAuthenticatorStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AuthenticatorStatus value
func (v AuthenticatorStatus) Ptr() *AuthenticatorStatus {
	return &v
}

type NullableAuthenticatorStatus struct {
	value *AuthenticatorStatus
	isSet bool
}

func (v NullableAuthenticatorStatus) Get() *AuthenticatorStatus {
	return v.value
}

func (v *NullableAuthenticatorStatus) Set(val *AuthenticatorStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthenticatorStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthenticatorStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthenticatorStatus(val *AuthenticatorStatus) *NullableAuthenticatorStatus {
	return &NullableAuthenticatorStatus{value: val, isSet: true}
}

func (v NullableAuthenticatorStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthenticatorStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
