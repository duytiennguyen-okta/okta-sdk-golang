/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// TrustedOriginScopeType the model 'TrustedOriginScopeType'
type TrustedOriginScopeType string

// List of TrustedOriginScopeType
const (
	TRUSTEDORIGINSCOPETYPE_CORS         TrustedOriginScopeType = "CORS"
	TRUSTEDORIGINSCOPETYPE_IFRAME_EMBED TrustedOriginScopeType = "IFRAME_EMBED"
	TRUSTEDORIGINSCOPETYPE_REDIRECT     TrustedOriginScopeType = "REDIRECT"
)

// All allowed values of TrustedOriginScopeType enum
var AllowedTrustedOriginScopeTypeEnumValues = []TrustedOriginScopeType{
	"CORS",
	"IFRAME_EMBED",
	"REDIRECT",
}

func (v *TrustedOriginScopeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TrustedOriginScopeType(value)
	for _, existing := range AllowedTrustedOriginScopeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TrustedOriginScopeType", value)
}

// NewTrustedOriginScopeTypeFromValue returns a pointer to a valid TrustedOriginScopeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTrustedOriginScopeTypeFromValue(v string) (*TrustedOriginScopeType, error) {
	ev := TrustedOriginScopeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TrustedOriginScopeType: valid values are %v", v, AllowedTrustedOriginScopeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TrustedOriginScopeType) IsValid() bool {
	for _, existing := range AllowedTrustedOriginScopeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TrustedOriginScopeType value
func (v TrustedOriginScopeType) Ptr() *TrustedOriginScopeType {
	return &v
}

type NullableTrustedOriginScopeType struct {
	value *TrustedOriginScopeType
	isSet bool
}

func (v NullableTrustedOriginScopeType) Get() *TrustedOriginScopeType {
	return v.value
}

func (v *NullableTrustedOriginScopeType) Set(val *TrustedOriginScopeType) {
	v.value = val
	v.isSet = true
}

func (v NullableTrustedOriginScopeType) IsSet() bool {
	return v.isSet
}

func (v *NullableTrustedOriginScopeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrustedOriginScopeType(val *TrustedOriginScopeType) *NullableTrustedOriginScopeType {
	return &NullableTrustedOriginScopeType{value: val, isSet: true}
}

func (v NullableTrustedOriginScopeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrustedOriginScopeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
