/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// IdentityProviderPolicyProvider the model 'IdentityProviderPolicyProvider'
type IdentityProviderPolicyProvider string

// List of IdentityProviderPolicyProvider
const (
	IDENTITYPROVIDERPOLICYPROVIDER_ANY          IdentityProviderPolicyProvider = "ANY"
	IDENTITYPROVIDERPOLICYPROVIDER_OKTA         IdentityProviderPolicyProvider = "OKTA"
	IDENTITYPROVIDERPOLICYPROVIDER_SPECIFIC_IDP IdentityProviderPolicyProvider = "SPECIFIC_IDP"
)

// All allowed values of IdentityProviderPolicyProvider enum
var AllowedIdentityProviderPolicyProviderEnumValues = []IdentityProviderPolicyProvider{
	"ANY",
	"OKTA",
	"SPECIFIC_IDP",
}

func (v *IdentityProviderPolicyProvider) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IdentityProviderPolicyProvider(value)
	for _, existing := range AllowedIdentityProviderPolicyProviderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IdentityProviderPolicyProvider", value)
}

// NewIdentityProviderPolicyProviderFromValue returns a pointer to a valid IdentityProviderPolicyProvider
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIdentityProviderPolicyProviderFromValue(v string) (*IdentityProviderPolicyProvider, error) {
	ev := IdentityProviderPolicyProvider(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IdentityProviderPolicyProvider: valid values are %v", v, AllowedIdentityProviderPolicyProviderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IdentityProviderPolicyProvider) IsValid() bool {
	for _, existing := range AllowedIdentityProviderPolicyProviderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IdentityProviderPolicyProvider value
func (v IdentityProviderPolicyProvider) Ptr() *IdentityProviderPolicyProvider {
	return &v
}

type NullableIdentityProviderPolicyProvider struct {
	value *IdentityProviderPolicyProvider
	isSet bool
}

func (v NullableIdentityProviderPolicyProvider) Get() *IdentityProviderPolicyProvider {
	return v.value
}

func (v *NullableIdentityProviderPolicyProvider) Set(val *IdentityProviderPolicyProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityProviderPolicyProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityProviderPolicyProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityProviderPolicyProvider(val *IdentityProviderPolicyProvider) *NullableIdentityProviderPolicyProvider {
	return &NullableIdentityProviderPolicyProvider{value: val, isSet: true}
}

func (v NullableIdentityProviderPolicyProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityProviderPolicyProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
