/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// ApplicationLifecycleStatus the model 'ApplicationLifecycleStatus'
type ApplicationLifecycleStatus string

// List of ApplicationLifecycleStatus
const (
	APPLICATIONLIFECYCLESTATUS_ACTIVE   ApplicationLifecycleStatus = "ACTIVE"
	APPLICATIONLIFECYCLESTATUS_DELETED  ApplicationLifecycleStatus = "DELETED"
	APPLICATIONLIFECYCLESTATUS_INACTIVE ApplicationLifecycleStatus = "INACTIVE"
)

// All allowed values of ApplicationLifecycleStatus enum
var AllowedApplicationLifecycleStatusEnumValues = []ApplicationLifecycleStatus{
	"ACTIVE",
	"DELETED",
	"INACTIVE",
}

func (v *ApplicationLifecycleStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ApplicationLifecycleStatus(value)
	for _, existing := range AllowedApplicationLifecycleStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ApplicationLifecycleStatus", value)
}

// NewApplicationLifecycleStatusFromValue returns a pointer to a valid ApplicationLifecycleStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewApplicationLifecycleStatusFromValue(v string) (*ApplicationLifecycleStatus, error) {
	ev := ApplicationLifecycleStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApplicationLifecycleStatus: valid values are %v", v, AllowedApplicationLifecycleStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ApplicationLifecycleStatus) IsValid() bool {
	for _, existing := range AllowedApplicationLifecycleStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ApplicationLifecycleStatus value
func (v ApplicationLifecycleStatus) Ptr() *ApplicationLifecycleStatus {
	return &v
}

type NullableApplicationLifecycleStatus struct {
	value *ApplicationLifecycleStatus
	isSet bool
}

func (v NullableApplicationLifecycleStatus) Get() *ApplicationLifecycleStatus {
	return v.value
}

func (v *NullableApplicationLifecycleStatus) Set(val *ApplicationLifecycleStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationLifecycleStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationLifecycleStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationLifecycleStatus(val *ApplicationLifecycleStatus) *NullableApplicationLifecycleStatus {
	return &NullableApplicationLifecycleStatus{value: val, isSet: true}
}

func (v NullableApplicationLifecycleStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationLifecycleStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
