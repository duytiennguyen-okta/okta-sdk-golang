/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// ProtocolEndpointType the model 'ProtocolEndpointType'
type ProtocolEndpointType string

// List of ProtocolEndpointType
const (
	PROTOCOLENDPOINTTYPE_INSTANCE ProtocolEndpointType = "INSTANCE"
	PROTOCOLENDPOINTTYPE_ORG      ProtocolEndpointType = "ORG"
)

// All allowed values of ProtocolEndpointType enum
var AllowedProtocolEndpointTypeEnumValues = []ProtocolEndpointType{
	"INSTANCE",
	"ORG",
}

func (v *ProtocolEndpointType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProtocolEndpointType(value)
	for _, existing := range AllowedProtocolEndpointTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProtocolEndpointType", value)
}

// NewProtocolEndpointTypeFromValue returns a pointer to a valid ProtocolEndpointType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProtocolEndpointTypeFromValue(v string) (*ProtocolEndpointType, error) {
	ev := ProtocolEndpointType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProtocolEndpointType: valid values are %v", v, AllowedProtocolEndpointTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProtocolEndpointType) IsValid() bool {
	for _, existing := range AllowedProtocolEndpointTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProtocolEndpointType value
func (v ProtocolEndpointType) Ptr() *ProtocolEndpointType {
	return &v
}

type NullableProtocolEndpointType struct {
	value *ProtocolEndpointType
	isSet bool
}

func (v NullableProtocolEndpointType) Get() *ProtocolEndpointType {
	return v.value
}

func (v *NullableProtocolEndpointType) Set(val *ProtocolEndpointType) {
	v.value = val
	v.isSet = true
}

func (v NullableProtocolEndpointType) IsSet() bool {
	return v.isSet
}

func (v *NullableProtocolEndpointType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtocolEndpointType(val *ProtocolEndpointType) *NullableProtocolEndpointType {
	return &NullableProtocolEndpointType{value: val, isSet: true}
}

func (v NullableProtocolEndpointType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtocolEndpointType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
