/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// FeatureType the model 'FeatureType'
type FeatureType string

// List of FeatureType
const (
	FEATURETYPE_SELF_SERVICE FeatureType = "self-service"
)

// All allowed values of FeatureType enum
var AllowedFeatureTypeEnumValues = []FeatureType{
	"self-service",
}

func (v *FeatureType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FeatureType(value)
	for _, existing := range AllowedFeatureTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FeatureType", value)
}

// NewFeatureTypeFromValue returns a pointer to a valid FeatureType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFeatureTypeFromValue(v string) (*FeatureType, error) {
	ev := FeatureType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FeatureType: valid values are %v", v, AllowedFeatureTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FeatureType) IsValid() bool {
	for _, existing := range AllowedFeatureTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FeatureType value
func (v FeatureType) Ptr() *FeatureType {
	return &v
}

type NullableFeatureType struct {
	value *FeatureType
	isSet bool
}

func (v NullableFeatureType) Get() *FeatureType {
	return v.value
}

func (v *NullableFeatureType) Set(val *FeatureType) {
	v.value = val
	v.isSet = true
}

func (v NullableFeatureType) IsSet() bool {
	return v.isSet
}

func (v *NullableFeatureType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeatureType(val *FeatureType) *NullableFeatureType {
	return &NullableFeatureType{value: val, isSet: true}
}

func (v NullableFeatureType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeatureType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
