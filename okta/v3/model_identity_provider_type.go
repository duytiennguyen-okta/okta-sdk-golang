/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// IdentityProviderType the model 'IdentityProviderType'
type IdentityProviderType string

// List of IdentityProviderType
const (
	IDENTITYPROVIDERTYPE_AGENTLESS_DSSO IdentityProviderType = "AgentlessDSSO"
	IDENTITYPROVIDERTYPE_FACEBOOK       IdentityProviderType = "FACEBOOK"
	IDENTITYPROVIDERTYPE_GOOGLE         IdentityProviderType = "GOOGLE"
	IDENTITYPROVIDERTYPE_IWA            IdentityProviderType = "IWA"
	IDENTITYPROVIDERTYPE_LINKEDIN       IdentityProviderType = "LINKEDIN"
	IDENTITYPROVIDERTYPE_MICROSOFT      IdentityProviderType = "MICROSOFT"
	IDENTITYPROVIDERTYPE_OIDC           IdentityProviderType = "OIDC"
	IDENTITYPROVIDERTYPE_OKTA           IdentityProviderType = "OKTA"
	IDENTITYPROVIDERTYPE_SAML2          IdentityProviderType = "SAML2"
	IDENTITYPROVIDERTYPE_X509           IdentityProviderType = "X509"
)

// All allowed values of IdentityProviderType enum
var AllowedIdentityProviderTypeEnumValues = []IdentityProviderType{
	"AgentlessDSSO",
	"FACEBOOK",
	"GOOGLE",
	"IWA",
	"LINKEDIN",
	"MICROSOFT",
	"OIDC",
	"OKTA",
	"SAML2",
	"X509",
}

func (v *IdentityProviderType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IdentityProviderType(value)
	for _, existing := range AllowedIdentityProviderTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IdentityProviderType", value)
}

// NewIdentityProviderTypeFromValue returns a pointer to a valid IdentityProviderType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIdentityProviderTypeFromValue(v string) (*IdentityProviderType, error) {
	ev := IdentityProviderType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IdentityProviderType: valid values are %v", v, AllowedIdentityProviderTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IdentityProviderType) IsValid() bool {
	for _, existing := range AllowedIdentityProviderTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IdentityProviderType value
func (v IdentityProviderType) Ptr() *IdentityProviderType {
	return &v
}

type NullableIdentityProviderType struct {
	value *IdentityProviderType
	isSet bool
}

func (v NullableIdentityProviderType) Get() *IdentityProviderType {
	return v.value
}

func (v *NullableIdentityProviderType) Set(val *IdentityProviderType) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityProviderType) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityProviderType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityProviderType(val *IdentityProviderType) *NullableIdentityProviderType {
	return &NullableIdentityProviderType{value: val, isSet: true}
}

func (v NullableIdentityProviderType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityProviderType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
