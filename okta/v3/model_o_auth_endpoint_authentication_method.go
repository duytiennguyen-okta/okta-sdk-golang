/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// OAuthEndpointAuthenticationMethod the model 'OAuthEndpointAuthenticationMethod'
type OAuthEndpointAuthenticationMethod string

// List of OAuthEndpointAuthenticationMethod
const (
	OAUTHENDPOINTAUTHENTICATIONMETHOD_CLIENT_SECRET_BASIC OAuthEndpointAuthenticationMethod = "client_secret_basic"
	OAUTHENDPOINTAUTHENTICATIONMETHOD_CLIENT_SECRET_JWT   OAuthEndpointAuthenticationMethod = "client_secret_jwt"
	OAUTHENDPOINTAUTHENTICATIONMETHOD_CLIENT_SECRET_POST  OAuthEndpointAuthenticationMethod = "client_secret_post"
	OAUTHENDPOINTAUTHENTICATIONMETHOD_NONE                OAuthEndpointAuthenticationMethod = "none"
	OAUTHENDPOINTAUTHENTICATIONMETHOD_PRIVATE_KEY_JWT     OAuthEndpointAuthenticationMethod = "private_key_jwt"
)

// All allowed values of OAuthEndpointAuthenticationMethod enum
var AllowedOAuthEndpointAuthenticationMethodEnumValues = []OAuthEndpointAuthenticationMethod{
	"client_secret_basic",
	"client_secret_jwt",
	"client_secret_post",
	"none",
	"private_key_jwt",
}

func (v *OAuthEndpointAuthenticationMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OAuthEndpointAuthenticationMethod(value)
	for _, existing := range AllowedOAuthEndpointAuthenticationMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OAuthEndpointAuthenticationMethod", value)
}

// NewOAuthEndpointAuthenticationMethodFromValue returns a pointer to a valid OAuthEndpointAuthenticationMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOAuthEndpointAuthenticationMethodFromValue(v string) (*OAuthEndpointAuthenticationMethod, error) {
	ev := OAuthEndpointAuthenticationMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OAuthEndpointAuthenticationMethod: valid values are %v", v, AllowedOAuthEndpointAuthenticationMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OAuthEndpointAuthenticationMethod) IsValid() bool {
	for _, existing := range AllowedOAuthEndpointAuthenticationMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OAuthEndpointAuthenticationMethod value
func (v OAuthEndpointAuthenticationMethod) Ptr() *OAuthEndpointAuthenticationMethod {
	return &v
}

type NullableOAuthEndpointAuthenticationMethod struct {
	value *OAuthEndpointAuthenticationMethod
	isSet bool
}

func (v NullableOAuthEndpointAuthenticationMethod) Get() *OAuthEndpointAuthenticationMethod {
	return v.value
}

func (v *NullableOAuthEndpointAuthenticationMethod) Set(val *OAuthEndpointAuthenticationMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableOAuthEndpointAuthenticationMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableOAuthEndpointAuthenticationMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOAuthEndpointAuthenticationMethod(val *OAuthEndpointAuthenticationMethod) *NullableOAuthEndpointAuthenticationMethod {
	return &NullableOAuthEndpointAuthenticationMethod{value: val, isSet: true}
}

func (v NullableOAuthEndpointAuthenticationMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOAuthEndpointAuthenticationMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
