/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// UserStatus the model 'UserStatus'
type UserStatus string

// List of UserStatus
const (
	USERSTATUS_ACTIVE           UserStatus = "ACTIVE"
	USERSTATUS_DEPROVISIONED    UserStatus = "DEPROVISIONED"
	USERSTATUS_LOCKED_OUT       UserStatus = "LOCKED_OUT"
	USERSTATUS_PASSWORD_EXPIRED UserStatus = "PASSWORD_EXPIRED"
	USERSTATUS_PROVISIONED      UserStatus = "PROVISIONED"
	USERSTATUS_RECOVERY         UserStatus = "RECOVERY"
	USERSTATUS_STAGED           UserStatus = "STAGED"
	USERSTATUS_SUSPENDED        UserStatus = "SUSPENDED"
)

// All allowed values of UserStatus enum
var AllowedUserStatusEnumValues = []UserStatus{
	"ACTIVE",
	"DEPROVISIONED",
	"LOCKED_OUT",
	"PASSWORD_EXPIRED",
	"PROVISIONED",
	"RECOVERY",
	"STAGED",
	"SUSPENDED",
}

func (v *UserStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UserStatus(value)
	for _, existing := range AllowedUserStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UserStatus", value)
}

// NewUserStatusFromValue returns a pointer to a valid UserStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserStatusFromValue(v string) (*UserStatus, error) {
	ev := UserStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UserStatus: valid values are %v", v, AllowedUserStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserStatus) IsValid() bool {
	for _, existing := range AllowedUserStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UserStatus value
func (v UserStatus) Ptr() *UserStatus {
	return &v
}

type NullableUserStatus struct {
	value *UserStatus
	isSet bool
}

func (v NullableUserStatus) Get() *UserStatus {
	return v.value
}

func (v *NullableUserStatus) Set(val *UserStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableUserStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableUserStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserStatus(val *UserStatus) *NullableUserStatus {
	return &NullableUserStatus{value: val, isSet: true}
}

func (v NullableUserStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
