/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// NetworkZoneStatus the model 'NetworkZoneStatus'
type NetworkZoneStatus string

// List of NetworkZoneStatus
const (
	NETWORKZONESTATUS_ACTIVE   NetworkZoneStatus = "ACTIVE"
	NETWORKZONESTATUS_INACTIVE NetworkZoneStatus = "INACTIVE"
)

// All allowed values of NetworkZoneStatus enum
var AllowedNetworkZoneStatusEnumValues = []NetworkZoneStatus{
	"ACTIVE",
	"INACTIVE",
}

func (v *NetworkZoneStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NetworkZoneStatus(value)
	for _, existing := range AllowedNetworkZoneStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NetworkZoneStatus", value)
}

// NewNetworkZoneStatusFromValue returns a pointer to a valid NetworkZoneStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNetworkZoneStatusFromValue(v string) (*NetworkZoneStatus, error) {
	ev := NetworkZoneStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NetworkZoneStatus: valid values are %v", v, AllowedNetworkZoneStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NetworkZoneStatus) IsValid() bool {
	for _, existing := range AllowedNetworkZoneStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NetworkZoneStatus value
func (v NetworkZoneStatus) Ptr() *NetworkZoneStatus {
	return &v
}

type NullableNetworkZoneStatus struct {
	value *NetworkZoneStatus
	isSet bool
}

func (v NullableNetworkZoneStatus) Get() *NetworkZoneStatus {
	return v.value
}

func (v *NullableNetworkZoneStatus) Set(val *NetworkZoneStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkZoneStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkZoneStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkZoneStatus(val *NetworkZoneStatus) *NullableNetworkZoneStatus {
	return &NullableNetworkZoneStatus{value: val, isSet: true}
}

func (v NullableNetworkZoneStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkZoneStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
