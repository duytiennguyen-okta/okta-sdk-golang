/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// EventSubscriptionType the model 'EventSubscriptionType'
type EventSubscriptionType string

// List of EventSubscriptionType
const (
	EVENTSUBSCRIPTIONTYPE_EVENT_TYPE EventSubscriptionType = "EVENT_TYPE"
	EVENTSUBSCRIPTIONTYPE_FLOW_EVENT EventSubscriptionType = "FLOW_EVENT"
)

// All allowed values of EventSubscriptionType enum
var AllowedEventSubscriptionTypeEnumValues = []EventSubscriptionType{
	"EVENT_TYPE",
	"FLOW_EVENT",
}

func (v *EventSubscriptionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EventSubscriptionType(value)
	for _, existing := range AllowedEventSubscriptionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EventSubscriptionType", value)
}

// NewEventSubscriptionTypeFromValue returns a pointer to a valid EventSubscriptionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEventSubscriptionTypeFromValue(v string) (*EventSubscriptionType, error) {
	ev := EventSubscriptionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EventSubscriptionType: valid values are %v", v, AllowedEventSubscriptionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EventSubscriptionType) IsValid() bool {
	for _, existing := range AllowedEventSubscriptionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EventSubscriptionType value
func (v EventSubscriptionType) Ptr() *EventSubscriptionType {
	return &v
}

type NullableEventSubscriptionType struct {
	value *EventSubscriptionType
	isSet bool
}

func (v NullableEventSubscriptionType) Get() *EventSubscriptionType {
	return v.value
}

func (v *NullableEventSubscriptionType) Set(val *EventSubscriptionType) {
	v.value = val
	v.isSet = true
}

func (v NullableEventSubscriptionType) IsSet() bool {
	return v.isSet
}

func (v *NullableEventSubscriptionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventSubscriptionType(val *EventSubscriptionType) *NullableEventSubscriptionType {
	return &NullableEventSubscriptionType{value: val, isSet: true}
}

func (v NullableEventSubscriptionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventSubscriptionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
