/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// DevicePolicyPlatformType the model 'DevicePolicyPlatformType'
type DevicePolicyPlatformType string

// List of DevicePolicyPlatformType
const (
	DEVICEPOLICYPLATFORMTYPE_ANDROID DevicePolicyPlatformType = "ANDROID"
	DEVICEPOLICYPLATFORMTYPE_IOS     DevicePolicyPlatformType = "IOS"
	DEVICEPOLICYPLATFORMTYPE_OSX     DevicePolicyPlatformType = "OSX"
	DEVICEPOLICYPLATFORMTYPE_WINDOWS DevicePolicyPlatformType = "WINDOWS"
)

// All allowed values of DevicePolicyPlatformType enum
var AllowedDevicePolicyPlatformTypeEnumValues = []DevicePolicyPlatformType{
	"ANDROID",
	"IOS",
	"OSX",
	"WINDOWS",
}

func (v *DevicePolicyPlatformType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DevicePolicyPlatformType(value)
	for _, existing := range AllowedDevicePolicyPlatformTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DevicePolicyPlatformType", value)
}

// NewDevicePolicyPlatformTypeFromValue returns a pointer to a valid DevicePolicyPlatformType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDevicePolicyPlatformTypeFromValue(v string) (*DevicePolicyPlatformType, error) {
	ev := DevicePolicyPlatformType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DevicePolicyPlatformType: valid values are %v", v, AllowedDevicePolicyPlatformTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DevicePolicyPlatformType) IsValid() bool {
	for _, existing := range AllowedDevicePolicyPlatformTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DevicePolicyPlatformType value
func (v DevicePolicyPlatformType) Ptr() *DevicePolicyPlatformType {
	return &v
}

type NullableDevicePolicyPlatformType struct {
	value *DevicePolicyPlatformType
	isSet bool
}

func (v NullableDevicePolicyPlatformType) Get() *DevicePolicyPlatformType {
	return v.value
}

func (v *NullableDevicePolicyPlatformType) Set(val *DevicePolicyPlatformType) {
	v.value = val
	v.isSet = true
}

func (v NullableDevicePolicyPlatformType) IsSet() bool {
	return v.isSet
}

func (v *NullableDevicePolicyPlatformType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevicePolicyPlatformType(val *DevicePolicyPlatformType) *NullableDevicePolicyPlatformType {
	return &NullableDevicePolicyPlatformType{value: val, isSet: true}
}

func (v NullableDevicePolicyPlatformType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevicePolicyPlatformType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
