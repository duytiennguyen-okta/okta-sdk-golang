/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// MultifactorEnrollmentPolicySettingsType the model 'MultifactorEnrollmentPolicySettingsType'
type MultifactorEnrollmentPolicySettingsType string

// List of MultifactorEnrollmentPolicySettingsType
const (
	MULTIFACTORENROLLMENTPOLICYSETTINGSTYPE_AUTHENTICATORS MultifactorEnrollmentPolicySettingsType = "AUTHENTICATORS"
)

// All allowed values of MultifactorEnrollmentPolicySettingsType enum
var AllowedMultifactorEnrollmentPolicySettingsTypeEnumValues = []MultifactorEnrollmentPolicySettingsType{
	"AUTHENTICATORS",
}

func (v *MultifactorEnrollmentPolicySettingsType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MultifactorEnrollmentPolicySettingsType(value)
	for _, existing := range AllowedMultifactorEnrollmentPolicySettingsTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MultifactorEnrollmentPolicySettingsType", value)
}

// NewMultifactorEnrollmentPolicySettingsTypeFromValue returns a pointer to a valid MultifactorEnrollmentPolicySettingsType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMultifactorEnrollmentPolicySettingsTypeFromValue(v string) (*MultifactorEnrollmentPolicySettingsType, error) {
	ev := MultifactorEnrollmentPolicySettingsType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MultifactorEnrollmentPolicySettingsType: valid values are %v", v, AllowedMultifactorEnrollmentPolicySettingsTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MultifactorEnrollmentPolicySettingsType) IsValid() bool {
	for _, existing := range AllowedMultifactorEnrollmentPolicySettingsTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MultifactorEnrollmentPolicySettingsType value
func (v MultifactorEnrollmentPolicySettingsType) Ptr() *MultifactorEnrollmentPolicySettingsType {
	return &v
}

type NullableMultifactorEnrollmentPolicySettingsType struct {
	value *MultifactorEnrollmentPolicySettingsType
	isSet bool
}

func (v NullableMultifactorEnrollmentPolicySettingsType) Get() *MultifactorEnrollmentPolicySettingsType {
	return v.value
}

func (v *NullableMultifactorEnrollmentPolicySettingsType) Set(val *MultifactorEnrollmentPolicySettingsType) {
	v.value = val
	v.isSet = true
}

func (v NullableMultifactorEnrollmentPolicySettingsType) IsSet() bool {
	return v.isSet
}

func (v *NullableMultifactorEnrollmentPolicySettingsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultifactorEnrollmentPolicySettingsType(val *MultifactorEnrollmentPolicySettingsType) *NullableMultifactorEnrollmentPolicySettingsType {
	return &NullableMultifactorEnrollmentPolicySettingsType{value: val, isSet: true}
}

func (v NullableMultifactorEnrollmentPolicySettingsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultifactorEnrollmentPolicySettingsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
