/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// LocationGranularity the model 'LocationGranularity'
type LocationGranularity string

// List of LocationGranularity
const (
	LOCATIONGRANULARITY_CITY        LocationGranularity = "CITY"
	LOCATIONGRANULARITY_COUNTRY     LocationGranularity = "COUNTRY"
	LOCATIONGRANULARITY_LAT_LONG    LocationGranularity = "LAT_LONG"
	LOCATIONGRANULARITY_SUBDIVISION LocationGranularity = "SUBDIVISION"
)

// All allowed values of LocationGranularity enum
var AllowedLocationGranularityEnumValues = []LocationGranularity{
	"CITY",
	"COUNTRY",
	"LAT_LONG",
	"SUBDIVISION",
}

func (v *LocationGranularity) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LocationGranularity(value)
	for _, existing := range AllowedLocationGranularityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LocationGranularity", value)
}

// NewLocationGranularityFromValue returns a pointer to a valid LocationGranularity
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLocationGranularityFromValue(v string) (*LocationGranularity, error) {
	ev := LocationGranularity(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LocationGranularity: valid values are %v", v, AllowedLocationGranularityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LocationGranularity) IsValid() bool {
	for _, existing := range AllowedLocationGranularityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LocationGranularity value
func (v LocationGranularity) Ptr() *LocationGranularity {
	return &v
}

type NullableLocationGranularity struct {
	value *LocationGranularity
	isSet bool
}

func (v NullableLocationGranularity) Get() *LocationGranularity {
	return v.value
}

func (v *NullableLocationGranularity) Set(val *LocationGranularity) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationGranularity) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationGranularity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationGranularity(val *LocationGranularity) *NullableLocationGranularity {
	return &NullableLocationGranularity{value: val, isSet: true}
}

func (v NullableLocationGranularity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationGranularity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
