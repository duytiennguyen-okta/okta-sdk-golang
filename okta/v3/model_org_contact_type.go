/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// OrgContactType the model 'OrgContactType'
type OrgContactType string

// List of OrgContactType
const (
	ORGCONTACTTYPE_BILLING   OrgContactType = "BILLING"
	ORGCONTACTTYPE_TECHNICAL OrgContactType = "TECHNICAL"
)

// All allowed values of OrgContactType enum
var AllowedOrgContactTypeEnumValues = []OrgContactType{
	"BILLING",
	"TECHNICAL",
}

func (v *OrgContactType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrgContactType(value)
	for _, existing := range AllowedOrgContactTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrgContactType", value)
}

// NewOrgContactTypeFromValue returns a pointer to a valid OrgContactType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrgContactTypeFromValue(v string) (*OrgContactType, error) {
	ev := OrgContactType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrgContactType: valid values are %v", v, AllowedOrgContactTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrgContactType) IsValid() bool {
	for _, existing := range AllowedOrgContactTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrgContactType value
func (v OrgContactType) Ptr() *OrgContactType {
	return &v
}

type NullableOrgContactType struct {
	value *OrgContactType
	isSet bool
}

func (v NullableOrgContactType) Get() *OrgContactType {
	return v.value
}

func (v *NullableOrgContactType) Set(val *OrgContactType) {
	v.value = val
	v.isSet = true
}

func (v NullableOrgContactType) IsSet() bool {
	return v.isSet
}

func (v *NullableOrgContactType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrgContactType(val *OrgContactType) *NullableOrgContactType {
	return &NullableOrgContactType{value: val, isSet: true}
}

func (v NullableOrgContactType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrgContactType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
