/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// ReleaseChannel Release channel for auto-update
type ReleaseChannel string

// List of ReleaseChannel
const (
	RELEASECHANNEL_BETA ReleaseChannel = "BETA"
	RELEASECHANNEL_EA   ReleaseChannel = "EA"
	RELEASECHANNEL_GA   ReleaseChannel = "GA"
	RELEASECHANNEL_TEST ReleaseChannel = "TEST"
)

// All allowed values of ReleaseChannel enum
var AllowedReleaseChannelEnumValues = []ReleaseChannel{
	"BETA",
	"EA",
	"GA",
	"TEST",
}

func (v *ReleaseChannel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReleaseChannel(value)
	for _, existing := range AllowedReleaseChannelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReleaseChannel", value)
}

// NewReleaseChannelFromValue returns a pointer to a valid ReleaseChannel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReleaseChannelFromValue(v string) (*ReleaseChannel, error) {
	ev := ReleaseChannel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReleaseChannel: valid values are %v", v, AllowedReleaseChannelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReleaseChannel) IsValid() bool {
	for _, existing := range AllowedReleaseChannelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReleaseChannel value
func (v ReleaseChannel) Ptr() *ReleaseChannel {
	return &v
}

type NullableReleaseChannel struct {
	value *ReleaseChannel
	isSet bool
}

func (v NullableReleaseChannel) Get() *ReleaseChannel {
	return v.value
}

func (v *NullableReleaseChannel) Set(val *ReleaseChannel) {
	v.value = val
	v.isSet = true
}

func (v NullableReleaseChannel) IsSet() bool {
	return v.isSet
}

func (v *NullableReleaseChannel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReleaseChannel(val *ReleaseChannel) *NullableReleaseChannel {
	return &NullableReleaseChannel{value: val, isSet: true}
}

func (v NullableReleaseChannel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReleaseChannel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
