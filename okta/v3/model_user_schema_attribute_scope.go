/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// UserSchemaAttributeScope the model 'UserSchemaAttributeScope'
type UserSchemaAttributeScope string

// List of UserSchemaAttributeScope
const (
	USERSCHEMAATTRIBUTESCOPE_NONE UserSchemaAttributeScope = "NONE"
	USERSCHEMAATTRIBUTESCOPE_SELF UserSchemaAttributeScope = "SELF"
)

// All allowed values of UserSchemaAttributeScope enum
var AllowedUserSchemaAttributeScopeEnumValues = []UserSchemaAttributeScope{
	"NONE",
	"SELF",
}

func (v *UserSchemaAttributeScope) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UserSchemaAttributeScope(value)
	for _, existing := range AllowedUserSchemaAttributeScopeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UserSchemaAttributeScope", value)
}

// NewUserSchemaAttributeScopeFromValue returns a pointer to a valid UserSchemaAttributeScope
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserSchemaAttributeScopeFromValue(v string) (*UserSchemaAttributeScope, error) {
	ev := UserSchemaAttributeScope(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UserSchemaAttributeScope: valid values are %v", v, AllowedUserSchemaAttributeScopeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserSchemaAttributeScope) IsValid() bool {
	for _, existing := range AllowedUserSchemaAttributeScopeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UserSchemaAttributeScope value
func (v UserSchemaAttributeScope) Ptr() *UserSchemaAttributeScope {
	return &v
}

type NullableUserSchemaAttributeScope struct {
	value *UserSchemaAttributeScope
	isSet bool
}

func (v NullableUserSchemaAttributeScope) Get() *UserSchemaAttributeScope {
	return v.value
}

func (v *NullableUserSchemaAttributeScope) Set(val *UserSchemaAttributeScope) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSchemaAttributeScope) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSchemaAttributeScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSchemaAttributeScope(val *UserSchemaAttributeScope) *NullableUserSchemaAttributeScope {
	return &NullableUserSchemaAttributeScope{value: val, isSet: true}
}

func (v NullableUserSchemaAttributeScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSchemaAttributeScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
