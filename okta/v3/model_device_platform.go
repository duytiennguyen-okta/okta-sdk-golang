/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// DevicePlatform OS platform of the device
type DevicePlatform string

// List of DevicePlatform
const (
	DEVICEPLATFORM_ANDROID DevicePlatform = "ANDROID"
	DEVICEPLATFORM_IOS     DevicePlatform = "IOS"
	DEVICEPLATFORM_MACOS   DevicePlatform = "MACOS"
	DEVICEPLATFORM_WINDOWS DevicePlatform = "WINDOWS"
)

// All allowed values of DevicePlatform enum
var AllowedDevicePlatformEnumValues = []DevicePlatform{
	"ANDROID",
	"IOS",
	"MACOS",
	"WINDOWS",
}

func (v *DevicePlatform) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DevicePlatform(value)
	for _, existing := range AllowedDevicePlatformEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DevicePlatform", value)
}

// NewDevicePlatformFromValue returns a pointer to a valid DevicePlatform
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDevicePlatformFromValue(v string) (*DevicePlatform, error) {
	ev := DevicePlatform(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DevicePlatform: valid values are %v", v, AllowedDevicePlatformEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DevicePlatform) IsValid() bool {
	for _, existing := range AllowedDevicePlatformEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DevicePlatform value
func (v DevicePlatform) Ptr() *DevicePlatform {
	return &v
}

type NullableDevicePlatform struct {
	value *DevicePlatform
	isSet bool
}

func (v NullableDevicePlatform) Get() *DevicePlatform {
	return v.value
}

func (v *NullableDevicePlatform) Set(val *DevicePlatform) {
	v.value = val
	v.isSet = true
}

func (v NullableDevicePlatform) IsSet() bool {
	return v.isSet
}

func (v *NullableDevicePlatform) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevicePlatform(val *DevicePlatform) *NullableDevicePlatform {
	return &NullableDevicePlatform{value: val, isSet: true}
}

func (v NullableDevicePlatform) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevicePlatform) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
