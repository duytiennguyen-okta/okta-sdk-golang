/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// OperationalStatus Operational status of a given agent
type OperationalStatus string

// List of OperationalStatus
const (
	OPERATIONALSTATUS_DEGRADED    OperationalStatus = "DEGRADED"
	OPERATIONALSTATUS_DISRUPTED   OperationalStatus = "DISRUPTED"
	OPERATIONALSTATUS_INACTIVE    OperationalStatus = "INACTIVE"
	OPERATIONALSTATUS_OPERATIONAL OperationalStatus = "OPERATIONAL"
)

// All allowed values of OperationalStatus enum
var AllowedOperationalStatusEnumValues = []OperationalStatus{
	"DEGRADED",
	"DISRUPTED",
	"INACTIVE",
	"OPERATIONAL",
}

func (v *OperationalStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OperationalStatus(value)
	for _, existing := range AllowedOperationalStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OperationalStatus", value)
}

// NewOperationalStatusFromValue returns a pointer to a valid OperationalStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOperationalStatusFromValue(v string) (*OperationalStatus, error) {
	ev := OperationalStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OperationalStatus: valid values are %v", v, AllowedOperationalStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OperationalStatus) IsValid() bool {
	for _, existing := range AllowedOperationalStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OperationalStatus value
func (v OperationalStatus) Ptr() *OperationalStatus {
	return &v
}

type NullableOperationalStatus struct {
	value *OperationalStatus
	isSet bool
}

func (v NullableOperationalStatus) Get() *OperationalStatus {
	return v.value
}

func (v *NullableOperationalStatus) Set(val *OperationalStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableOperationalStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableOperationalStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOperationalStatus(val *OperationalStatus) *NullableOperationalStatus {
	return &NullableOperationalStatus{value: val, isSet: true}
}

func (v NullableOperationalStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOperationalStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
