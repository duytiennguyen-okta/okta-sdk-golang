/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// DomainCertificateType the model 'DomainCertificateType'
type DomainCertificateType string

// List of DomainCertificateType
const (
	DOMAINCERTIFICATETYPE_PEM DomainCertificateType = "PEM"
)

// All allowed values of DomainCertificateType enum
var AllowedDomainCertificateTypeEnumValues = []DomainCertificateType{
	"PEM",
}

func (v *DomainCertificateType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DomainCertificateType(value)
	for _, existing := range AllowedDomainCertificateTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DomainCertificateType", value)
}

// NewDomainCertificateTypeFromValue returns a pointer to a valid DomainCertificateType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDomainCertificateTypeFromValue(v string) (*DomainCertificateType, error) {
	ev := DomainCertificateType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DomainCertificateType: valid values are %v", v, AllowedDomainCertificateTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DomainCertificateType) IsValid() bool {
	for _, existing := range AllowedDomainCertificateTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DomainCertificateType value
func (v DomainCertificateType) Ptr() *DomainCertificateType {
	return &v
}

type NullableDomainCertificateType struct {
	value *DomainCertificateType
	isSet bool
}

func (v NullableDomainCertificateType) Get() *DomainCertificateType {
	return v.value
}

func (v *NullableDomainCertificateType) Set(val *DomainCertificateType) {
	v.value = val
	v.isSet = true
}

func (v NullableDomainCertificateType) IsSet() bool {
	return v.isSet
}

func (v *NullableDomainCertificateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomainCertificateType(val *DomainCertificateType) *NullableDomainCertificateType {
	return &NullableDomainCertificateType{value: val, isSet: true}
}

func (v NullableDomainCertificateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomainCertificateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
