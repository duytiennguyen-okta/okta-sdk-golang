/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// LinkedObjectDetailsType the model 'LinkedObjectDetailsType'
type LinkedObjectDetailsType string

// List of LinkedObjectDetailsType
const (
	LINKEDOBJECTDETAILSTYPE_USER LinkedObjectDetailsType = "USER"
)

// All allowed values of LinkedObjectDetailsType enum
var AllowedLinkedObjectDetailsTypeEnumValues = []LinkedObjectDetailsType{
	"USER",
}

func (v *LinkedObjectDetailsType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LinkedObjectDetailsType(value)
	for _, existing := range AllowedLinkedObjectDetailsTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LinkedObjectDetailsType", value)
}

// NewLinkedObjectDetailsTypeFromValue returns a pointer to a valid LinkedObjectDetailsType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLinkedObjectDetailsTypeFromValue(v string) (*LinkedObjectDetailsType, error) {
	ev := LinkedObjectDetailsType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LinkedObjectDetailsType: valid values are %v", v, AllowedLinkedObjectDetailsTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LinkedObjectDetailsType) IsValid() bool {
	for _, existing := range AllowedLinkedObjectDetailsTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LinkedObjectDetailsType value
func (v LinkedObjectDetailsType) Ptr() *LinkedObjectDetailsType {
	return &v
}

type NullableLinkedObjectDetailsType struct {
	value *LinkedObjectDetailsType
	isSet bool
}

func (v NullableLinkedObjectDetailsType) Get() *LinkedObjectDetailsType {
	return v.value
}

func (v *NullableLinkedObjectDetailsType) Set(val *LinkedObjectDetailsType) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkedObjectDetailsType) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkedObjectDetailsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkedObjectDetailsType(val *LinkedObjectDetailsType) *NullableLinkedObjectDetailsType {
	return &NullableLinkedObjectDetailsType{value: val, isSet: true}
}

func (v NullableLinkedObjectDetailsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkedObjectDetailsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
