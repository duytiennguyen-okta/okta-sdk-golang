/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// LogStreamType The Log Stream type specifies the streaming provider used. Okta supports [AWS EventBridge](https://aws.amazon.com/eventbridge/) and [Splunk Cloud](https://www.splunk.com/en_us/software/splunk-cloud-platform.html).
type LogStreamType string

// List of LogStreamType
const (
	LOGSTREAMTYPE_AWS_EVENTBRIDGE           LogStreamType = "aws_eventbridge"
	LOGSTREAMTYPE_SPLUNK_CLOUD_LOGSTREAMING LogStreamType = "splunk_cloud_logstreaming"
)

// All allowed values of LogStreamType enum
var AllowedLogStreamTypeEnumValues = []LogStreamType{
	"aws_eventbridge",
	"splunk_cloud_logstreaming",
}

func (v *LogStreamType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LogStreamType(value)
	for _, existing := range AllowedLogStreamTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LogStreamType", value)
}

// NewLogStreamTypeFromValue returns a pointer to a valid LogStreamType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLogStreamTypeFromValue(v string) (*LogStreamType, error) {
	ev := LogStreamType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LogStreamType: valid values are %v", v, AllowedLogStreamTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LogStreamType) IsValid() bool {
	for _, existing := range AllowedLogStreamTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LogStreamType value
func (v LogStreamType) Ptr() *LogStreamType {
	return &v
}

type NullableLogStreamType struct {
	value *LogStreamType
	isSet bool
}

func (v NullableLogStreamType) Get() *LogStreamType {
	return v.value
}

func (v *NullableLogStreamType) Set(val *LogStreamType) {
	v.value = val
	v.isSet = true
}

func (v NullableLogStreamType) IsSet() bool {
	return v.isSet
}

func (v *NullableLogStreamType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogStreamType(val *LogStreamType) *NullableLogStreamType {
	return &NullableLogStreamType{value: val, isSet: true}
}

func (v NullableLogStreamType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogStreamType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
