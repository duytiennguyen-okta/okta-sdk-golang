/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// GrantOrTokenStatus the model 'GrantOrTokenStatus'
type GrantOrTokenStatus string

// List of GrantOrTokenStatus
const (
	GRANTORTOKENSTATUS_ACTIVE  GrantOrTokenStatus = "ACTIVE"
	GRANTORTOKENSTATUS_REVOKED GrantOrTokenStatus = "REVOKED"
)

// All allowed values of GrantOrTokenStatus enum
var AllowedGrantOrTokenStatusEnumValues = []GrantOrTokenStatus{
	"ACTIVE",
	"REVOKED",
}

func (v *GrantOrTokenStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GrantOrTokenStatus(value)
	for _, existing := range AllowedGrantOrTokenStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GrantOrTokenStatus", value)
}

// NewGrantOrTokenStatusFromValue returns a pointer to a valid GrantOrTokenStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGrantOrTokenStatusFromValue(v string) (*GrantOrTokenStatus, error) {
	ev := GrantOrTokenStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GrantOrTokenStatus: valid values are %v", v, AllowedGrantOrTokenStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GrantOrTokenStatus) IsValid() bool {
	for _, existing := range AllowedGrantOrTokenStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GrantOrTokenStatus value
func (v GrantOrTokenStatus) Ptr() *GrantOrTokenStatus {
	return &v
}

type NullableGrantOrTokenStatus struct {
	value *GrantOrTokenStatus
	isSet bool
}

func (v NullableGrantOrTokenStatus) Get() *GrantOrTokenStatus {
	return v.value
}

func (v *NullableGrantOrTokenStatus) Set(val *GrantOrTokenStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableGrantOrTokenStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableGrantOrTokenStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGrantOrTokenStatus(val *GrantOrTokenStatus) *NullableGrantOrTokenStatus {
	return &NullableGrantOrTokenStatus{value: val, isSet: true}
}

func (v NullableGrantOrTokenStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGrantOrTokenStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
