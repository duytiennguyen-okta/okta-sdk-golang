/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
)

// DeviceAssurance struct for DeviceAssurance
type DeviceAssurance struct {
	CreatedBy          *string                            `json:"createdBy,omitempty"`
	CreatedDate        *string                            `json:"createdDate,omitempty"`
	DiskEncryptionType *DeviceAssuranceDiskEncryptionType `json:"diskEncryptionType,omitempty"`
	Id                 *string                            `json:"id,omitempty"`
	Jailbreak          *bool                              `json:"jailbreak,omitempty"`
	LastUpdatedBy      *string                            `json:"lastUpdatedBy,omitempty"`
	LastUpdatedDate    *string                            `json:"lastUpdatedDate,omitempty"`
	// Display name of the Device Assurance Policy
	Name                  *string                        `json:"name,omitempty"`
	OsVersion             *VersionObject                 `json:"osVersion,omitempty"`
	Platform              *Platform                      `json:"platform,omitempty"`
	ScreenLockType        *DeviceAssuranceScreenLockType `json:"screenLockType,omitempty"`
	SecureHardwarePresent *bool                          `json:"secureHardwarePresent,omitempty"`
	Links                 *ApiTokenLink                  `json:"_links,omitempty"`
	AdditionalProperties  map[string]interface{}
}

type _DeviceAssurance DeviceAssurance

// NewDeviceAssurance instantiates a new DeviceAssurance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceAssurance() *DeviceAssurance {
	this := DeviceAssurance{}
	return &this
}

// NewDeviceAssuranceWithDefaults instantiates a new DeviceAssurance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceAssuranceWithDefaults() *DeviceAssurance {
	this := DeviceAssurance{}
	return &this
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *DeviceAssurance) GetCreatedBy() string {
	if o == nil || o.CreatedBy == nil {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceAssurance) GetCreatedByOk() (*string, bool) {
	if o == nil || o.CreatedBy == nil {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *DeviceAssurance) HasCreatedBy() bool {
	if o != nil && o.CreatedBy != nil {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *DeviceAssurance) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetCreatedDate returns the CreatedDate field value if set, zero value otherwise.
func (o *DeviceAssurance) GetCreatedDate() string {
	if o == nil || o.CreatedDate == nil {
		var ret string
		return ret
	}
	return *o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceAssurance) GetCreatedDateOk() (*string, bool) {
	if o == nil || o.CreatedDate == nil {
		return nil, false
	}
	return o.CreatedDate, true
}

// HasCreatedDate returns a boolean if a field has been set.
func (o *DeviceAssurance) HasCreatedDate() bool {
	if o != nil && o.CreatedDate != nil {
		return true
	}

	return false
}

// SetCreatedDate gets a reference to the given string and assigns it to the CreatedDate field.
func (o *DeviceAssurance) SetCreatedDate(v string) {
	o.CreatedDate = &v
}

// GetDiskEncryptionType returns the DiskEncryptionType field value if set, zero value otherwise.
func (o *DeviceAssurance) GetDiskEncryptionType() DeviceAssuranceDiskEncryptionType {
	if o == nil || o.DiskEncryptionType == nil {
		var ret DeviceAssuranceDiskEncryptionType
		return ret
	}
	return *o.DiskEncryptionType
}

// GetDiskEncryptionTypeOk returns a tuple with the DiskEncryptionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceAssurance) GetDiskEncryptionTypeOk() (*DeviceAssuranceDiskEncryptionType, bool) {
	if o == nil || o.DiskEncryptionType == nil {
		return nil, false
	}
	return o.DiskEncryptionType, true
}

// HasDiskEncryptionType returns a boolean if a field has been set.
func (o *DeviceAssurance) HasDiskEncryptionType() bool {
	if o != nil && o.DiskEncryptionType != nil {
		return true
	}

	return false
}

// SetDiskEncryptionType gets a reference to the given DeviceAssuranceDiskEncryptionType and assigns it to the DiskEncryptionType field.
func (o *DeviceAssurance) SetDiskEncryptionType(v DeviceAssuranceDiskEncryptionType) {
	o.DiskEncryptionType = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DeviceAssurance) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceAssurance) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DeviceAssurance) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DeviceAssurance) SetId(v string) {
	o.Id = &v
}

// GetJailbreak returns the Jailbreak field value if set, zero value otherwise.
func (o *DeviceAssurance) GetJailbreak() bool {
	if o == nil || o.Jailbreak == nil {
		var ret bool
		return ret
	}
	return *o.Jailbreak
}

// GetJailbreakOk returns a tuple with the Jailbreak field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceAssurance) GetJailbreakOk() (*bool, bool) {
	if o == nil || o.Jailbreak == nil {
		return nil, false
	}
	return o.Jailbreak, true
}

// HasJailbreak returns a boolean if a field has been set.
func (o *DeviceAssurance) HasJailbreak() bool {
	if o != nil && o.Jailbreak != nil {
		return true
	}

	return false
}

// SetJailbreak gets a reference to the given bool and assigns it to the Jailbreak field.
func (o *DeviceAssurance) SetJailbreak(v bool) {
	o.Jailbreak = &v
}

// GetLastUpdatedBy returns the LastUpdatedBy field value if set, zero value otherwise.
func (o *DeviceAssurance) GetLastUpdatedBy() string {
	if o == nil || o.LastUpdatedBy == nil {
		var ret string
		return ret
	}
	return *o.LastUpdatedBy
}

// GetLastUpdatedByOk returns a tuple with the LastUpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceAssurance) GetLastUpdatedByOk() (*string, bool) {
	if o == nil || o.LastUpdatedBy == nil {
		return nil, false
	}
	return o.LastUpdatedBy, true
}

// HasLastUpdatedBy returns a boolean if a field has been set.
func (o *DeviceAssurance) HasLastUpdatedBy() bool {
	if o != nil && o.LastUpdatedBy != nil {
		return true
	}

	return false
}

// SetLastUpdatedBy gets a reference to the given string and assigns it to the LastUpdatedBy field.
func (o *DeviceAssurance) SetLastUpdatedBy(v string) {
	o.LastUpdatedBy = &v
}

// GetLastUpdatedDate returns the LastUpdatedDate field value if set, zero value otherwise.
func (o *DeviceAssurance) GetLastUpdatedDate() string {
	if o == nil || o.LastUpdatedDate == nil {
		var ret string
		return ret
	}
	return *o.LastUpdatedDate
}

// GetLastUpdatedDateOk returns a tuple with the LastUpdatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceAssurance) GetLastUpdatedDateOk() (*string, bool) {
	if o == nil || o.LastUpdatedDate == nil {
		return nil, false
	}
	return o.LastUpdatedDate, true
}

// HasLastUpdatedDate returns a boolean if a field has been set.
func (o *DeviceAssurance) HasLastUpdatedDate() bool {
	if o != nil && o.LastUpdatedDate != nil {
		return true
	}

	return false
}

// SetLastUpdatedDate gets a reference to the given string and assigns it to the LastUpdatedDate field.
func (o *DeviceAssurance) SetLastUpdatedDate(v string) {
	o.LastUpdatedDate = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DeviceAssurance) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceAssurance) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DeviceAssurance) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DeviceAssurance) SetName(v string) {
	o.Name = &v
}

// GetOsVersion returns the OsVersion field value if set, zero value otherwise.
func (o *DeviceAssurance) GetOsVersion() VersionObject {
	if o == nil || o.OsVersion == nil {
		var ret VersionObject
		return ret
	}
	return *o.OsVersion
}

// GetOsVersionOk returns a tuple with the OsVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceAssurance) GetOsVersionOk() (*VersionObject, bool) {
	if o == nil || o.OsVersion == nil {
		return nil, false
	}
	return o.OsVersion, true
}

// HasOsVersion returns a boolean if a field has been set.
func (o *DeviceAssurance) HasOsVersion() bool {
	if o != nil && o.OsVersion != nil {
		return true
	}

	return false
}

// SetOsVersion gets a reference to the given VersionObject and assigns it to the OsVersion field.
func (o *DeviceAssurance) SetOsVersion(v VersionObject) {
	o.OsVersion = &v
}

// GetPlatform returns the Platform field value if set, zero value otherwise.
func (o *DeviceAssurance) GetPlatform() Platform {
	if o == nil || o.Platform == nil {
		var ret Platform
		return ret
	}
	return *o.Platform
}

// GetPlatformOk returns a tuple with the Platform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceAssurance) GetPlatformOk() (*Platform, bool) {
	if o == nil || o.Platform == nil {
		return nil, false
	}
	return o.Platform, true
}

// HasPlatform returns a boolean if a field has been set.
func (o *DeviceAssurance) HasPlatform() bool {
	if o != nil && o.Platform != nil {
		return true
	}

	return false
}

// SetPlatform gets a reference to the given Platform and assigns it to the Platform field.
func (o *DeviceAssurance) SetPlatform(v Platform) {
	o.Platform = &v
}

// GetScreenLockType returns the ScreenLockType field value if set, zero value otherwise.
func (o *DeviceAssurance) GetScreenLockType() DeviceAssuranceScreenLockType {
	if o == nil || o.ScreenLockType == nil {
		var ret DeviceAssuranceScreenLockType
		return ret
	}
	return *o.ScreenLockType
}

// GetScreenLockTypeOk returns a tuple with the ScreenLockType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceAssurance) GetScreenLockTypeOk() (*DeviceAssuranceScreenLockType, bool) {
	if o == nil || o.ScreenLockType == nil {
		return nil, false
	}
	return o.ScreenLockType, true
}

// HasScreenLockType returns a boolean if a field has been set.
func (o *DeviceAssurance) HasScreenLockType() bool {
	if o != nil && o.ScreenLockType != nil {
		return true
	}

	return false
}

// SetScreenLockType gets a reference to the given DeviceAssuranceScreenLockType and assigns it to the ScreenLockType field.
func (o *DeviceAssurance) SetScreenLockType(v DeviceAssuranceScreenLockType) {
	o.ScreenLockType = &v
}

// GetSecureHardwarePresent returns the SecureHardwarePresent field value if set, zero value otherwise.
func (o *DeviceAssurance) GetSecureHardwarePresent() bool {
	if o == nil || o.SecureHardwarePresent == nil {
		var ret bool
		return ret
	}
	return *o.SecureHardwarePresent
}

// GetSecureHardwarePresentOk returns a tuple with the SecureHardwarePresent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceAssurance) GetSecureHardwarePresentOk() (*bool, bool) {
	if o == nil || o.SecureHardwarePresent == nil {
		return nil, false
	}
	return o.SecureHardwarePresent, true
}

// HasSecureHardwarePresent returns a boolean if a field has been set.
func (o *DeviceAssurance) HasSecureHardwarePresent() bool {
	if o != nil && o.SecureHardwarePresent != nil {
		return true
	}

	return false
}

// SetSecureHardwarePresent gets a reference to the given bool and assigns it to the SecureHardwarePresent field.
func (o *DeviceAssurance) SetSecureHardwarePresent(v bool) {
	o.SecureHardwarePresent = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *DeviceAssurance) GetLinks() ApiTokenLink {
	if o == nil || o.Links == nil {
		var ret ApiTokenLink
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceAssurance) GetLinksOk() (*ApiTokenLink, bool) {
	if o == nil || o.Links == nil {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *DeviceAssurance) HasLinks() bool {
	if o != nil && o.Links != nil {
		return true
	}

	return false
}

// SetLinks gets a reference to the given ApiTokenLink and assigns it to the Links field.
func (o *DeviceAssurance) SetLinks(v ApiTokenLink) {
	o.Links = &v
}

func (o DeviceAssurance) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatedBy != nil {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if o.CreatedDate != nil {
		toSerialize["createdDate"] = o.CreatedDate
	}
	if o.DiskEncryptionType != nil {
		toSerialize["diskEncryptionType"] = o.DiskEncryptionType
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Jailbreak != nil {
		toSerialize["jailbreak"] = o.Jailbreak
	}
	if o.LastUpdatedBy != nil {
		toSerialize["lastUpdatedBy"] = o.LastUpdatedBy
	}
	if o.LastUpdatedDate != nil {
		toSerialize["lastUpdatedDate"] = o.LastUpdatedDate
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.OsVersion != nil {
		toSerialize["osVersion"] = o.OsVersion
	}
	if o.Platform != nil {
		toSerialize["platform"] = o.Platform
	}
	if o.ScreenLockType != nil {
		toSerialize["screenLockType"] = o.ScreenLockType
	}
	if o.SecureHardwarePresent != nil {
		toSerialize["secureHardwarePresent"] = o.SecureHardwarePresent
	}
	if o.Links != nil {
		toSerialize["_links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *DeviceAssurance) UnmarshalJSON(bytes []byte) (err error) {
	varDeviceAssurance := _DeviceAssurance{}

	err = json.Unmarshal(bytes, &varDeviceAssurance)
	if err == nil {
		*o = DeviceAssurance(varDeviceAssurance)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &additionalProperties)
	if err == nil {
		delete(additionalProperties, "createdBy")
		delete(additionalProperties, "createdDate")
		delete(additionalProperties, "diskEncryptionType")
		delete(additionalProperties, "id")
		delete(additionalProperties, "jailbreak")
		delete(additionalProperties, "lastUpdatedBy")
		delete(additionalProperties, "lastUpdatedDate")
		delete(additionalProperties, "name")
		delete(additionalProperties, "osVersion")
		delete(additionalProperties, "platform")
		delete(additionalProperties, "screenLockType")
		delete(additionalProperties, "secureHardwarePresent")
		delete(additionalProperties, "_links")
		o.AdditionalProperties = additionalProperties
	} else {
		return err
	}

	return err
}

type NullableDeviceAssurance struct {
	value *DeviceAssurance
	isSet bool
}

func (v NullableDeviceAssurance) Get() *DeviceAssurance {
	return v.value
}

func (v *NullableDeviceAssurance) Set(val *DeviceAssurance) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceAssurance) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceAssurance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceAssurance(val *DeviceAssurance) *NullableDeviceAssurance {
	return &NullableDeviceAssurance{value: val, isSet: true}
}

func (v NullableDeviceAssurance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceAssurance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
