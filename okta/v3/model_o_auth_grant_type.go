/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// OAuthGrantType the model 'OAuthGrantType'
type OAuthGrantType string

// List of OAuthGrantType
const (
	OAUTHGRANTTYPE_AUTHORIZATION_CODE                         OAuthGrantType = "authorization_code"
	OAUTHGRANTTYPE_CLIENT_CREDENTIALS                         OAuthGrantType = "client_credentials"
	OAUTHGRANTTYPE_IMPLICIT                                   OAuthGrantType = "implicit"
	OAUTHGRANTTYPE_INTERACTION_CODE                           OAuthGrantType = "interaction_code"
	OAUTHGRANTTYPE_PASSWORD                                   OAuthGrantType = "password"
	OAUTHGRANTTYPE_REFRESH_TOKEN                              OAuthGrantType = "refresh_token"
	OAUTHGRANTTYPE_URNIETFPARAMSOAUTHGRANT_TYPEDEVICE_CODE    OAuthGrantType = "urn:ietf:params:oauth:grant-type:device_code"
	OAUTHGRANTTYPE_URNIETFPARAMSOAUTHGRANT_TYPESAML2_BEARER   OAuthGrantType = "urn:ietf:params:oauth:grant-type:saml2-bearer"
	OAUTHGRANTTYPE_URNIETFPARAMSOAUTHGRANT_TYPETOKEN_EXCHANGE OAuthGrantType = "urn:ietf:params:oauth:grant-type:token-exchange"
)

// All allowed values of OAuthGrantType enum
var AllowedOAuthGrantTypeEnumValues = []OAuthGrantType{
	"authorization_code",
	"client_credentials",
	"implicit",
	"interaction_code",
	"password",
	"refresh_token",
	"urn:ietf:params:oauth:grant-type:device_code",
	"urn:ietf:params:oauth:grant-type:saml2-bearer",
	"urn:ietf:params:oauth:grant-type:token-exchange",
}

func (v *OAuthGrantType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OAuthGrantType(value)
	for _, existing := range AllowedOAuthGrantTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OAuthGrantType", value)
}

// NewOAuthGrantTypeFromValue returns a pointer to a valid OAuthGrantType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOAuthGrantTypeFromValue(v string) (*OAuthGrantType, error) {
	ev := OAuthGrantType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OAuthGrantType: valid values are %v", v, AllowedOAuthGrantTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OAuthGrantType) IsValid() bool {
	for _, existing := range AllowedOAuthGrantTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OAuthGrantType value
func (v OAuthGrantType) Ptr() *OAuthGrantType {
	return &v
}

type NullableOAuthGrantType struct {
	value *OAuthGrantType
	isSet bool
}

func (v NullableOAuthGrantType) Get() *OAuthGrantType {
	return v.value
}

func (v *NullableOAuthGrantType) Set(val *OAuthGrantType) {
	v.value = val
	v.isSet = true
}

func (v NullableOAuthGrantType) IsSet() bool {
	return v.isSet
}

func (v *NullableOAuthGrantType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOAuthGrantType(val *OAuthGrantType) *NullableOAuthGrantType {
	return &NullableOAuthGrantType{value: val, isSet: true}
}

func (v NullableOAuthGrantType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOAuthGrantType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
