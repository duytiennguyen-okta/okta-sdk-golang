/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// LogCredentialProvider the model 'LogCredentialProvider'
type LogCredentialProvider string

// List of LogCredentialProvider
const (
	LOGCREDENTIALPROVIDER_DUO                          LogCredentialProvider = "DUO"
	LOGCREDENTIALPROVIDER_GOOGLE                       LogCredentialProvider = "GOOGLE"
	LOGCREDENTIALPROVIDER_OKTA_AUTHENTICATION_PROVIDER LogCredentialProvider = "OKTA_AUTHENTICATION_PROVIDER"
	LOGCREDENTIALPROVIDER_OKTA_CREDENTIAL_PROVIDER     LogCredentialProvider = "OKTA_CREDENTIAL_PROVIDER"
	LOGCREDENTIALPROVIDER_RSA                          LogCredentialProvider = "RSA"
	LOGCREDENTIALPROVIDER_SYMANTEC                     LogCredentialProvider = "SYMANTEC"
	LOGCREDENTIALPROVIDER_YUBIKEY                      LogCredentialProvider = "YUBIKEY"
)

// All allowed values of LogCredentialProvider enum
var AllowedLogCredentialProviderEnumValues = []LogCredentialProvider{
	"DUO",
	"GOOGLE",
	"OKTA_AUTHENTICATION_PROVIDER",
	"OKTA_CREDENTIAL_PROVIDER",
	"RSA",
	"SYMANTEC",
	"YUBIKEY",
}

func (v *LogCredentialProvider) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LogCredentialProvider(value)
	for _, existing := range AllowedLogCredentialProviderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LogCredentialProvider", value)
}

// NewLogCredentialProviderFromValue returns a pointer to a valid LogCredentialProvider
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLogCredentialProviderFromValue(v string) (*LogCredentialProvider, error) {
	ev := LogCredentialProvider(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LogCredentialProvider: valid values are %v", v, AllowedLogCredentialProviderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LogCredentialProvider) IsValid() bool {
	for _, existing := range AllowedLogCredentialProviderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LogCredentialProvider value
func (v LogCredentialProvider) Ptr() *LogCredentialProvider {
	return &v
}

type NullableLogCredentialProvider struct {
	value *LogCredentialProvider
	isSet bool
}

func (v NullableLogCredentialProvider) Get() *LogCredentialProvider {
	return v.value
}

func (v *NullableLogCredentialProvider) Set(val *LogCredentialProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableLogCredentialProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableLogCredentialProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogCredentialProvider(val *LogCredentialProvider) *NullableLogCredentialProvider {
	return &NullableLogCredentialProvider{value: val, isSet: true}
}

func (v NullableLogCredentialProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogCredentialProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
