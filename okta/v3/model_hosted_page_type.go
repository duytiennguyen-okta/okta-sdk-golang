/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// HostedPageType the model 'HostedPageType'
type HostedPageType string

// List of HostedPageType
const (
	HOSTEDPAGETYPE_EXTERNALLY_HOSTED HostedPageType = "EXTERNALLY_HOSTED"
	HOSTEDPAGETYPE_OKTA_DEFAULT      HostedPageType = "OKTA_DEFAULT"
)

// All allowed values of HostedPageType enum
var AllowedHostedPageTypeEnumValues = []HostedPageType{
	"EXTERNALLY_HOSTED",
	"OKTA_DEFAULT",
}

func (v *HostedPageType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HostedPageType(value)
	for _, existing := range AllowedHostedPageTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HostedPageType", value)
}

// NewHostedPageTypeFromValue returns a pointer to a valid HostedPageType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHostedPageTypeFromValue(v string) (*HostedPageType, error) {
	ev := HostedPageType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HostedPageType: valid values are %v", v, AllowedHostedPageTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HostedPageType) IsValid() bool {
	for _, existing := range AllowedHostedPageTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HostedPageType value
func (v HostedPageType) Ptr() *HostedPageType {
	return &v
}

type NullableHostedPageType struct {
	value *HostedPageType
	isSet bool
}

func (v NullableHostedPageType) Get() *HostedPageType {
	return v.value
}

func (v *NullableHostedPageType) Set(val *HostedPageType) {
	v.value = val
	v.isSet = true
}

func (v NullableHostedPageType) IsSet() bool {
	return v.isSet
}

func (v *NullableHostedPageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostedPageType(val *HostedPageType) *NullableHostedPageType {
	return &NullableHostedPageType{value: val, isSet: true}
}

func (v NullableHostedPageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostedPageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
