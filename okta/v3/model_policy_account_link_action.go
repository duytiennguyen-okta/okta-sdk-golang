/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// PolicyAccountLinkAction the model 'PolicyAccountLinkAction'
type PolicyAccountLinkAction string

// List of PolicyAccountLinkAction
const (
	POLICYACCOUNTLINKACTION_AUTO     PolicyAccountLinkAction = "AUTO"
	POLICYACCOUNTLINKACTION_DISABLED PolicyAccountLinkAction = "DISABLED"
)

// All allowed values of PolicyAccountLinkAction enum
var AllowedPolicyAccountLinkActionEnumValues = []PolicyAccountLinkAction{
	"AUTO",
	"DISABLED",
}

func (v *PolicyAccountLinkAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PolicyAccountLinkAction(value)
	for _, existing := range AllowedPolicyAccountLinkActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PolicyAccountLinkAction", value)
}

// NewPolicyAccountLinkActionFromValue returns a pointer to a valid PolicyAccountLinkAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPolicyAccountLinkActionFromValue(v string) (*PolicyAccountLinkAction, error) {
	ev := PolicyAccountLinkAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PolicyAccountLinkAction: valid values are %v", v, AllowedPolicyAccountLinkActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PolicyAccountLinkAction) IsValid() bool {
	for _, existing := range AllowedPolicyAccountLinkActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PolicyAccountLinkAction value
func (v PolicyAccountLinkAction) Ptr() *PolicyAccountLinkAction {
	return &v
}

type NullablePolicyAccountLinkAction struct {
	value *PolicyAccountLinkAction
	isSet bool
}

func (v NullablePolicyAccountLinkAction) Get() *PolicyAccountLinkAction {
	return v.value
}

func (v *NullablePolicyAccountLinkAction) Set(val *PolicyAccountLinkAction) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyAccountLinkAction) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyAccountLinkAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyAccountLinkAction(val *PolicyAccountLinkAction) *NullablePolicyAccountLinkAction {
	return &NullablePolicyAccountLinkAction{value: val, isSet: true}
}

func (v NullablePolicyAccountLinkAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyAccountLinkAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
