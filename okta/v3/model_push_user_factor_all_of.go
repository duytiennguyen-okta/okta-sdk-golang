/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"time"
)

// PushUserFactorAllOf struct for PushUserFactorAllOf
type PushUserFactorAllOf struct {
	ExpiresAt            *time.Time             `json:"expiresAt,omitempty"`
	FactorResult         *FactorResultType      `json:"factorResult,omitempty"`
	Profile              *PushUserFactorProfile `json:"profile,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PushUserFactorAllOf PushUserFactorAllOf

// NewPushUserFactorAllOf instantiates a new PushUserFactorAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPushUserFactorAllOf() *PushUserFactorAllOf {
	this := PushUserFactorAllOf{}
	return &this
}

// NewPushUserFactorAllOfWithDefaults instantiates a new PushUserFactorAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPushUserFactorAllOfWithDefaults() *PushUserFactorAllOf {
	this := PushUserFactorAllOf{}
	return &this
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *PushUserFactorAllOf) GetExpiresAt() time.Time {
	if o == nil || o.ExpiresAt == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PushUserFactorAllOf) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil || o.ExpiresAt == nil {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *PushUserFactorAllOf) HasExpiresAt() bool {
	if o != nil && o.ExpiresAt != nil {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given time.Time and assigns it to the ExpiresAt field.
func (o *PushUserFactorAllOf) SetExpiresAt(v time.Time) {
	o.ExpiresAt = &v
}

// GetFactorResult returns the FactorResult field value if set, zero value otherwise.
func (o *PushUserFactorAllOf) GetFactorResult() FactorResultType {
	if o == nil || o.FactorResult == nil {
		var ret FactorResultType
		return ret
	}
	return *o.FactorResult
}

// GetFactorResultOk returns a tuple with the FactorResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PushUserFactorAllOf) GetFactorResultOk() (*FactorResultType, bool) {
	if o == nil || o.FactorResult == nil {
		return nil, false
	}
	return o.FactorResult, true
}

// HasFactorResult returns a boolean if a field has been set.
func (o *PushUserFactorAllOf) HasFactorResult() bool {
	if o != nil && o.FactorResult != nil {
		return true
	}

	return false
}

// SetFactorResult gets a reference to the given FactorResultType and assigns it to the FactorResult field.
func (o *PushUserFactorAllOf) SetFactorResult(v FactorResultType) {
	o.FactorResult = &v
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *PushUserFactorAllOf) GetProfile() PushUserFactorProfile {
	if o == nil || o.Profile == nil {
		var ret PushUserFactorProfile
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PushUserFactorAllOf) GetProfileOk() (*PushUserFactorProfile, bool) {
	if o == nil || o.Profile == nil {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *PushUserFactorAllOf) HasProfile() bool {
	if o != nil && o.Profile != nil {
		return true
	}

	return false
}

// SetProfile gets a reference to the given PushUserFactorProfile and assigns it to the Profile field.
func (o *PushUserFactorAllOf) SetProfile(v PushUserFactorProfile) {
	o.Profile = &v
}

func (o PushUserFactorAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ExpiresAt != nil {
		toSerialize["expiresAt"] = o.ExpiresAt
	}
	if o.FactorResult != nil {
		toSerialize["factorResult"] = o.FactorResult
	}
	if o.Profile != nil {
		toSerialize["profile"] = o.Profile
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *PushUserFactorAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varPushUserFactorAllOf := _PushUserFactorAllOf{}

	err = json.Unmarshal(bytes, &varPushUserFactorAllOf)
	if err == nil {
		*o = PushUserFactorAllOf(varPushUserFactorAllOf)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &additionalProperties)
	if err == nil {
		delete(additionalProperties, "expiresAt")
		delete(additionalProperties, "factorResult")
		delete(additionalProperties, "profile")
		o.AdditionalProperties = additionalProperties
	} else {
		return err
	}

	return err
}

type NullablePushUserFactorAllOf struct {
	value *PushUserFactorAllOf
	isSet bool
}

func (v NullablePushUserFactorAllOf) Get() *PushUserFactorAllOf {
	return v.value
}

func (v *NullablePushUserFactorAllOf) Set(val *PushUserFactorAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullablePushUserFactorAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullablePushUserFactorAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePushUserFactorAllOf(val *PushUserFactorAllOf) *NullablePushUserFactorAllOf {
	return &NullablePushUserFactorAllOf{value: val, isSet: true}
}

func (v NullablePushUserFactorAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePushUserFactorAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
