/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// AgentType Agent types that are being monitored
type AgentType string

// List of AgentType
const (
	AGENTTYPE_AD     AgentType = "AD"
	AGENTTYPE_IWA    AgentType = "IWA"
	AGENTTYPE_LDAP   AgentType = "LDAP"
	AGENTTYPE_MFA    AgentType = "MFA"
	AGENTTYPE_OPP    AgentType = "OPP"
	AGENTTYPE_RUM    AgentType = "RUM"
	AGENTTYPE_RADIUS AgentType = "Radius"
)

// All allowed values of AgentType enum
var AllowedAgentTypeEnumValues = []AgentType{
	"AD",
	"IWA",
	"LDAP",
	"MFA",
	"OPP",
	"RUM",
	"Radius",
}

func (v *AgentType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AgentType(value)
	for _, existing := range AllowedAgentTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AgentType", value)
}

// NewAgentTypeFromValue returns a pointer to a valid AgentType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAgentTypeFromValue(v string) (*AgentType, error) {
	ev := AgentType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AgentType: valid values are %v", v, AllowedAgentTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AgentType) IsValid() bool {
	for _, existing := range AllowedAgentTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AgentType value
func (v AgentType) Ptr() *AgentType {
	return &v
}

type NullableAgentType struct {
	value *AgentType
	isSet bool
}

func (v NullableAgentType) Get() *AgentType {
	return v.value
}

func (v *NullableAgentType) Set(val *AgentType) {
	v.value = val
	v.isSet = true
}

func (v NullableAgentType) IsSet() bool {
	return v.isSet
}

func (v *NullableAgentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgentType(val *AgentType) *NullableAgentType {
	return &NullableAgentType{value: val, isSet: true}
}

func (v NullableAgentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
