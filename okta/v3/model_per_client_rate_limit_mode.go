/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// PerClientRateLimitMode the model 'PerClientRateLimitMode'
type PerClientRateLimitMode string

// List of PerClientRateLimitMode
const (
	PERCLIENTRATELIMITMODE_DISABLE PerClientRateLimitMode = "DISABLE"
	PERCLIENTRATELIMITMODE_ENFORCE PerClientRateLimitMode = "ENFORCE"
	PERCLIENTRATELIMITMODE_PREVIEW PerClientRateLimitMode = "PREVIEW"
)

// All allowed values of PerClientRateLimitMode enum
var AllowedPerClientRateLimitModeEnumValues = []PerClientRateLimitMode{
	"DISABLE",
	"ENFORCE",
	"PREVIEW",
}

func (v *PerClientRateLimitMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PerClientRateLimitMode(value)
	for _, existing := range AllowedPerClientRateLimitModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PerClientRateLimitMode", value)
}

// NewPerClientRateLimitModeFromValue returns a pointer to a valid PerClientRateLimitMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPerClientRateLimitModeFromValue(v string) (*PerClientRateLimitMode, error) {
	ev := PerClientRateLimitMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PerClientRateLimitMode: valid values are %v", v, AllowedPerClientRateLimitModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PerClientRateLimitMode) IsValid() bool {
	for _, existing := range AllowedPerClientRateLimitModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PerClientRateLimitMode value
func (v PerClientRateLimitMode) Ptr() *PerClientRateLimitMode {
	return &v
}

type NullablePerClientRateLimitMode struct {
	value *PerClientRateLimitMode
	isSet bool
}

func (v NullablePerClientRateLimitMode) Get() *PerClientRateLimitMode {
	return v.value
}

func (v *NullablePerClientRateLimitMode) Set(val *PerClientRateLimitMode) {
	v.value = val
	v.isSet = true
}

func (v NullablePerClientRateLimitMode) IsSet() bool {
	return v.isSet
}

func (v *NullablePerClientRateLimitMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePerClientRateLimitMode(val *PerClientRateLimitMode) *NullablePerClientRateLimitMode {
	return &NullablePerClientRateLimitMode{value: val, isSet: true}
}

func (v NullablePerClientRateLimitMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePerClientRateLimitMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
