/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// ChangeEnum the model 'ChangeEnum'
type ChangeEnum string

// List of ChangeEnum
const (
	CHANGEENUM_CHANGE        ChangeEnum = "CHANGE"
	CHANGEENUM_KEEP_EXISTING ChangeEnum = "KEEP_EXISTING"
)

// All allowed values of ChangeEnum enum
var AllowedChangeEnumEnumValues = []ChangeEnum{
	"CHANGE",
	"KEEP_EXISTING",
}

func (v *ChangeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ChangeEnum(value)
	for _, existing := range AllowedChangeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ChangeEnum", value)
}

// NewChangeEnumFromValue returns a pointer to a valid ChangeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChangeEnumFromValue(v string) (*ChangeEnum, error) {
	ev := ChangeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ChangeEnum: valid values are %v", v, AllowedChangeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ChangeEnum) IsValid() bool {
	for _, existing := range AllowedChangeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ChangeEnum value
func (v ChangeEnum) Ptr() *ChangeEnum {
	return &v
}

type NullableChangeEnum struct {
	value *ChangeEnum
	isSet bool
}

func (v NullableChangeEnum) Get() *ChangeEnum {
	return v.value
}

func (v *NullableChangeEnum) Set(val *ChangeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeEnum(val *ChangeEnum) *NullableChangeEnum {
	return &NullableChangeEnum{value: val, isSet: true}
}

func (v NullableChangeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
