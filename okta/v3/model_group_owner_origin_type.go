/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// GroupOwnerOriginType the model 'GroupOwnerOriginType'
type GroupOwnerOriginType string

// List of GroupOwnerOriginType
const (
	GROUPOWNERORIGINTYPE_APPLICATION    GroupOwnerOriginType = "APPLICATION"
	GROUPOWNERORIGINTYPE_OKTA_DIRECTORY GroupOwnerOriginType = "OKTA_DIRECTORY"
)

// All allowed values of GroupOwnerOriginType enum
var AllowedGroupOwnerOriginTypeEnumValues = []GroupOwnerOriginType{
	"APPLICATION",
	"OKTA_DIRECTORY",
}

func (v *GroupOwnerOriginType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GroupOwnerOriginType(value)
	for _, existing := range AllowedGroupOwnerOriginTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GroupOwnerOriginType", value)
}

// NewGroupOwnerOriginTypeFromValue returns a pointer to a valid GroupOwnerOriginType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGroupOwnerOriginTypeFromValue(v string) (*GroupOwnerOriginType, error) {
	ev := GroupOwnerOriginType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GroupOwnerOriginType: valid values are %v", v, AllowedGroupOwnerOriginTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GroupOwnerOriginType) IsValid() bool {
	for _, existing := range AllowedGroupOwnerOriginTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GroupOwnerOriginType value
func (v GroupOwnerOriginType) Ptr() *GroupOwnerOriginType {
	return &v
}

type NullableGroupOwnerOriginType struct {
	value *GroupOwnerOriginType
	isSet bool
}

func (v NullableGroupOwnerOriginType) Get() *GroupOwnerOriginType {
	return v.value
}

func (v *NullableGroupOwnerOriginType) Set(val *GroupOwnerOriginType) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupOwnerOriginType) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupOwnerOriginType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupOwnerOriginType(val *GroupOwnerOriginType) *NullableGroupOwnerOriginType {
	return &NullableGroupOwnerOriginType{value: val, isSet: true}
}

func (v NullableGroupOwnerOriginType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupOwnerOriginType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
