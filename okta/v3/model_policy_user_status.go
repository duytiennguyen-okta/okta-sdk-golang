/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// PolicyUserStatus the model 'PolicyUserStatus'
type PolicyUserStatus string

// List of PolicyUserStatus
const (
	POLICYUSERSTATUS_ACTIVATING       PolicyUserStatus = "ACTIVATING"
	POLICYUSERSTATUS_ACTIVE           PolicyUserStatus = "ACTIVE"
	POLICYUSERSTATUS_DELETED          PolicyUserStatus = "DELETED"
	POLICYUSERSTATUS_DELETING         PolicyUserStatus = "DELETING"
	POLICYUSERSTATUS_EXPIRED_PASSWORD PolicyUserStatus = "EXPIRED_PASSWORD"
	POLICYUSERSTATUS_INACTIVE         PolicyUserStatus = "INACTIVE"
	POLICYUSERSTATUS_PENDING          PolicyUserStatus = "PENDING"
	POLICYUSERSTATUS_SUSPENDED        PolicyUserStatus = "SUSPENDED"
)

// All allowed values of PolicyUserStatus enum
var AllowedPolicyUserStatusEnumValues = []PolicyUserStatus{
	"ACTIVATING",
	"ACTIVE",
	"DELETED",
	"DELETING",
	"EXPIRED_PASSWORD",
	"INACTIVE",
	"PENDING",
	"SUSPENDED",
}

func (v *PolicyUserStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PolicyUserStatus(value)
	for _, existing := range AllowedPolicyUserStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PolicyUserStatus", value)
}

// NewPolicyUserStatusFromValue returns a pointer to a valid PolicyUserStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPolicyUserStatusFromValue(v string) (*PolicyUserStatus, error) {
	ev := PolicyUserStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PolicyUserStatus: valid values are %v", v, AllowedPolicyUserStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PolicyUserStatus) IsValid() bool {
	for _, existing := range AllowedPolicyUserStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PolicyUserStatus value
func (v PolicyUserStatus) Ptr() *PolicyUserStatus {
	return &v
}

type NullablePolicyUserStatus struct {
	value *PolicyUserStatus
	isSet bool
}

func (v NullablePolicyUserStatus) Get() *PolicyUserStatus {
	return v.value
}

func (v *NullablePolicyUserStatus) Set(val *PolicyUserStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyUserStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyUserStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyUserStatus(val *PolicyUserStatus) *NullablePolicyUserStatus {
	return &NullablePolicyUserStatus{value: val, isSet: true}
}

func (v NullablePolicyUserStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyUserStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
