/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// CatalogApplicationStatus the model 'CatalogApplicationStatus'
type CatalogApplicationStatus string

// List of CatalogApplicationStatus
const (
	CATALOGAPPLICATIONSTATUS_ACTIVE   CatalogApplicationStatus = "ACTIVE"
	CATALOGAPPLICATIONSTATUS_INACTIVE CatalogApplicationStatus = "INACTIVE"
)

// All allowed values of CatalogApplicationStatus enum
var AllowedCatalogApplicationStatusEnumValues = []CatalogApplicationStatus{
	"ACTIVE",
	"INACTIVE",
}

func (v *CatalogApplicationStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CatalogApplicationStatus(value)
	for _, existing := range AllowedCatalogApplicationStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CatalogApplicationStatus", value)
}

// NewCatalogApplicationStatusFromValue returns a pointer to a valid CatalogApplicationStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCatalogApplicationStatusFromValue(v string) (*CatalogApplicationStatus, error) {
	ev := CatalogApplicationStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CatalogApplicationStatus: valid values are %v", v, AllowedCatalogApplicationStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CatalogApplicationStatus) IsValid() bool {
	for _, existing := range AllowedCatalogApplicationStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CatalogApplicationStatus value
func (v CatalogApplicationStatus) Ptr() *CatalogApplicationStatus {
	return &v
}

type NullableCatalogApplicationStatus struct {
	value *CatalogApplicationStatus
	isSet bool
}

func (v NullableCatalogApplicationStatus) Get() *CatalogApplicationStatus {
	return v.value
}

func (v *NullableCatalogApplicationStatus) Set(val *CatalogApplicationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogApplicationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogApplicationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogApplicationStatus(val *CatalogApplicationStatus) *NullableCatalogApplicationStatus {
	return &NullableCatalogApplicationStatus{value: val, isSet: true}
}

func (v NullableCatalogApplicationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogApplicationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
