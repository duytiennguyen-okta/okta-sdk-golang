/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// OAuth2ClaimType the model 'OAuth2ClaimType'
type OAuth2ClaimType string

// List of OAuth2ClaimType
const (
	OAUTH2CLAIMTYPE_IDENTITY OAuth2ClaimType = "IDENTITY"
	OAUTH2CLAIMTYPE_RESOURCE OAuth2ClaimType = "RESOURCE"
)

// All allowed values of OAuth2ClaimType enum
var AllowedOAuth2ClaimTypeEnumValues = []OAuth2ClaimType{
	"IDENTITY",
	"RESOURCE",
}

func (v *OAuth2ClaimType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OAuth2ClaimType(value)
	for _, existing := range AllowedOAuth2ClaimTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OAuth2ClaimType", value)
}

// NewOAuth2ClaimTypeFromValue returns a pointer to a valid OAuth2ClaimType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOAuth2ClaimTypeFromValue(v string) (*OAuth2ClaimType, error) {
	ev := OAuth2ClaimType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OAuth2ClaimType: valid values are %v", v, AllowedOAuth2ClaimTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OAuth2ClaimType) IsValid() bool {
	for _, existing := range AllowedOAuth2ClaimTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OAuth2ClaimType value
func (v OAuth2ClaimType) Ptr() *OAuth2ClaimType {
	return &v
}

type NullableOAuth2ClaimType struct {
	value *OAuth2ClaimType
	isSet bool
}

func (v NullableOAuth2ClaimType) Get() *OAuth2ClaimType {
	return v.value
}

func (v *NullableOAuth2ClaimType) Set(val *OAuth2ClaimType) {
	v.value = val
	v.isSet = true
}

func (v NullableOAuth2ClaimType) IsSet() bool {
	return v.isSet
}

func (v *NullableOAuth2ClaimType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOAuth2ClaimType(val *OAuth2ClaimType) *NullableOAuth2ClaimType {
	return &NullableOAuth2ClaimType{value: val, isSet: true}
}

func (v NullableOAuth2ClaimType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOAuth2ClaimType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
