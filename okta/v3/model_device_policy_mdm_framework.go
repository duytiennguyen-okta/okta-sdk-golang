/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// DevicePolicyMDMFramework the model 'DevicePolicyMDMFramework'
type DevicePolicyMDMFramework string

// List of DevicePolicyMDMFramework
const (
	DEVICEPOLICYMDMFRAMEWORK_AFW    DevicePolicyMDMFramework = "AFW"
	DEVICEPOLICYMDMFRAMEWORK_NATIVE DevicePolicyMDMFramework = "NATIVE"
	DEVICEPOLICYMDMFRAMEWORK_SAFE   DevicePolicyMDMFramework = "SAFE"
)

// All allowed values of DevicePolicyMDMFramework enum
var AllowedDevicePolicyMDMFrameworkEnumValues = []DevicePolicyMDMFramework{
	"AFW",
	"NATIVE",
	"SAFE",
}

func (v *DevicePolicyMDMFramework) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DevicePolicyMDMFramework(value)
	for _, existing := range AllowedDevicePolicyMDMFrameworkEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DevicePolicyMDMFramework", value)
}

// NewDevicePolicyMDMFrameworkFromValue returns a pointer to a valid DevicePolicyMDMFramework
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDevicePolicyMDMFrameworkFromValue(v string) (*DevicePolicyMDMFramework, error) {
	ev := DevicePolicyMDMFramework(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DevicePolicyMDMFramework: valid values are %v", v, AllowedDevicePolicyMDMFrameworkEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DevicePolicyMDMFramework) IsValid() bool {
	for _, existing := range AllowedDevicePolicyMDMFrameworkEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DevicePolicyMDMFramework value
func (v DevicePolicyMDMFramework) Ptr() *DevicePolicyMDMFramework {
	return &v
}

type NullableDevicePolicyMDMFramework struct {
	value *DevicePolicyMDMFramework
	isSet bool
}

func (v NullableDevicePolicyMDMFramework) Get() *DevicePolicyMDMFramework {
	return v.value
}

func (v *NullableDevicePolicyMDMFramework) Set(val *DevicePolicyMDMFramework) {
	v.value = val
	v.isSet = true
}

func (v NullableDevicePolicyMDMFramework) IsSet() bool {
	return v.isSet
}

func (v *NullableDevicePolicyMDMFramework) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevicePolicyMDMFramework(val *DevicePolicyMDMFramework) *NullableDevicePolicyMDMFramework {
	return &NullableDevicePolicyMDMFramework{value: val, isSet: true}
}

func (v NullableDevicePolicyMDMFramework) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevicePolicyMDMFramework) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
