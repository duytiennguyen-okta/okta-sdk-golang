/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// EventHookVerificationStatus the model 'EventHookVerificationStatus'
type EventHookVerificationStatus string

// List of EventHookVerificationStatus
const (
	EVENTHOOKVERIFICATIONSTATUS_UNVERIFIED EventHookVerificationStatus = "UNVERIFIED"
	EVENTHOOKVERIFICATIONSTATUS_VERIFIED   EventHookVerificationStatus = "VERIFIED"
)

// All allowed values of EventHookVerificationStatus enum
var AllowedEventHookVerificationStatusEnumValues = []EventHookVerificationStatus{
	"UNVERIFIED",
	"VERIFIED",
}

func (v *EventHookVerificationStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EventHookVerificationStatus(value)
	for _, existing := range AllowedEventHookVerificationStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EventHookVerificationStatus", value)
}

// NewEventHookVerificationStatusFromValue returns a pointer to a valid EventHookVerificationStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEventHookVerificationStatusFromValue(v string) (*EventHookVerificationStatus, error) {
	ev := EventHookVerificationStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EventHookVerificationStatus: valid values are %v", v, AllowedEventHookVerificationStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EventHookVerificationStatus) IsValid() bool {
	for _, existing := range AllowedEventHookVerificationStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EventHookVerificationStatus value
func (v EventHookVerificationStatus) Ptr() *EventHookVerificationStatus {
	return &v
}

type NullableEventHookVerificationStatus struct {
	value *EventHookVerificationStatus
	isSet bool
}

func (v NullableEventHookVerificationStatus) Get() *EventHookVerificationStatus {
	return v.value
}

func (v *NullableEventHookVerificationStatus) Set(val *EventHookVerificationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableEventHookVerificationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableEventHookVerificationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventHookVerificationStatus(val *EventHookVerificationStatus) *NullableEventHookVerificationStatus {
	return &NullableEventHookVerificationStatus{value: val, isSet: true}
}

func (v NullableEventHookVerificationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventHookVerificationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
