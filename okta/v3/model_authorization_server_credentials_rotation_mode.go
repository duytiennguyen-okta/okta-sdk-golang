/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// AuthorizationServerCredentialsRotationMode the model 'AuthorizationServerCredentialsRotationMode'
type AuthorizationServerCredentialsRotationMode string

// List of AuthorizationServerCredentialsRotationMode
const (
	AUTHORIZATIONSERVERCREDENTIALSROTATIONMODE_AUTO   AuthorizationServerCredentialsRotationMode = "AUTO"
	AUTHORIZATIONSERVERCREDENTIALSROTATIONMODE_MANUAL AuthorizationServerCredentialsRotationMode = "MANUAL"
)

// All allowed values of AuthorizationServerCredentialsRotationMode enum
var AllowedAuthorizationServerCredentialsRotationModeEnumValues = []AuthorizationServerCredentialsRotationMode{
	"AUTO",
	"MANUAL",
}

func (v *AuthorizationServerCredentialsRotationMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AuthorizationServerCredentialsRotationMode(value)
	for _, existing := range AllowedAuthorizationServerCredentialsRotationModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AuthorizationServerCredentialsRotationMode", value)
}

// NewAuthorizationServerCredentialsRotationModeFromValue returns a pointer to a valid AuthorizationServerCredentialsRotationMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuthorizationServerCredentialsRotationModeFromValue(v string) (*AuthorizationServerCredentialsRotationMode, error) {
	ev := AuthorizationServerCredentialsRotationMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuthorizationServerCredentialsRotationMode: valid values are %v", v, AllowedAuthorizationServerCredentialsRotationModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuthorizationServerCredentialsRotationMode) IsValid() bool {
	for _, existing := range AllowedAuthorizationServerCredentialsRotationModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AuthorizationServerCredentialsRotationMode value
func (v AuthorizationServerCredentialsRotationMode) Ptr() *AuthorizationServerCredentialsRotationMode {
	return &v
}

type NullableAuthorizationServerCredentialsRotationMode struct {
	value *AuthorizationServerCredentialsRotationMode
	isSet bool
}

func (v NullableAuthorizationServerCredentialsRotationMode) Get() *AuthorizationServerCredentialsRotationMode {
	return v.value
}

func (v *NullableAuthorizationServerCredentialsRotationMode) Set(val *AuthorizationServerCredentialsRotationMode) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizationServerCredentialsRotationMode) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizationServerCredentialsRotationMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizationServerCredentialsRotationMode(val *AuthorizationServerCredentialsRotationMode) *NullableAuthorizationServerCredentialsRotationMode {
	return &NullableAuthorizationServerCredentialsRotationMode{value: val, isSet: true}
}

func (v NullableAuthorizationServerCredentialsRotationMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizationServerCredentialsRotationMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
