/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// ApplicationCredentialsScheme the model 'ApplicationCredentialsScheme'
type ApplicationCredentialsScheme string

// List of ApplicationCredentialsScheme
const (
	APPLICATIONCREDENTIALSSCHEME_ADMIN_SETS_CREDENTIALS       ApplicationCredentialsScheme = "ADMIN_SETS_CREDENTIALS"
	APPLICATIONCREDENTIALSSCHEME_EDIT_PASSWORD_ONLY           ApplicationCredentialsScheme = "EDIT_PASSWORD_ONLY"
	APPLICATIONCREDENTIALSSCHEME_EDIT_USERNAME_AND_PASSWORD   ApplicationCredentialsScheme = "EDIT_USERNAME_AND_PASSWORD"
	APPLICATIONCREDENTIALSSCHEME_EXTERNAL_PASSWORD_SYNC       ApplicationCredentialsScheme = "EXTERNAL_PASSWORD_SYNC"
	APPLICATIONCREDENTIALSSCHEME_SHARED_USERNAME_AND_PASSWORD ApplicationCredentialsScheme = "SHARED_USERNAME_AND_PASSWORD"
)

// All allowed values of ApplicationCredentialsScheme enum
var AllowedApplicationCredentialsSchemeEnumValues = []ApplicationCredentialsScheme{
	"ADMIN_SETS_CREDENTIALS",
	"EDIT_PASSWORD_ONLY",
	"EDIT_USERNAME_AND_PASSWORD",
	"EXTERNAL_PASSWORD_SYNC",
	"SHARED_USERNAME_AND_PASSWORD",
}

func (v *ApplicationCredentialsScheme) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ApplicationCredentialsScheme(value)
	for _, existing := range AllowedApplicationCredentialsSchemeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ApplicationCredentialsScheme", value)
}

// NewApplicationCredentialsSchemeFromValue returns a pointer to a valid ApplicationCredentialsScheme
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewApplicationCredentialsSchemeFromValue(v string) (*ApplicationCredentialsScheme, error) {
	ev := ApplicationCredentialsScheme(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApplicationCredentialsScheme: valid values are %v", v, AllowedApplicationCredentialsSchemeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ApplicationCredentialsScheme) IsValid() bool {
	for _, existing := range AllowedApplicationCredentialsSchemeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ApplicationCredentialsScheme value
func (v ApplicationCredentialsScheme) Ptr() *ApplicationCredentialsScheme {
	return &v
}

type NullableApplicationCredentialsScheme struct {
	value *ApplicationCredentialsScheme
	isSet bool
}

func (v NullableApplicationCredentialsScheme) Get() *ApplicationCredentialsScheme {
	return v.value
}

func (v *NullableApplicationCredentialsScheme) Set(val *ApplicationCredentialsScheme) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationCredentialsScheme) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationCredentialsScheme) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationCredentialsScheme(val *ApplicationCredentialsScheme) *NullableApplicationCredentialsScheme {
	return &NullableApplicationCredentialsScheme{value: val, isSet: true}
}

func (v NullableApplicationCredentialsScheme) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationCredentialsScheme) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
