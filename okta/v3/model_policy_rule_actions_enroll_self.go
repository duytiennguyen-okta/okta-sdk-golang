/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// PolicyRuleActionsEnrollSelf the model 'PolicyRuleActionsEnrollSelf'
type PolicyRuleActionsEnrollSelf string

// List of PolicyRuleActionsEnrollSelf
const (
	POLICYRULEACTIONSENROLLSELF_CHALLENGE PolicyRuleActionsEnrollSelf = "CHALLENGE"
	POLICYRULEACTIONSENROLLSELF_LOGIN     PolicyRuleActionsEnrollSelf = "LOGIN"
	POLICYRULEACTIONSENROLLSELF_NEVER     PolicyRuleActionsEnrollSelf = "NEVER"
)

// All allowed values of PolicyRuleActionsEnrollSelf enum
var AllowedPolicyRuleActionsEnrollSelfEnumValues = []PolicyRuleActionsEnrollSelf{
	"CHALLENGE",
	"LOGIN",
	"NEVER",
}

func (v *PolicyRuleActionsEnrollSelf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PolicyRuleActionsEnrollSelf(value)
	for _, existing := range AllowedPolicyRuleActionsEnrollSelfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PolicyRuleActionsEnrollSelf", value)
}

// NewPolicyRuleActionsEnrollSelfFromValue returns a pointer to a valid PolicyRuleActionsEnrollSelf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPolicyRuleActionsEnrollSelfFromValue(v string) (*PolicyRuleActionsEnrollSelf, error) {
	ev := PolicyRuleActionsEnrollSelf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PolicyRuleActionsEnrollSelf: valid values are %v", v, AllowedPolicyRuleActionsEnrollSelfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PolicyRuleActionsEnrollSelf) IsValid() bool {
	for _, existing := range AllowedPolicyRuleActionsEnrollSelfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PolicyRuleActionsEnrollSelf value
func (v PolicyRuleActionsEnrollSelf) Ptr() *PolicyRuleActionsEnrollSelf {
	return &v
}

type NullablePolicyRuleActionsEnrollSelf struct {
	value *PolicyRuleActionsEnrollSelf
	isSet bool
}

func (v NullablePolicyRuleActionsEnrollSelf) Get() *PolicyRuleActionsEnrollSelf {
	return v.value
}

func (v *NullablePolicyRuleActionsEnrollSelf) Set(val *PolicyRuleActionsEnrollSelf) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyRuleActionsEnrollSelf) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyRuleActionsEnrollSelf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyRuleActionsEnrollSelf(val *PolicyRuleActionsEnrollSelf) *NullablePolicyRuleActionsEnrollSelf {
	return &NullablePolicyRuleActionsEnrollSelf{value: val, isSet: true}
}

func (v NullablePolicyRuleActionsEnrollSelf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyRuleActionsEnrollSelf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
