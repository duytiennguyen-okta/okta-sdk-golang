/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// ProtocolEndpointBinding the model 'ProtocolEndpointBinding'
type ProtocolEndpointBinding string

// List of ProtocolEndpointBinding
const (
	PROTOCOLENDPOINTBINDING_POST     ProtocolEndpointBinding = "HTTP-POST"
	PROTOCOLENDPOINTBINDING_REDIRECT ProtocolEndpointBinding = "HTTP-REDIRECT"
)

// All allowed values of ProtocolEndpointBinding enum
var AllowedProtocolEndpointBindingEnumValues = []ProtocolEndpointBinding{
	"HTTP-POST",
	"HTTP-REDIRECT",
}

func (v *ProtocolEndpointBinding) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProtocolEndpointBinding(value)
	for _, existing := range AllowedProtocolEndpointBindingEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProtocolEndpointBinding", value)
}

// NewProtocolEndpointBindingFromValue returns a pointer to a valid ProtocolEndpointBinding
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProtocolEndpointBindingFromValue(v string) (*ProtocolEndpointBinding, error) {
	ev := ProtocolEndpointBinding(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProtocolEndpointBinding: valid values are %v", v, AllowedProtocolEndpointBindingEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProtocolEndpointBinding) IsValid() bool {
	for _, existing := range AllowedProtocolEndpointBindingEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProtocolEndpointBinding value
func (v ProtocolEndpointBinding) Ptr() *ProtocolEndpointBinding {
	return &v
}

type NullableProtocolEndpointBinding struct {
	value *ProtocolEndpointBinding
	isSet bool
}

func (v NullableProtocolEndpointBinding) Get() *ProtocolEndpointBinding {
	return v.value
}

func (v *NullableProtocolEndpointBinding) Set(val *ProtocolEndpointBinding) {
	v.value = val
	v.isSet = true
}

func (v NullableProtocolEndpointBinding) IsSet() bool {
	return v.isSet
}

func (v *NullableProtocolEndpointBinding) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtocolEndpointBinding(val *ProtocolEndpointBinding) *NullableProtocolEndpointBinding {
	return &NullableProtocolEndpointBinding{value: val, isSet: true}
}

func (v NullableProtocolEndpointBinding) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtocolEndpointBinding) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
