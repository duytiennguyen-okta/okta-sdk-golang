/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// AuthorizationServerCredentialsUse the model 'AuthorizationServerCredentialsUse'
type AuthorizationServerCredentialsUse string

// List of AuthorizationServerCredentialsUse
const (
	AUTHORIZATIONSERVERCREDENTIALSUSE_SIG AuthorizationServerCredentialsUse = "sig"
)

// All allowed values of AuthorizationServerCredentialsUse enum
var AllowedAuthorizationServerCredentialsUseEnumValues = []AuthorizationServerCredentialsUse{
	"sig",
}

func (v *AuthorizationServerCredentialsUse) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AuthorizationServerCredentialsUse(value)
	for _, existing := range AllowedAuthorizationServerCredentialsUseEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AuthorizationServerCredentialsUse", value)
}

// NewAuthorizationServerCredentialsUseFromValue returns a pointer to a valid AuthorizationServerCredentialsUse
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuthorizationServerCredentialsUseFromValue(v string) (*AuthorizationServerCredentialsUse, error) {
	ev := AuthorizationServerCredentialsUse(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuthorizationServerCredentialsUse: valid values are %v", v, AllowedAuthorizationServerCredentialsUseEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuthorizationServerCredentialsUse) IsValid() bool {
	for _, existing := range AllowedAuthorizationServerCredentialsUseEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AuthorizationServerCredentialsUse value
func (v AuthorizationServerCredentialsUse) Ptr() *AuthorizationServerCredentialsUse {
	return &v
}

type NullableAuthorizationServerCredentialsUse struct {
	value *AuthorizationServerCredentialsUse
	isSet bool
}

func (v NullableAuthorizationServerCredentialsUse) Get() *AuthorizationServerCredentialsUse {
	return v.value
}

func (v *NullableAuthorizationServerCredentialsUse) Set(val *AuthorizationServerCredentialsUse) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizationServerCredentialsUse) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizationServerCredentialsUse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizationServerCredentialsUse(val *AuthorizationServerCredentialsUse) *NullableAuthorizationServerCredentialsUse {
	return &NullableAuthorizationServerCredentialsUse{value: val, isSet: true}
}

func (v NullableAuthorizationServerCredentialsUse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizationServerCredentialsUse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
