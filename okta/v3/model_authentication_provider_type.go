/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// AuthenticationProviderType the model 'AuthenticationProviderType'
type AuthenticationProviderType string

// List of AuthenticationProviderType
const (
	AUTHENTICATIONPROVIDERTYPE_ACTIVE_DIRECTORY AuthenticationProviderType = "ACTIVE_DIRECTORY"
	AUTHENTICATIONPROVIDERTYPE_FEDERATION       AuthenticationProviderType = "FEDERATION"
	AUTHENTICATIONPROVIDERTYPE_IMPORT           AuthenticationProviderType = "IMPORT"
	AUTHENTICATIONPROVIDERTYPE_LDAP             AuthenticationProviderType = "LDAP"
	AUTHENTICATIONPROVIDERTYPE_OKTA             AuthenticationProviderType = "OKTA"
	AUTHENTICATIONPROVIDERTYPE_SOCIAL           AuthenticationProviderType = "SOCIAL"
)

// All allowed values of AuthenticationProviderType enum
var AllowedAuthenticationProviderTypeEnumValues = []AuthenticationProviderType{
	"ACTIVE_DIRECTORY",
	"FEDERATION",
	"IMPORT",
	"LDAP",
	"OKTA",
	"SOCIAL",
}

func (v *AuthenticationProviderType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AuthenticationProviderType(value)
	for _, existing := range AllowedAuthenticationProviderTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AuthenticationProviderType", value)
}

// NewAuthenticationProviderTypeFromValue returns a pointer to a valid AuthenticationProviderType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuthenticationProviderTypeFromValue(v string) (*AuthenticationProviderType, error) {
	ev := AuthenticationProviderType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuthenticationProviderType: valid values are %v", v, AllowedAuthenticationProviderTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuthenticationProviderType) IsValid() bool {
	for _, existing := range AllowedAuthenticationProviderTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AuthenticationProviderType value
func (v AuthenticationProviderType) Ptr() *AuthenticationProviderType {
	return &v
}

type NullableAuthenticationProviderType struct {
	value *AuthenticationProviderType
	isSet bool
}

func (v NullableAuthenticationProviderType) Get() *AuthenticationProviderType {
	return v.value
}

func (v *NullableAuthenticationProviderType) Set(val *AuthenticationProviderType) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthenticationProviderType) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthenticationProviderType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthenticationProviderType(val *AuthenticationProviderType) *NullableAuthenticationProviderType {
	return &NullableAuthenticationProviderType{value: val, isSet: true}
}

func (v NullableAuthenticationProviderType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthenticationProviderType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
