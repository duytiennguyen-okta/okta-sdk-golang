/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// OpenIdConnectApplicationType the model 'OpenIdConnectApplicationType'
type OpenIdConnectApplicationType string

// List of OpenIdConnectApplicationType
const (
	OPENIDCONNECTAPPLICATIONTYPE_BROWSER OpenIdConnectApplicationType = "browser"
	OPENIDCONNECTAPPLICATIONTYPE_NATIVE  OpenIdConnectApplicationType = "native"
	OPENIDCONNECTAPPLICATIONTYPE_SERVICE OpenIdConnectApplicationType = "service"
	OPENIDCONNECTAPPLICATIONTYPE_WEB     OpenIdConnectApplicationType = "web"
)

// All allowed values of OpenIdConnectApplicationType enum
var AllowedOpenIdConnectApplicationTypeEnumValues = []OpenIdConnectApplicationType{
	"browser",
	"native",
	"service",
	"web",
}

func (v *OpenIdConnectApplicationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OpenIdConnectApplicationType(value)
	for _, existing := range AllowedOpenIdConnectApplicationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OpenIdConnectApplicationType", value)
}

// NewOpenIdConnectApplicationTypeFromValue returns a pointer to a valid OpenIdConnectApplicationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOpenIdConnectApplicationTypeFromValue(v string) (*OpenIdConnectApplicationType, error) {
	ev := OpenIdConnectApplicationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OpenIdConnectApplicationType: valid values are %v", v, AllowedOpenIdConnectApplicationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OpenIdConnectApplicationType) IsValid() bool {
	for _, existing := range AllowedOpenIdConnectApplicationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OpenIdConnectApplicationType value
func (v OpenIdConnectApplicationType) Ptr() *OpenIdConnectApplicationType {
	return &v
}

type NullableOpenIdConnectApplicationType struct {
	value *OpenIdConnectApplicationType
	isSet bool
}

func (v NullableOpenIdConnectApplicationType) Get() *OpenIdConnectApplicationType {
	return v.value
}

func (v *NullableOpenIdConnectApplicationType) Set(val *OpenIdConnectApplicationType) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenIdConnectApplicationType) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenIdConnectApplicationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenIdConnectApplicationType(val *OpenIdConnectApplicationType) *NullableOpenIdConnectApplicationType {
	return &NullableOpenIdConnectApplicationType{value: val, isSet: true}
}

func (v NullableOpenIdConnectApplicationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenIdConnectApplicationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
