/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// OAuth2ClaimValueType the model 'OAuth2ClaimValueType'
type OAuth2ClaimValueType string

// List of OAuth2ClaimValueType
const (
	OAUTH2CLAIMVALUETYPE_EXPRESSION OAuth2ClaimValueType = "EXPRESSION"
	OAUTH2CLAIMVALUETYPE_GROUPS     OAuth2ClaimValueType = "GROUPS"
	OAUTH2CLAIMVALUETYPE_SYSTEM     OAuth2ClaimValueType = "SYSTEM"
)

// All allowed values of OAuth2ClaimValueType enum
var AllowedOAuth2ClaimValueTypeEnumValues = []OAuth2ClaimValueType{
	"EXPRESSION",
	"GROUPS",
	"SYSTEM",
}

func (v *OAuth2ClaimValueType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OAuth2ClaimValueType(value)
	for _, existing := range AllowedOAuth2ClaimValueTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OAuth2ClaimValueType", value)
}

// NewOAuth2ClaimValueTypeFromValue returns a pointer to a valid OAuth2ClaimValueType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOAuth2ClaimValueTypeFromValue(v string) (*OAuth2ClaimValueType, error) {
	ev := OAuth2ClaimValueType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OAuth2ClaimValueType: valid values are %v", v, AllowedOAuth2ClaimValueTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OAuth2ClaimValueType) IsValid() bool {
	for _, existing := range AllowedOAuth2ClaimValueTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OAuth2ClaimValueType value
func (v OAuth2ClaimValueType) Ptr() *OAuth2ClaimValueType {
	return &v
}

type NullableOAuth2ClaimValueType struct {
	value *OAuth2ClaimValueType
	isSet bool
}

func (v NullableOAuth2ClaimValueType) Get() *OAuth2ClaimValueType {
	return v.value
}

func (v *NullableOAuth2ClaimValueType) Set(val *OAuth2ClaimValueType) {
	v.value = val
	v.isSet = true
}

func (v NullableOAuth2ClaimValueType) IsSet() bool {
	return v.isSet
}

func (v *NullableOAuth2ClaimValueType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOAuth2ClaimValueType(val *OAuth2ClaimValueType) *NullableOAuth2ClaimValueType {
	return &NullableOAuth2ClaimValueType{value: val, isSet: true}
}

func (v NullableOAuth2ClaimValueType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOAuth2ClaimValueType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
