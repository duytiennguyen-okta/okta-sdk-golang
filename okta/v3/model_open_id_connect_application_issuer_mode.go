/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// OpenIdConnectApplicationIssuerMode the model 'OpenIdConnectApplicationIssuerMode'
type OpenIdConnectApplicationIssuerMode string

// List of OpenIdConnectApplicationIssuerMode
const (
	OPENIDCONNECTAPPLICATIONISSUERMODE_CUSTOM_URL OpenIdConnectApplicationIssuerMode = "CUSTOM_URL"
	OPENIDCONNECTAPPLICATIONISSUERMODE_DYNAMIC    OpenIdConnectApplicationIssuerMode = "DYNAMIC"
	OPENIDCONNECTAPPLICATIONISSUERMODE_ORG_URL    OpenIdConnectApplicationIssuerMode = "ORG_URL"
)

// All allowed values of OpenIdConnectApplicationIssuerMode enum
var AllowedOpenIdConnectApplicationIssuerModeEnumValues = []OpenIdConnectApplicationIssuerMode{
	"CUSTOM_URL",
	"DYNAMIC",
	"ORG_URL",
}

func (v *OpenIdConnectApplicationIssuerMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OpenIdConnectApplicationIssuerMode(value)
	for _, existing := range AllowedOpenIdConnectApplicationIssuerModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OpenIdConnectApplicationIssuerMode", value)
}

// NewOpenIdConnectApplicationIssuerModeFromValue returns a pointer to a valid OpenIdConnectApplicationIssuerMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOpenIdConnectApplicationIssuerModeFromValue(v string) (*OpenIdConnectApplicationIssuerMode, error) {
	ev := OpenIdConnectApplicationIssuerMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OpenIdConnectApplicationIssuerMode: valid values are %v", v, AllowedOpenIdConnectApplicationIssuerModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OpenIdConnectApplicationIssuerMode) IsValid() bool {
	for _, existing := range AllowedOpenIdConnectApplicationIssuerModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OpenIdConnectApplicationIssuerMode value
func (v OpenIdConnectApplicationIssuerMode) Ptr() *OpenIdConnectApplicationIssuerMode {
	return &v
}

type NullableOpenIdConnectApplicationIssuerMode struct {
	value *OpenIdConnectApplicationIssuerMode
	isSet bool
}

func (v NullableOpenIdConnectApplicationIssuerMode) Get() *OpenIdConnectApplicationIssuerMode {
	return v.value
}

func (v *NullableOpenIdConnectApplicationIssuerMode) Set(val *OpenIdConnectApplicationIssuerMode) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenIdConnectApplicationIssuerMode) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenIdConnectApplicationIssuerMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenIdConnectApplicationIssuerMode(val *OpenIdConnectApplicationIssuerMode) *NullableOpenIdConnectApplicationIssuerMode {
	return &NullableOpenIdConnectApplicationIssuerMode{value: val, isSet: true}
}

func (v NullableOpenIdConnectApplicationIssuerMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenIdConnectApplicationIssuerMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
