/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"reflect"
	"strings"
)

// TotpUserFactor struct for TotpUserFactor
type TotpUserFactor struct {
	UserFactor
	Profile              *TotpUserFactorProfile `json:"profile,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TotpUserFactor TotpUserFactor

// NewTotpUserFactor instantiates a new TotpUserFactor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTotpUserFactor() *TotpUserFactor {
	this := TotpUserFactor{}
	return &this
}

// NewTotpUserFactorWithDefaults instantiates a new TotpUserFactor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTotpUserFactorWithDefaults() *TotpUserFactor {
	this := TotpUserFactor{}
	return &this
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *TotpUserFactor) GetProfile() TotpUserFactorProfile {
	if o == nil || o.Profile == nil {
		var ret TotpUserFactorProfile
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TotpUserFactor) GetProfileOk() (*TotpUserFactorProfile, bool) {
	if o == nil || o.Profile == nil {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *TotpUserFactor) HasProfile() bool {
	if o != nil && o.Profile != nil {
		return true
	}

	return false
}

// SetProfile gets a reference to the given TotpUserFactorProfile and assigns it to the Profile field.
func (o *TotpUserFactor) SetProfile(v TotpUserFactorProfile) {
	o.Profile = &v
}

func (o TotpUserFactor) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedUserFactor, errUserFactor := json.Marshal(o.UserFactor)
	if errUserFactor != nil {
		return []byte{}, errUserFactor
	}
	errUserFactor = json.Unmarshal([]byte(serializedUserFactor), &toSerialize)
	if errUserFactor != nil {
		return []byte{}, errUserFactor
	}
	if o.Profile != nil {
		toSerialize["profile"] = o.Profile
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *TotpUserFactor) UnmarshalJSON(bytes []byte) (err error) {
	type TotpUserFactorWithoutEmbeddedStruct struct {
		Profile *TotpUserFactorProfile `json:"profile,omitempty"`
	}

	varTotpUserFactorWithoutEmbeddedStruct := TotpUserFactorWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varTotpUserFactorWithoutEmbeddedStruct)
	if err == nil {
		varTotpUserFactor := _TotpUserFactor{}
		varTotpUserFactor.Profile = varTotpUserFactorWithoutEmbeddedStruct.Profile
		*o = TotpUserFactor(varTotpUserFactor)
	} else {
		return err
	}

	varTotpUserFactor := _TotpUserFactor{}

	err = json.Unmarshal(bytes, &varTotpUserFactor)
	if err == nil {
		o.UserFactor = varTotpUserFactor.UserFactor
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &additionalProperties)
	if err == nil {
		delete(additionalProperties, "profile")

		// remove fields from embedded structs
		reflectUserFactor := reflect.ValueOf(o.UserFactor)
		for i := 0; i < reflectUserFactor.Type().NumField(); i++ {
			t := reflectUserFactor.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	} else {
		return err
	}

	return err
}

type NullableTotpUserFactor struct {
	value *TotpUserFactor
	isSet bool
}

func (v NullableTotpUserFactor) Get() *TotpUserFactor {
	return v.value
}

func (v *NullableTotpUserFactor) Set(val *TotpUserFactor) {
	v.value = val
	v.isSet = true
}

func (v NullableTotpUserFactor) IsSet() bool {
	return v.isSet
}

func (v *NullableTotpUserFactor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTotpUserFactor(val *TotpUserFactor) *NullableTotpUserFactor {
	return &NullableTotpUserFactor{value: val, isSet: true}
}

func (v NullableTotpUserFactor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTotpUserFactor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
