/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// SessionIdentityProviderType the model 'SessionIdentityProviderType'
type SessionIdentityProviderType string

// List of SessionIdentityProviderType
const (
	SESSIONIDENTITYPROVIDERTYPE_ACTIVE_DIRECTORY SessionIdentityProviderType = "ACTIVE_DIRECTORY"
	SESSIONIDENTITYPROVIDERTYPE_FEDERATION       SessionIdentityProviderType = "FEDERATION"
	SESSIONIDENTITYPROVIDERTYPE_LDAP             SessionIdentityProviderType = "LDAP"
	SESSIONIDENTITYPROVIDERTYPE_OKTA             SessionIdentityProviderType = "OKTA"
	SESSIONIDENTITYPROVIDERTYPE_SOCIAL           SessionIdentityProviderType = "SOCIAL"
)

// All allowed values of SessionIdentityProviderType enum
var AllowedSessionIdentityProviderTypeEnumValues = []SessionIdentityProviderType{
	"ACTIVE_DIRECTORY",
	"FEDERATION",
	"LDAP",
	"OKTA",
	"SOCIAL",
}

func (v *SessionIdentityProviderType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SessionIdentityProviderType(value)
	for _, existing := range AllowedSessionIdentityProviderTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SessionIdentityProviderType", value)
}

// NewSessionIdentityProviderTypeFromValue returns a pointer to a valid SessionIdentityProviderType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSessionIdentityProviderTypeFromValue(v string) (*SessionIdentityProviderType, error) {
	ev := SessionIdentityProviderType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SessionIdentityProviderType: valid values are %v", v, AllowedSessionIdentityProviderTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SessionIdentityProviderType) IsValid() bool {
	for _, existing := range AllowedSessionIdentityProviderTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SessionIdentityProviderType value
func (v SessionIdentityProviderType) Ptr() *SessionIdentityProviderType {
	return &v
}

type NullableSessionIdentityProviderType struct {
	value *SessionIdentityProviderType
	isSet bool
}

func (v NullableSessionIdentityProviderType) Get() *SessionIdentityProviderType {
	return v.value
}

func (v *NullableSessionIdentityProviderType) Set(val *SessionIdentityProviderType) {
	v.value = val
	v.isSet = true
}

func (v NullableSessionIdentityProviderType) IsSet() bool {
	return v.isSet
}

func (v *NullableSessionIdentityProviderType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSessionIdentityProviderType(val *SessionIdentityProviderType) *NullableSessionIdentityProviderType {
	return &NullableSessionIdentityProviderType{value: val, isSet: true}
}

func (v NullableSessionIdentityProviderType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSessionIdentityProviderType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
