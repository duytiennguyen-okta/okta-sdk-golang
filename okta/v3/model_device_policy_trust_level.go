/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// DevicePolicyTrustLevel the model 'DevicePolicyTrustLevel'
type DevicePolicyTrustLevel string

// List of DevicePolicyTrustLevel
const (
	DEVICEPOLICYTRUSTLEVEL_ANY     DevicePolicyTrustLevel = "ANY"
	DEVICEPOLICYTRUSTLEVEL_TRUSTED DevicePolicyTrustLevel = "TRUSTED"
)

// All allowed values of DevicePolicyTrustLevel enum
var AllowedDevicePolicyTrustLevelEnumValues = []DevicePolicyTrustLevel{
	"ANY",
	"TRUSTED",
}

func (v *DevicePolicyTrustLevel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DevicePolicyTrustLevel(value)
	for _, existing := range AllowedDevicePolicyTrustLevelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DevicePolicyTrustLevel", value)
}

// NewDevicePolicyTrustLevelFromValue returns a pointer to a valid DevicePolicyTrustLevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDevicePolicyTrustLevelFromValue(v string) (*DevicePolicyTrustLevel, error) {
	ev := DevicePolicyTrustLevel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DevicePolicyTrustLevel: valid values are %v", v, AllowedDevicePolicyTrustLevelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DevicePolicyTrustLevel) IsValid() bool {
	for _, existing := range AllowedDevicePolicyTrustLevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DevicePolicyTrustLevel value
func (v DevicePolicyTrustLevel) Ptr() *DevicePolicyTrustLevel {
	return &v
}

type NullableDevicePolicyTrustLevel struct {
	value *DevicePolicyTrustLevel
	isSet bool
}

func (v NullableDevicePolicyTrustLevel) Get() *DevicePolicyTrustLevel {
	return v.value
}

func (v *NullableDevicePolicyTrustLevel) Set(val *DevicePolicyTrustLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableDevicePolicyTrustLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableDevicePolicyTrustLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevicePolicyTrustLevel(val *DevicePolicyTrustLevel) *NullableDevicePolicyTrustLevel {
	return &NullableDevicePolicyTrustLevel{value: val, isSet: true}
}

func (v NullableDevicePolicyTrustLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevicePolicyTrustLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
