/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// RoleType the model 'RoleType'
type RoleType string

// List of RoleType
const (
	ROLETYPE_API_ACCESS_MANAGEMENT_ADMIN RoleType = "API_ACCESS_MANAGEMENT_ADMIN"
	ROLETYPE_APP_ADMIN                   RoleType = "APP_ADMIN"
	ROLETYPE_GROUP_MEMBERSHIP_ADMIN      RoleType = "GROUP_MEMBERSHIP_ADMIN"
	ROLETYPE_HELP_DESK_ADMIN             RoleType = "HELP_DESK_ADMIN"
	ROLETYPE_MOBILE_ADMIN                RoleType = "MOBILE_ADMIN"
	ROLETYPE_ORG_ADMIN                   RoleType = "ORG_ADMIN"
	ROLETYPE_READ_ONLY_ADMIN             RoleType = "READ_ONLY_ADMIN"
	ROLETYPE_REPORT_ADMIN                RoleType = "REPORT_ADMIN"
	ROLETYPE_SUPER_ADMIN                 RoleType = "SUPER_ADMIN"
	ROLETYPE_USER_ADMIN                  RoleType = "USER_ADMIN"
)

// All allowed values of RoleType enum
var AllowedRoleTypeEnumValues = []RoleType{
	"API_ACCESS_MANAGEMENT_ADMIN",
	"APP_ADMIN",
	"GROUP_MEMBERSHIP_ADMIN",
	"HELP_DESK_ADMIN",
	"MOBILE_ADMIN",
	"ORG_ADMIN",
	"READ_ONLY_ADMIN",
	"REPORT_ADMIN",
	"SUPER_ADMIN",
	"USER_ADMIN",
}

func (v *RoleType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RoleType(value)
	for _, existing := range AllowedRoleTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RoleType", value)
}

// NewRoleTypeFromValue returns a pointer to a valid RoleType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRoleTypeFromValue(v string) (*RoleType, error) {
	ev := RoleType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RoleType: valid values are %v", v, AllowedRoleTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RoleType) IsValid() bool {
	for _, existing := range AllowedRoleTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RoleType value
func (v RoleType) Ptr() *RoleType {
	return &v
}

type NullableRoleType struct {
	value *RoleType
	isSet bool
}

func (v NullableRoleType) Get() *RoleType {
	return v.value
}

func (v *NullableRoleType) Set(val *RoleType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleType(val *RoleType) *NullableRoleType {
	return &NullableRoleType{value: val, isSet: true}
}

func (v NullableRoleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
