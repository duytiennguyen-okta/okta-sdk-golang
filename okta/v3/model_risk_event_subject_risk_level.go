/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// RiskEventSubjectRiskLevel the model 'RiskEventSubjectRiskLevel'
type RiskEventSubjectRiskLevel string

// List of RiskEventSubjectRiskLevel
const (
	RISKEVENTSUBJECTRISKLEVEL_HIGH   RiskEventSubjectRiskLevel = "HIGH"
	RISKEVENTSUBJECTRISKLEVEL_LOW    RiskEventSubjectRiskLevel = "LOW"
	RISKEVENTSUBJECTRISKLEVEL_MEDIUM RiskEventSubjectRiskLevel = "MEDIUM"
)

// All allowed values of RiskEventSubjectRiskLevel enum
var AllowedRiskEventSubjectRiskLevelEnumValues = []RiskEventSubjectRiskLevel{
	"HIGH",
	"LOW",
	"MEDIUM",
}

func (v *RiskEventSubjectRiskLevel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RiskEventSubjectRiskLevel(value)
	for _, existing := range AllowedRiskEventSubjectRiskLevelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RiskEventSubjectRiskLevel", value)
}

// NewRiskEventSubjectRiskLevelFromValue returns a pointer to a valid RiskEventSubjectRiskLevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRiskEventSubjectRiskLevelFromValue(v string) (*RiskEventSubjectRiskLevel, error) {
	ev := RiskEventSubjectRiskLevel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RiskEventSubjectRiskLevel: valid values are %v", v, AllowedRiskEventSubjectRiskLevelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RiskEventSubjectRiskLevel) IsValid() bool {
	for _, existing := range AllowedRiskEventSubjectRiskLevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RiskEventSubjectRiskLevel value
func (v RiskEventSubjectRiskLevel) Ptr() *RiskEventSubjectRiskLevel {
	return &v
}

type NullableRiskEventSubjectRiskLevel struct {
	value *RiskEventSubjectRiskLevel
	isSet bool
}

func (v NullableRiskEventSubjectRiskLevel) Get() *RiskEventSubjectRiskLevel {
	return v.value
}

func (v *NullableRiskEventSubjectRiskLevel) Set(val *RiskEventSubjectRiskLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableRiskEventSubjectRiskLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableRiskEventSubjectRiskLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRiskEventSubjectRiskLevel(val *RiskEventSubjectRiskLevel) *NullableRiskEventSubjectRiskLevel {
	return &NullableRiskEventSubjectRiskLevel{value: val, isSet: true}
}

func (v NullableRiskEventSubjectRiskLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRiskEventSubjectRiskLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
