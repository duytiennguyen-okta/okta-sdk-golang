/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// RolePermissionType the model 'RolePermissionType'
type RolePermissionType string

// List of RolePermissionType
const (
	ROLEPERMISSIONTYPE_APPS_ASSIGNMENT_MANAGE                  RolePermissionType = "okta.apps.assignment.manage"
	ROLEPERMISSIONTYPE_APPS_MANAGE                             RolePermissionType = "okta.apps.manage"
	ROLEPERMISSIONTYPE_APPS_MANAGE_FIRST_PARTY_APPS            RolePermissionType = "okta.apps.manageFirstPartyApps"
	ROLEPERMISSIONTYPE_APPS_READ                               RolePermissionType = "okta.apps.read"
	ROLEPERMISSIONTYPE_AUTHZ_SERVERS_MANAGE                    RolePermissionType = "okta.authzServers.manage"
	ROLEPERMISSIONTYPE_AUTHZ_SERVERS_READ                      RolePermissionType = "okta.authzServers.read"
	ROLEPERMISSIONTYPE_CUSTOMIZATIONS_MANAGE                   RolePermissionType = "okta.customizations.manage"
	ROLEPERMISSIONTYPE_CUSTOMIZATIONS_READ                     RolePermissionType = "okta.customizations.read"
	ROLEPERMISSIONTYPE_GOVERNANCE_ACCESS_CERTIFICATIONS_MANAGE RolePermissionType = "okta.governance.accessCertifications.manage"
	ROLEPERMISSIONTYPE_GOVERNANCE_ACCESS_REQUESTS_MANAGE       RolePermissionType = "okta.governance.accessRequests.manage"
	ROLEPERMISSIONTYPE_GROUPS_APP_ASSIGNMENT_MANAGE            RolePermissionType = "okta.groups.appAssignment.manage"
	ROLEPERMISSIONTYPE_GROUPS_CREATE                           RolePermissionType = "okta.groups.create"
	ROLEPERMISSIONTYPE_GROUPS_MANAGE                           RolePermissionType = "okta.groups.manage"
	ROLEPERMISSIONTYPE_GROUPS_MEMBERS_MANAGE                   RolePermissionType = "okta.groups.members.manage"
	ROLEPERMISSIONTYPE_GROUPS_READ                             RolePermissionType = "okta.groups.read"
	ROLEPERMISSIONTYPE_PROFILESOURCES_IMPORT_RUN               RolePermissionType = "okta.profilesources.import.run"
	ROLEPERMISSIONTYPE_USERS_APP_ASSIGNMENT_MANAGE             RolePermissionType = "okta.users.appAssignment.manage"
	ROLEPERMISSIONTYPE_USERS_CREATE                            RolePermissionType = "okta.users.create"
	ROLEPERMISSIONTYPE_USERS_CREDENTIALS_EXPIRE_PASSWORD       RolePermissionType = "okta.users.credentials.expirePassword"
	ROLEPERMISSIONTYPE_USERS_CREDENTIALS_MANAGE                RolePermissionType = "okta.users.credentials.manage"
	ROLEPERMISSIONTYPE_USERS_CREDENTIALS_RESET_FACTORS         RolePermissionType = "okta.users.credentials.resetFactors"
	ROLEPERMISSIONTYPE_USERS_CREDENTIALS_RESET_PASSWORD        RolePermissionType = "okta.users.credentials.resetPassword"
	ROLEPERMISSIONTYPE_USERS_GROUP_MEMBERSHIP_MANAGE           RolePermissionType = "okta.users.groupMembership.manage"
	ROLEPERMISSIONTYPE_USERS_LIFECYCLE_ACTIVATE                RolePermissionType = "okta.users.lifecycle.activate"
	ROLEPERMISSIONTYPE_USERS_LIFECYCLE_CLEAR_SESSIONS          RolePermissionType = "okta.users.lifecycle.clearSessions"
	ROLEPERMISSIONTYPE_USERS_LIFECYCLE_DEACTIVATE              RolePermissionType = "okta.users.lifecycle.deactivate"
	ROLEPERMISSIONTYPE_USERS_LIFECYCLE_DELETE                  RolePermissionType = "okta.users.lifecycle.delete"
	ROLEPERMISSIONTYPE_USERS_LIFECYCLE_MANAGE                  RolePermissionType = "okta.users.lifecycle.manage"
	ROLEPERMISSIONTYPE_USERS_LIFECYCLE_SUSPEND                 RolePermissionType = "okta.users.lifecycle.suspend"
	ROLEPERMISSIONTYPE_USERS_LIFECYCLE_UNLOCK                  RolePermissionType = "okta.users.lifecycle.unlock"
	ROLEPERMISSIONTYPE_USERS_LIFECYCLE_UNSUSPEND               RolePermissionType = "okta.users.lifecycle.unsuspend"
	ROLEPERMISSIONTYPE_USERS_MANAGE                            RolePermissionType = "okta.users.manage"
	ROLEPERMISSIONTYPE_USERS_READ                              RolePermissionType = "okta.users.read"
	ROLEPERMISSIONTYPE_USERS_USERPROFILE_MANAGE                RolePermissionType = "okta.users.userprofile.manage"
)

// All allowed values of RolePermissionType enum
var AllowedRolePermissionTypeEnumValues = []RolePermissionType{
	"okta.apps.assignment.manage",
	"okta.apps.manage",
	"okta.apps.manageFirstPartyApps",
	"okta.apps.read",
	"okta.authzServers.manage",
	"okta.authzServers.read",
	"okta.customizations.manage",
	"okta.customizations.read",
	"okta.governance.accessCertifications.manage",
	"okta.governance.accessRequests.manage",
	"okta.groups.appAssignment.manage",
	"okta.groups.create",
	"okta.groups.manage",
	"okta.groups.members.manage",
	"okta.groups.read",
	"okta.profilesources.import.run",
	"okta.users.appAssignment.manage",
	"okta.users.create",
	"okta.users.credentials.expirePassword",
	"okta.users.credentials.manage",
	"okta.users.credentials.resetFactors",
	"okta.users.credentials.resetPassword",
	"okta.users.groupMembership.manage",
	"okta.users.lifecycle.activate",
	"okta.users.lifecycle.clearSessions",
	"okta.users.lifecycle.deactivate",
	"okta.users.lifecycle.delete",
	"okta.users.lifecycle.manage",
	"okta.users.lifecycle.suspend",
	"okta.users.lifecycle.unlock",
	"okta.users.lifecycle.unsuspend",
	"okta.users.manage",
	"okta.users.read",
	"okta.users.userprofile.manage",
}

func (v *RolePermissionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RolePermissionType(value)
	for _, existing := range AllowedRolePermissionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RolePermissionType", value)
}

// NewRolePermissionTypeFromValue returns a pointer to a valid RolePermissionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRolePermissionTypeFromValue(v string) (*RolePermissionType, error) {
	ev := RolePermissionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RolePermissionType: valid values are %v", v, AllowedRolePermissionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RolePermissionType) IsValid() bool {
	for _, existing := range AllowedRolePermissionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RolePermissionType value
func (v RolePermissionType) Ptr() *RolePermissionType {
	return &v
}

type NullableRolePermissionType struct {
	value *RolePermissionType
	isSet bool
}

func (v NullableRolePermissionType) Get() *RolePermissionType {
	return v.value
}

func (v *NullableRolePermissionType) Set(val *RolePermissionType) {
	v.value = val
	v.isSet = true
}

func (v NullableRolePermissionType) IsSet() bool {
	return v.isSet
}

func (v *NullableRolePermissionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRolePermissionType(val *RolePermissionType) *NullableRolePermissionType {
	return &NullableRolePermissionType{value: val, isSet: true}
}

func (v NullableRolePermissionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRolePermissionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
