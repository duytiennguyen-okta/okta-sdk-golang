/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// DomainCertificateSourceType the model 'DomainCertificateSourceType'
type DomainCertificateSourceType string

// List of DomainCertificateSourceType
const (
	DOMAINCERTIFICATESOURCETYPE_MANUAL       DomainCertificateSourceType = "MANUAL"
	DOMAINCERTIFICATESOURCETYPE_OKTA_MANAGED DomainCertificateSourceType = "OKTA_MANAGED"
)

// All allowed values of DomainCertificateSourceType enum
var AllowedDomainCertificateSourceTypeEnumValues = []DomainCertificateSourceType{
	"MANUAL",
	"OKTA_MANAGED",
}

func (v *DomainCertificateSourceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DomainCertificateSourceType(value)
	for _, existing := range AllowedDomainCertificateSourceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DomainCertificateSourceType", value)
}

// NewDomainCertificateSourceTypeFromValue returns a pointer to a valid DomainCertificateSourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDomainCertificateSourceTypeFromValue(v string) (*DomainCertificateSourceType, error) {
	ev := DomainCertificateSourceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DomainCertificateSourceType: valid values are %v", v, AllowedDomainCertificateSourceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DomainCertificateSourceType) IsValid() bool {
	for _, existing := range AllowedDomainCertificateSourceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DomainCertificateSourceType value
func (v DomainCertificateSourceType) Ptr() *DomainCertificateSourceType {
	return &v
}

type NullableDomainCertificateSourceType struct {
	value *DomainCertificateSourceType
	isSet bool
}

func (v NullableDomainCertificateSourceType) Get() *DomainCertificateSourceType {
	return v.value
}

func (v *NullableDomainCertificateSourceType) Set(val *DomainCertificateSourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableDomainCertificateSourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableDomainCertificateSourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomainCertificateSourceType(val *DomainCertificateSourceType) *NullableDomainCertificateSourceType {
	return &NullableDomainCertificateSourceType{value: val, isSet: true}
}

func (v NullableDomainCertificateSourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomainCertificateSourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
