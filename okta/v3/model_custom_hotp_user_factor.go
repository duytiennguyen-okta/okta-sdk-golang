/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"reflect"
	"strings"
)

// CustomHotpUserFactor struct for CustomHotpUserFactor
type CustomHotpUserFactor struct {
	UserFactor
	FactorProfileId      *string                      `json:"factorProfileId,omitempty"`
	Profile              *CustomHotpUserFactorProfile `json:"profile,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CustomHotpUserFactor CustomHotpUserFactor

// NewCustomHotpUserFactor instantiates a new CustomHotpUserFactor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomHotpUserFactor() *CustomHotpUserFactor {
	this := CustomHotpUserFactor{}
	return &this
}

// NewCustomHotpUserFactorWithDefaults instantiates a new CustomHotpUserFactor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomHotpUserFactorWithDefaults() *CustomHotpUserFactor {
	this := CustomHotpUserFactor{}
	return &this
}

// GetFactorProfileId returns the FactorProfileId field value if set, zero value otherwise.
func (o *CustomHotpUserFactor) GetFactorProfileId() string {
	if o == nil || o.FactorProfileId == nil {
		var ret string
		return ret
	}
	return *o.FactorProfileId
}

// GetFactorProfileIdOk returns a tuple with the FactorProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomHotpUserFactor) GetFactorProfileIdOk() (*string, bool) {
	if o == nil || o.FactorProfileId == nil {
		return nil, false
	}
	return o.FactorProfileId, true
}

// HasFactorProfileId returns a boolean if a field has been set.
func (o *CustomHotpUserFactor) HasFactorProfileId() bool {
	if o != nil && o.FactorProfileId != nil {
		return true
	}

	return false
}

// SetFactorProfileId gets a reference to the given string and assigns it to the FactorProfileId field.
func (o *CustomHotpUserFactor) SetFactorProfileId(v string) {
	o.FactorProfileId = &v
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *CustomHotpUserFactor) GetProfile() CustomHotpUserFactorProfile {
	if o == nil || o.Profile == nil {
		var ret CustomHotpUserFactorProfile
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomHotpUserFactor) GetProfileOk() (*CustomHotpUserFactorProfile, bool) {
	if o == nil || o.Profile == nil {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *CustomHotpUserFactor) HasProfile() bool {
	if o != nil && o.Profile != nil {
		return true
	}

	return false
}

// SetProfile gets a reference to the given CustomHotpUserFactorProfile and assigns it to the Profile field.
func (o *CustomHotpUserFactor) SetProfile(v CustomHotpUserFactorProfile) {
	o.Profile = &v
}

func (o CustomHotpUserFactor) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedUserFactor, errUserFactor := json.Marshal(o.UserFactor)
	if errUserFactor != nil {
		return []byte{}, errUserFactor
	}
	errUserFactor = json.Unmarshal([]byte(serializedUserFactor), &toSerialize)
	if errUserFactor != nil {
		return []byte{}, errUserFactor
	}
	if o.FactorProfileId != nil {
		toSerialize["factorProfileId"] = o.FactorProfileId
	}
	if o.Profile != nil {
		toSerialize["profile"] = o.Profile
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CustomHotpUserFactor) UnmarshalJSON(bytes []byte) (err error) {
	type CustomHotpUserFactorWithoutEmbeddedStruct struct {
		FactorProfileId *string                      `json:"factorProfileId,omitempty"`
		Profile         *CustomHotpUserFactorProfile `json:"profile,omitempty"`
	}

	varCustomHotpUserFactorWithoutEmbeddedStruct := CustomHotpUserFactorWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varCustomHotpUserFactorWithoutEmbeddedStruct)
	if err == nil {
		varCustomHotpUserFactor := _CustomHotpUserFactor{}
		varCustomHotpUserFactor.FactorProfileId = varCustomHotpUserFactorWithoutEmbeddedStruct.FactorProfileId
		varCustomHotpUserFactor.Profile = varCustomHotpUserFactorWithoutEmbeddedStruct.Profile
		*o = CustomHotpUserFactor(varCustomHotpUserFactor)
	} else {
		return err
	}

	varCustomHotpUserFactor := _CustomHotpUserFactor{}

	err = json.Unmarshal(bytes, &varCustomHotpUserFactor)
	if err == nil {
		o.UserFactor = varCustomHotpUserFactor.UserFactor
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &additionalProperties)
	if err == nil {
		delete(additionalProperties, "factorProfileId")
		delete(additionalProperties, "profile")

		// remove fields from embedded structs
		reflectUserFactor := reflect.ValueOf(o.UserFactor)
		for i := 0; i < reflectUserFactor.Type().NumField(); i++ {
			t := reflectUserFactor.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	} else {
		return err
	}

	return err
}

type NullableCustomHotpUserFactor struct {
	value *CustomHotpUserFactor
	isSet bool
}

func (v NullableCustomHotpUserFactor) Get() *CustomHotpUserFactor {
	return v.value
}

func (v *NullableCustomHotpUserFactor) Set(val *CustomHotpUserFactor) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomHotpUserFactor) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomHotpUserFactor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomHotpUserFactor(val *CustomHotpUserFactor) *NullableCustomHotpUserFactor {
	return &NullableCustomHotpUserFactor{value: val, isSet: true}
}

func (v NullableCustomHotpUserFactor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomHotpUserFactor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
