/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// SessionAuthenticationMethod the model 'SessionAuthenticationMethod'
type SessionAuthenticationMethod string

// List of SessionAuthenticationMethod
const (
	SESSIONAUTHENTICATIONMETHOD_FPT SessionAuthenticationMethod = "fpt"
	SESSIONAUTHENTICATIONMETHOD_GEO SessionAuthenticationMethod = "geo"
	SESSIONAUTHENTICATIONMETHOD_HWK SessionAuthenticationMethod = "hwk"
	SESSIONAUTHENTICATIONMETHOD_KBA SessionAuthenticationMethod = "kba"
	SESSIONAUTHENTICATIONMETHOD_MCA SessionAuthenticationMethod = "mca"
	SESSIONAUTHENTICATIONMETHOD_MFA SessionAuthenticationMethod = "mfa"
	SESSIONAUTHENTICATIONMETHOD_OTP SessionAuthenticationMethod = "otp"
	SESSIONAUTHENTICATIONMETHOD_PWD SessionAuthenticationMethod = "pwd"
	SESSIONAUTHENTICATIONMETHOD_SC  SessionAuthenticationMethod = "sc"
	SESSIONAUTHENTICATIONMETHOD_SMS SessionAuthenticationMethod = "sms"
	SESSIONAUTHENTICATIONMETHOD_SWK SessionAuthenticationMethod = "swk"
	SESSIONAUTHENTICATIONMETHOD_TEL SessionAuthenticationMethod = "tel"
)

// All allowed values of SessionAuthenticationMethod enum
var AllowedSessionAuthenticationMethodEnumValues = []SessionAuthenticationMethod{
	"fpt",
	"geo",
	"hwk",
	"kba",
	"mca",
	"mfa",
	"otp",
	"pwd",
	"sc",
	"sms",
	"swk",
	"tel",
}

func (v *SessionAuthenticationMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SessionAuthenticationMethod(value)
	for _, existing := range AllowedSessionAuthenticationMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SessionAuthenticationMethod", value)
}

// NewSessionAuthenticationMethodFromValue returns a pointer to a valid SessionAuthenticationMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSessionAuthenticationMethodFromValue(v string) (*SessionAuthenticationMethod, error) {
	ev := SessionAuthenticationMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SessionAuthenticationMethod: valid values are %v", v, AllowedSessionAuthenticationMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SessionAuthenticationMethod) IsValid() bool {
	for _, existing := range AllowedSessionAuthenticationMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SessionAuthenticationMethod value
func (v SessionAuthenticationMethod) Ptr() *SessionAuthenticationMethod {
	return &v
}

type NullableSessionAuthenticationMethod struct {
	value *SessionAuthenticationMethod
	isSet bool
}

func (v NullableSessionAuthenticationMethod) Get() *SessionAuthenticationMethod {
	return v.value
}

func (v *NullableSessionAuthenticationMethod) Set(val *SessionAuthenticationMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableSessionAuthenticationMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableSessionAuthenticationMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSessionAuthenticationMethod(val *SessionAuthenticationMethod) *NullableSessionAuthenticationMethod {
	return &NullableSessionAuthenticationMethod{value: val, isSet: true}
}

func (v NullableSessionAuthenticationMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSessionAuthenticationMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
