/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// AgentUpdateInstanceStatus Status for one agent regarding the status to auto-update that agent
type AgentUpdateInstanceStatus string

// List of AgentUpdateInstanceStatus
const (
	AGENTUPDATEINSTANCESTATUS_CANCELLED          AgentUpdateInstanceStatus = "Cancelled"
	AGENTUPDATEINSTANCESTATUS_FAILED             AgentUpdateInstanceStatus = "Failed"
	AGENTUPDATEINSTANCESTATUS_IN_PROGRESS        AgentUpdateInstanceStatus = "InProgress"
	AGENTUPDATEINSTANCESTATUS_PENDING_COMPLETION AgentUpdateInstanceStatus = "PendingCompletion"
	AGENTUPDATEINSTANCESTATUS_SCHEDULED          AgentUpdateInstanceStatus = "Scheduled"
	AGENTUPDATEINSTANCESTATUS_SUCCESS            AgentUpdateInstanceStatus = "Success"
)

// All allowed values of AgentUpdateInstanceStatus enum
var AllowedAgentUpdateInstanceStatusEnumValues = []AgentUpdateInstanceStatus{
	"Cancelled",
	"Failed",
	"InProgress",
	"PendingCompletion",
	"Scheduled",
	"Success",
}

func (v *AgentUpdateInstanceStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AgentUpdateInstanceStatus(value)
	for _, existing := range AllowedAgentUpdateInstanceStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AgentUpdateInstanceStatus", value)
}

// NewAgentUpdateInstanceStatusFromValue returns a pointer to a valid AgentUpdateInstanceStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAgentUpdateInstanceStatusFromValue(v string) (*AgentUpdateInstanceStatus, error) {
	ev := AgentUpdateInstanceStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AgentUpdateInstanceStatus: valid values are %v", v, AllowedAgentUpdateInstanceStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AgentUpdateInstanceStatus) IsValid() bool {
	for _, existing := range AllowedAgentUpdateInstanceStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AgentUpdateInstanceStatus value
func (v AgentUpdateInstanceStatus) Ptr() *AgentUpdateInstanceStatus {
	return &v
}

type NullableAgentUpdateInstanceStatus struct {
	value *AgentUpdateInstanceStatus
	isSet bool
}

func (v NullableAgentUpdateInstanceStatus) Get() *AgentUpdateInstanceStatus {
	return v.value
}

func (v *NullableAgentUpdateInstanceStatus) Set(val *AgentUpdateInstanceStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableAgentUpdateInstanceStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableAgentUpdateInstanceStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgentUpdateInstanceStatus(val *AgentUpdateInstanceStatus) *NullableAgentUpdateInstanceStatus {
	return &NullableAgentUpdateInstanceStatus{value: val, isSet: true}
}

func (v NullableAgentUpdateInstanceStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgentUpdateInstanceStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
