/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// NetworkZoneType the model 'NetworkZoneType'
type NetworkZoneType string

// List of NetworkZoneType
const (
	NETWORKZONETYPE_DYNAMIC NetworkZoneType = "DYNAMIC"
	NETWORKZONETYPE_IP      NetworkZoneType = "IP"
)

// All allowed values of NetworkZoneType enum
var AllowedNetworkZoneTypeEnumValues = []NetworkZoneType{
	"DYNAMIC",
	"IP",
}

func (v *NetworkZoneType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NetworkZoneType(value)
	for _, existing := range AllowedNetworkZoneTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NetworkZoneType", value)
}

// NewNetworkZoneTypeFromValue returns a pointer to a valid NetworkZoneType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNetworkZoneTypeFromValue(v string) (*NetworkZoneType, error) {
	ev := NetworkZoneType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NetworkZoneType: valid values are %v", v, AllowedNetworkZoneTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NetworkZoneType) IsValid() bool {
	for _, existing := range AllowedNetworkZoneTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NetworkZoneType value
func (v NetworkZoneType) Ptr() *NetworkZoneType {
	return &v
}

type NullableNetworkZoneType struct {
	value *NetworkZoneType
	isSet bool
}

func (v NullableNetworkZoneType) Get() *NetworkZoneType {
	return v.value
}

func (v *NullableNetworkZoneType) Set(val *NetworkZoneType) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkZoneType) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkZoneType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkZoneType(val *NetworkZoneType) *NullableNetworkZoneType {
	return &NullableNetworkZoneType{value: val, isSet: true}
}

func (v NullableNetworkZoneType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkZoneType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
