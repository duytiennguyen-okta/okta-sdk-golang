/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// SubscriptionStatus the model 'SubscriptionStatus'
type SubscriptionStatus string

// List of SubscriptionStatus
const (
	SUBSCRIPTIONSTATUS_SUBSCRIBED   SubscriptionStatus = "subscribed"
	SUBSCRIPTIONSTATUS_UNSUBSCRIBED SubscriptionStatus = "unsubscribed"
)

// All allowed values of SubscriptionStatus enum
var AllowedSubscriptionStatusEnumValues = []SubscriptionStatus{
	"subscribed",
	"unsubscribed",
}

func (v *SubscriptionStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SubscriptionStatus(value)
	for _, existing := range AllowedSubscriptionStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SubscriptionStatus", value)
}

// NewSubscriptionStatusFromValue returns a pointer to a valid SubscriptionStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSubscriptionStatusFromValue(v string) (*SubscriptionStatus, error) {
	ev := SubscriptionStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SubscriptionStatus: valid values are %v", v, AllowedSubscriptionStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SubscriptionStatus) IsValid() bool {
	for _, existing := range AllowedSubscriptionStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SubscriptionStatus value
func (v SubscriptionStatus) Ptr() *SubscriptionStatus {
	return &v
}

type NullableSubscriptionStatus struct {
	value *SubscriptionStatus
	isSet bool
}

func (v NullableSubscriptionStatus) Get() *SubscriptionStatus {
	return v.value
}

func (v *NullableSubscriptionStatus) Set(val *SubscriptionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionStatus(val *SubscriptionStatus) *NullableSubscriptionStatus {
	return &NullableSubscriptionStatus{value: val, isSet: true}
}

func (v NullableSubscriptionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
