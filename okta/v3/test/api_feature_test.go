/*
Okta Admin Management

Testing FeatureApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"testing"

	openapiclient "./openapi"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_okta_FeatureApiService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test FeatureApiService GetFeature", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var featureId string

		resp, httpRes, err := apiClient.FeatureApi.GetFeature(context.Background(), featureId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test FeatureApiService ListFeatureDependencies", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var featureId string

		resp, httpRes, err := apiClient.FeatureApi.ListFeatureDependencies(context.Background(), featureId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test FeatureApiService ListFeatureDependents", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var featureId string

		resp, httpRes, err := apiClient.FeatureApi.ListFeatureDependents(context.Background(), featureId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test FeatureApiService ListFeatures", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.FeatureApi.ListFeatures(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test FeatureApiService UpdateFeatureLifecycle", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var featureId string
		var lifecycle string

		resp, httpRes, err := apiClient.FeatureApi.UpdateFeatureLifecycle(context.Background(), featureId, lifecycle).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
