/*
Okta Admin Management

Testing UserFactorApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"testing"

	openapiclient "./openapi"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_okta_UserFactorApiService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test UserFactorApiService ActivateFactor", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string
		var factorId string

		resp, httpRes, err := apiClient.UserFactorApi.ActivateFactor(context.Background(), userId, factorId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserFactorApiService EnrollFactor", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.UserFactorApi.EnrollFactor(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserFactorApiService GetFactor", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string
		var factorId string

		resp, httpRes, err := apiClient.UserFactorApi.GetFactor(context.Background(), userId, factorId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserFactorApiService GetFactorTransactionStatus", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string
		var factorId string
		var transactionId string

		resp, httpRes, err := apiClient.UserFactorApi.GetFactorTransactionStatus(context.Background(), userId, factorId, transactionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserFactorApiService ListFactors", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.UserFactorApi.ListFactors(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserFactorApiService ListSupportedFactors", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.UserFactorApi.ListSupportedFactors(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserFactorApiService ListSupportedSecurityQuestions", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.UserFactorApi.ListSupportedSecurityQuestions(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserFactorApiService UnenrollFactor", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string
		var factorId string

		resp, httpRes, err := apiClient.UserFactorApi.UnenrollFactor(context.Background(), userId, factorId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserFactorApiService VerifyFactor", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string
		var factorId string

		resp, httpRes, err := apiClient.UserFactorApi.VerifyFactor(context.Background(), userId, factorId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
