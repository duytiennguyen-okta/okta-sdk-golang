/*
Okta Admin Management

Testing RoleApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"testing"

	openapiclient "./openapi"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_okta_RoleApiService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RoleApiService CreateRole", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RoleApi.CreateRole(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RoleApiService CreateRolePermission", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var roleIdOrLabel string
		var permissionType string

		resp, httpRes, err := apiClient.RoleApi.CreateRolePermission(context.Background(), roleIdOrLabel, permissionType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RoleApiService DeleteRole", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var roleIdOrLabel string

		resp, httpRes, err := apiClient.RoleApi.DeleteRole(context.Background(), roleIdOrLabel).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RoleApiService DeleteRolePermission", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var roleIdOrLabel string
		var permissionType string

		resp, httpRes, err := apiClient.RoleApi.DeleteRolePermission(context.Background(), roleIdOrLabel, permissionType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RoleApiService GetRole", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var roleIdOrLabel string

		resp, httpRes, err := apiClient.RoleApi.GetRole(context.Background(), roleIdOrLabel).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RoleApiService GetRolePermission", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var roleIdOrLabel string
		var permissionType string

		resp, httpRes, err := apiClient.RoleApi.GetRolePermission(context.Background(), roleIdOrLabel, permissionType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RoleApiService ListRolePermissions", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var roleIdOrLabel string

		resp, httpRes, err := apiClient.RoleApi.ListRolePermissions(context.Background(), roleIdOrLabel).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RoleApiService ListRoles", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RoleApi.ListRoles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RoleApiService ReplaceRole", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var roleIdOrLabel string

		resp, httpRes, err := apiClient.RoleApi.ReplaceRole(context.Background(), roleIdOrLabel).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
