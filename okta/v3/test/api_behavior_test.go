/*
Okta Admin Management

Testing BehaviorApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"testing"

	openapiclient "./openapi"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_okta_BehaviorApiService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BehaviorApiService ActivateBehaviorDetectionRule", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var behaviorId string

		resp, httpRes, err := apiClient.BehaviorApi.ActivateBehaviorDetectionRule(context.Background(), behaviorId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test BehaviorApiService CreateBehaviorDetectionRule", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BehaviorApi.CreateBehaviorDetectionRule(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test BehaviorApiService DeactivateBehaviorDetectionRule", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var behaviorId string

		resp, httpRes, err := apiClient.BehaviorApi.DeactivateBehaviorDetectionRule(context.Background(), behaviorId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test BehaviorApiService DeleteBehaviorDetectionRule", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var behaviorId string

		resp, httpRes, err := apiClient.BehaviorApi.DeleteBehaviorDetectionRule(context.Background(), behaviorId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test BehaviorApiService GetBehaviorDetectionRule", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var behaviorId string

		resp, httpRes, err := apiClient.BehaviorApi.GetBehaviorDetectionRule(context.Background(), behaviorId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test BehaviorApiService ListBehaviorDetectionRules", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BehaviorApi.ListBehaviorDetectionRules(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test BehaviorApiService ReplaceBehaviorDetectionRule", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var behaviorId string

		resp, httpRes, err := apiClient.BehaviorApi.ReplaceBehaviorDetectionRule(context.Background(), behaviorId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
