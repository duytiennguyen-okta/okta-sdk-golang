/*
Okta Admin Management

Testing IdentitySourceApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"testing"

	openapiclient "./openapi"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_okta_IdentitySourceApiService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test IdentitySourceApiService CreateIdentitySourceSession", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var identitySourceId string

		resp, httpRes, err := apiClient.IdentitySourceApi.CreateIdentitySourceSession(context.Background(), identitySourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test IdentitySourceApiService DeleteIdentitySourceSession", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var identitySourceId string
		var sessionId string

		resp, httpRes, err := apiClient.IdentitySourceApi.DeleteIdentitySourceSession(context.Background(), identitySourceId, sessionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test IdentitySourceApiService GetIdentitySourceSession", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var identitySourceId string
		var sessionId string

		resp, httpRes, err := apiClient.IdentitySourceApi.GetIdentitySourceSession(context.Background(), identitySourceId, sessionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test IdentitySourceApiService ListIdentitySourceSessions", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var identitySourceId string

		resp, httpRes, err := apiClient.IdentitySourceApi.ListIdentitySourceSessions(context.Background(), identitySourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test IdentitySourceApiService StartImportFromIdentitySource", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var identitySourceId string
		var sessionId string

		resp, httpRes, err := apiClient.IdentitySourceApi.StartImportFromIdentitySource(context.Background(), identitySourceId, sessionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test IdentitySourceApiService UploadIdentitySourceDataForDelete", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var identitySourceId string
		var sessionId string

		resp, httpRes, err := apiClient.IdentitySourceApi.UploadIdentitySourceDataForDelete(context.Background(), identitySourceId, sessionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test IdentitySourceApiService UploadIdentitySourceDataForUpsert", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var identitySourceId string
		var sessionId string

		resp, httpRes, err := apiClient.IdentitySourceApi.UploadIdentitySourceDataForUpsert(context.Background(), identitySourceId, sessionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
