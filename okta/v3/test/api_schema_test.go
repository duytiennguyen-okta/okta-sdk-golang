/*
Okta Admin Management

Testing SchemaApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"testing"

	openapiclient "./openapi"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_okta_SchemaApiService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SchemaApiService GetApplicationLayout", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appName string

		resp, httpRes, err := apiClient.SchemaApi.GetApplicationLayout(context.Background(), appName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SchemaApiService GetApplicationUserSchema", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appInstanceId string

		resp, httpRes, err := apiClient.SchemaApi.GetApplicationUserSchema(context.Background(), appInstanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SchemaApiService GetGroupSchema", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SchemaApi.GetGroupSchema(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SchemaApiService GetLogStreamSchema", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var logStreamType LogStreamType

		resp, httpRes, err := apiClient.SchemaApi.GetLogStreamSchema(context.Background(), logStreamType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SchemaApiService GetUserSchema", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var schemaId string

		resp, httpRes, err := apiClient.SchemaApi.GetUserSchema(context.Background(), schemaId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SchemaApiService ListLogStreamSchemas", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SchemaApi.ListLogStreamSchemas(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SchemaApiService UpdateApplicationUserProfile", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appInstanceId string

		resp, httpRes, err := apiClient.SchemaApi.UpdateApplicationUserProfile(context.Background(), appInstanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SchemaApiService UpdateGroupSchema", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SchemaApi.UpdateGroupSchema(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SchemaApiService UpdateUserProfile", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var schemaId string

		resp, httpRes, err := apiClient.SchemaApi.UpdateUserProfile(context.Background(), schemaId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
