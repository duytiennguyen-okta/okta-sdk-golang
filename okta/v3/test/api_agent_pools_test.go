/*
Okta Admin Management

Testing AgentPoolsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"testing"

	openapiclient "./openapi"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_okta_AgentPoolsApiService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AgentPoolsApiService ActivateAgentPoolsUpdate", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var poolId string
		var updateId string

		resp, httpRes, err := apiClient.AgentPoolsApi.ActivateAgentPoolsUpdate(context.Background(), poolId, updateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AgentPoolsApiService CreateAgentPoolsUpdate", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var poolId string

		resp, httpRes, err := apiClient.AgentPoolsApi.CreateAgentPoolsUpdate(context.Background(), poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AgentPoolsApiService DeactivateAgentPoolsUpdate", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var poolId string
		var updateId string

		resp, httpRes, err := apiClient.AgentPoolsApi.DeactivateAgentPoolsUpdate(context.Background(), poolId, updateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AgentPoolsApiService DeleteAgentPoolsUpdate", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var poolId string
		var updateId string

		resp, httpRes, err := apiClient.AgentPoolsApi.DeleteAgentPoolsUpdate(context.Background(), poolId, updateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AgentPoolsApiService GetAgentPoolsUpdateInstance", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var poolId string
		var updateId string

		resp, httpRes, err := apiClient.AgentPoolsApi.GetAgentPoolsUpdateInstance(context.Background(), poolId, updateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AgentPoolsApiService GetAgentPoolsUpdateSettings", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var poolId string

		resp, httpRes, err := apiClient.AgentPoolsApi.GetAgentPoolsUpdateSettings(context.Background(), poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AgentPoolsApiService ListAgentPools", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AgentPoolsApi.ListAgentPools(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AgentPoolsApiService ListAgentPoolsUpdates", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var poolId string

		resp, httpRes, err := apiClient.AgentPoolsApi.ListAgentPoolsUpdates(context.Background(), poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AgentPoolsApiService PauseAgentPoolsUpdate", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var poolId string
		var updateId string

		resp, httpRes, err := apiClient.AgentPoolsApi.PauseAgentPoolsUpdate(context.Background(), poolId, updateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AgentPoolsApiService ResumeAgentPoolsUpdate", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var poolId string
		var updateId string

		resp, httpRes, err := apiClient.AgentPoolsApi.ResumeAgentPoolsUpdate(context.Background(), poolId, updateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AgentPoolsApiService RetryAgentPoolsUpdate", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var poolId string
		var updateId string

		resp, httpRes, err := apiClient.AgentPoolsApi.RetryAgentPoolsUpdate(context.Background(), poolId, updateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AgentPoolsApiService StopAgentPoolsUpdate", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var poolId string
		var updateId string

		resp, httpRes, err := apiClient.AgentPoolsApi.StopAgentPoolsUpdate(context.Background(), poolId, updateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AgentPoolsApiService UpdateAgentPoolsUpdate", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var poolId string
		var updateId string

		resp, httpRes, err := apiClient.AgentPoolsApi.UpdateAgentPoolsUpdate(context.Background(), poolId, updateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AgentPoolsApiService UpdateAgentPoolsUpdateSettings", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var poolId string

		resp, httpRes, err := apiClient.AgentPoolsApi.UpdateAgentPoolsUpdateSettings(context.Background(), poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
