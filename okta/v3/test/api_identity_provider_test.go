/*
Okta Admin Management

Testing IdentityProviderApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"testing"

	openapiclient "./openapi"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_okta_IdentityProviderApiService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test IdentityProviderApiService ActivateIdentityProvider", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var idpId string

		resp, httpRes, err := apiClient.IdentityProviderApi.ActivateIdentityProvider(context.Background(), idpId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test IdentityProviderApiService CloneIdentityProviderKey", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var idpId string
		var keyId string

		resp, httpRes, err := apiClient.IdentityProviderApi.CloneIdentityProviderKey(context.Background(), idpId, keyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test IdentityProviderApiService CreateIdentityProvider", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.IdentityProviderApi.CreateIdentityProvider(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test IdentityProviderApiService CreateIdentityProviderKey", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.IdentityProviderApi.CreateIdentityProviderKey(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test IdentityProviderApiService DeactivateIdentityProvider", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var idpId string

		resp, httpRes, err := apiClient.IdentityProviderApi.DeactivateIdentityProvider(context.Background(), idpId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test IdentityProviderApiService DeleteIdentityProvider", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var idpId string

		resp, httpRes, err := apiClient.IdentityProviderApi.DeleteIdentityProvider(context.Background(), idpId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test IdentityProviderApiService DeleteIdentityProviderKey", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var keyId string

		resp, httpRes, err := apiClient.IdentityProviderApi.DeleteIdentityProviderKey(context.Background(), keyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test IdentityProviderApiService GenerateCsrForIdentityProvider", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var idpId string

		resp, httpRes, err := apiClient.IdentityProviderApi.GenerateCsrForIdentityProvider(context.Background(), idpId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test IdentityProviderApiService GenerateIdentityProviderSigningKey", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var idpId string

		resp, httpRes, err := apiClient.IdentityProviderApi.GenerateIdentityProviderSigningKey(context.Background(), idpId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test IdentityProviderApiService GetCsrForIdentityProvider", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var idpId string
		var csrId string

		resp, httpRes, err := apiClient.IdentityProviderApi.GetCsrForIdentityProvider(context.Background(), idpId, csrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test IdentityProviderApiService GetIdentityProvider", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var idpId string

		resp, httpRes, err := apiClient.IdentityProviderApi.GetIdentityProvider(context.Background(), idpId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test IdentityProviderApiService GetIdentityProviderApplicationUser", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var idpId string
		var userId string

		resp, httpRes, err := apiClient.IdentityProviderApi.GetIdentityProviderApplicationUser(context.Background(), idpId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test IdentityProviderApiService GetIdentityProviderKey", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var keyId string

		resp, httpRes, err := apiClient.IdentityProviderApi.GetIdentityProviderKey(context.Background(), keyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test IdentityProviderApiService GetIdentityProviderSigningKey", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var idpId string
		var keyId string

		resp, httpRes, err := apiClient.IdentityProviderApi.GetIdentityProviderSigningKey(context.Background(), idpId, keyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test IdentityProviderApiService LinkUserToIdentityProvider", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var idpId string
		var userId string

		resp, httpRes, err := apiClient.IdentityProviderApi.LinkUserToIdentityProvider(context.Background(), idpId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test IdentityProviderApiService ListCsrsForIdentityProvider", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var idpId string

		resp, httpRes, err := apiClient.IdentityProviderApi.ListCsrsForIdentityProvider(context.Background(), idpId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test IdentityProviderApiService ListIdentityProviderApplicationUsers", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var idpId string

		resp, httpRes, err := apiClient.IdentityProviderApi.ListIdentityProviderApplicationUsers(context.Background(), idpId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test IdentityProviderApiService ListIdentityProviderKeys", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.IdentityProviderApi.ListIdentityProviderKeys(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test IdentityProviderApiService ListIdentityProviderSigningKeys", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var idpId string

		resp, httpRes, err := apiClient.IdentityProviderApi.ListIdentityProviderSigningKeys(context.Background(), idpId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test IdentityProviderApiService ListIdentityProviders", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.IdentityProviderApi.ListIdentityProviders(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test IdentityProviderApiService ListSocialAuthTokens", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var idpId string
		var userId string

		resp, httpRes, err := apiClient.IdentityProviderApi.ListSocialAuthTokens(context.Background(), idpId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test IdentityProviderApiService PublishCsrForIdentityProvider", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var idpId string
		var csrId string

		resp, httpRes, err := apiClient.IdentityProviderApi.PublishCsrForIdentityProvider(context.Background(), idpId, csrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test IdentityProviderApiService ReplaceIdentityProvider", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var idpId string

		resp, httpRes, err := apiClient.IdentityProviderApi.ReplaceIdentityProvider(context.Background(), idpId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test IdentityProviderApiService RevokeCsrForIdentityProvider", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var idpId string
		var csrId string

		resp, httpRes, err := apiClient.IdentityProviderApi.RevokeCsrForIdentityProvider(context.Background(), idpId, csrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test IdentityProviderApiService UnlinkUserFromIdentityProvider", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var idpId string
		var userId string

		resp, httpRes, err := apiClient.IdentityProviderApi.UnlinkUserFromIdentityProvider(context.Background(), idpId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
