/*
Okta Admin Management

Testing SubscriptionApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"testing"

	openapiclient "./openapi"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_okta_SubscriptionApiService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SubscriptionApiService ListRoleSubscriptions", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var roleTypeOrRoleId string

		resp, httpRes, err := apiClient.SubscriptionApi.ListRoleSubscriptions(context.Background(), roleTypeOrRoleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SubscriptionApiService ListRoleSubscriptionsByNotificationType", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var roleTypeOrRoleId string
		var notificationType string

		resp, httpRes, err := apiClient.SubscriptionApi.ListRoleSubscriptionsByNotificationType(context.Background(), roleTypeOrRoleId, notificationType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SubscriptionApiService ListUserSubscriptions", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.SubscriptionApi.ListUserSubscriptions(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SubscriptionApiService ListUserSubscriptionsByNotificationType", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string
		var notificationType string

		resp, httpRes, err := apiClient.SubscriptionApi.ListUserSubscriptionsByNotificationType(context.Background(), userId, notificationType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SubscriptionApiService SubscribeRoleSubscriptionByNotificationType", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var roleTypeOrRoleId string
		var notificationType string

		resp, httpRes, err := apiClient.SubscriptionApi.SubscribeRoleSubscriptionByNotificationType(context.Background(), roleTypeOrRoleId, notificationType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SubscriptionApiService SubscribeUserSubscriptionByNotificationType", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string
		var notificationType string

		resp, httpRes, err := apiClient.SubscriptionApi.SubscribeUserSubscriptionByNotificationType(context.Background(), userId, notificationType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SubscriptionApiService UnsubscribeRoleSubscriptionByNotificationType", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var roleTypeOrRoleId string
		var notificationType string

		resp, httpRes, err := apiClient.SubscriptionApi.UnsubscribeRoleSubscriptionByNotificationType(context.Background(), roleTypeOrRoleId, notificationType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SubscriptionApiService UnsubscribeUserSubscriptionByNotificationType", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string
		var notificationType string

		resp, httpRes, err := apiClient.SubscriptionApi.UnsubscribeUserSubscriptionByNotificationType(context.Background(), userId, notificationType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
