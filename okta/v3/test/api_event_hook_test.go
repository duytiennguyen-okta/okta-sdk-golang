/*
Okta Admin Management

Testing EventHookApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"testing"

	openapiclient "./openapi"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_okta_EventHookApiService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test EventHookApiService ActivateEventHook", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var eventHookId string

		resp, httpRes, err := apiClient.EventHookApi.ActivateEventHook(context.Background(), eventHookId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test EventHookApiService CreateEventHook", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.EventHookApi.CreateEventHook(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test EventHookApiService DeactivateEventHook", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var eventHookId string

		resp, httpRes, err := apiClient.EventHookApi.DeactivateEventHook(context.Background(), eventHookId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test EventHookApiService DeleteEventHook", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var eventHookId string

		resp, httpRes, err := apiClient.EventHookApi.DeleteEventHook(context.Background(), eventHookId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test EventHookApiService GetEventHook", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var eventHookId string

		resp, httpRes, err := apiClient.EventHookApi.GetEventHook(context.Background(), eventHookId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test EventHookApiService ListEventHooks", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.EventHookApi.ListEventHooks(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test EventHookApiService ReplaceEventHook", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var eventHookId string

		resp, httpRes, err := apiClient.EventHookApi.ReplaceEventHook(context.Background(), eventHookId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test EventHookApiService VerifyEventHook", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var eventHookId string

		resp, httpRes, err := apiClient.EventHookApi.VerifyEventHook(context.Background(), eventHookId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
