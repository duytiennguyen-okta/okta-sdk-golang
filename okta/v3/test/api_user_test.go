/*
Okta Admin Management

Testing UserApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"testing"

	openapiclient "./openapi"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_okta_UserApiService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test UserApiService ActivateUser", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.UserApi.ActivateUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserApiService ChangePassword", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.UserApi.ChangePassword(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserApiService ChangeRecoveryQuestion", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.UserApi.ChangeRecoveryQuestion(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserApiService CreateUser", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UserApi.CreateUser(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserApiService DeactivateUser", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.UserApi.DeactivateUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserApiService DeleteLinkedObjectForUser", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string
		var relationshipName string

		resp, httpRes, err := apiClient.UserApi.DeleteLinkedObjectForUser(context.Background(), userId, relationshipName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserApiService DeleteUser", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.UserApi.DeleteUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserApiService ExpirePassword", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.UserApi.ExpirePassword(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserApiService ExpirePasswordAndGetTemporaryPassword", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.UserApi.ExpirePasswordAndGetTemporaryPassword(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserApiService ForgotPassword", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.UserApi.ForgotPassword(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserApiService ForgotPasswordSetNewPassword", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.UserApi.ForgotPasswordSetNewPassword(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserApiService GenerateResetPasswordToken", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.UserApi.GenerateResetPasswordToken(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserApiService GetRefreshTokenForUserAndClient", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string
		var clientId string
		var tokenId string

		resp, httpRes, err := apiClient.UserApi.GetRefreshTokenForUserAndClient(context.Background(), userId, clientId, tokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserApiService GetUser", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.UserApi.GetUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserApiService GetUserGrant", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string
		var grantId string

		resp, httpRes, err := apiClient.UserApi.GetUserGrant(context.Background(), userId, grantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserApiService ListAppLinks", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.UserApi.ListAppLinks(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserApiService ListGrantsForUserAndClient", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string
		var clientId string

		resp, httpRes, err := apiClient.UserApi.ListGrantsForUserAndClient(context.Background(), userId, clientId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserApiService ListLinkedObjectsForUser", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string
		var relationshipName string

		resp, httpRes, err := apiClient.UserApi.ListLinkedObjectsForUser(context.Background(), userId, relationshipName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserApiService ListRefreshTokensForUserAndClient", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string
		var clientId string

		resp, httpRes, err := apiClient.UserApi.ListRefreshTokensForUserAndClient(context.Background(), userId, clientId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserApiService ListUserBlocks", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.UserApi.ListUserBlocks(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserApiService ListUserClients", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.UserApi.ListUserClients(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserApiService ListUserGrants", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.UserApi.ListUserGrants(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserApiService ListUserGroups", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.UserApi.ListUserGroups(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserApiService ListUserIdentityProviders", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.UserApi.ListUserIdentityProviders(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserApiService ListUsers", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UserApi.ListUsers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserApiService ReactivateUser", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.UserApi.ReactivateUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserApiService ReplaceUser", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.UserApi.ReplaceUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserApiService ResetFactors", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.UserApi.ResetFactors(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserApiService RevokeGrantsForUserAndClient", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string
		var clientId string

		resp, httpRes, err := apiClient.UserApi.RevokeGrantsForUserAndClient(context.Background(), userId, clientId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserApiService RevokeTokenForUserAndClient", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string
		var clientId string
		var tokenId string

		resp, httpRes, err := apiClient.UserApi.RevokeTokenForUserAndClient(context.Background(), userId, clientId, tokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserApiService RevokeTokensForUserAndClient", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string
		var clientId string

		resp, httpRes, err := apiClient.UserApi.RevokeTokensForUserAndClient(context.Background(), userId, clientId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserApiService RevokeUserGrant", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string
		var grantId string

		resp, httpRes, err := apiClient.UserApi.RevokeUserGrant(context.Background(), userId, grantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserApiService RevokeUserGrants", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.UserApi.RevokeUserGrants(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserApiService RevokeUserSessions", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.UserApi.RevokeUserSessions(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserApiService SetLinkedObjectForUser", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var associatedUserId string
		var primaryRelationshipName string
		var primaryUserId string

		resp, httpRes, err := apiClient.UserApi.SetLinkedObjectForUser(context.Background(), associatedUserId, primaryRelationshipName, primaryUserId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserApiService SuspendUser", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.UserApi.SuspendUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserApiService UnlockUser", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.UserApi.UnlockUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserApiService UnsuspendUser", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.UserApi.UnsuspendUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test UserApiService UpdateUser", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.UserApi.UpdateUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
