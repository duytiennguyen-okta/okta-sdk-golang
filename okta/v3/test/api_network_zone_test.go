/*
Okta Admin Management

Testing NetworkZoneApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"testing"

	openapiclient "./openapi"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_okta_NetworkZoneApiService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test NetworkZoneApiService ActivateNetworkZone", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var zoneId string

		resp, httpRes, err := apiClient.NetworkZoneApi.ActivateNetworkZone(context.Background(), zoneId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test NetworkZoneApiService CreateNetworkZone", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.NetworkZoneApi.CreateNetworkZone(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test NetworkZoneApiService DeactivateNetworkZone", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var zoneId string

		resp, httpRes, err := apiClient.NetworkZoneApi.DeactivateNetworkZone(context.Background(), zoneId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test NetworkZoneApiService DeleteNetworkZone", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var zoneId string

		resp, httpRes, err := apiClient.NetworkZoneApi.DeleteNetworkZone(context.Background(), zoneId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test NetworkZoneApiService GetNetworkZone", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var zoneId string

		resp, httpRes, err := apiClient.NetworkZoneApi.GetNetworkZone(context.Background(), zoneId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test NetworkZoneApiService ListNetworkZones", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.NetworkZoneApi.ListNetworkZones(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test NetworkZoneApiService ReplaceNetworkZone", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var zoneId string

		resp, httpRes, err := apiClient.NetworkZoneApi.ReplaceNetworkZone(context.Background(), zoneId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
