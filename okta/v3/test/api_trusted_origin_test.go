/*
Okta Admin Management

Testing TrustedOriginApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"testing"

	openapiclient "./openapi"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_okta_TrustedOriginApiService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TrustedOriginApiService ActivateTrustedOrigin", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var trustedOriginId string

		resp, httpRes, err := apiClient.TrustedOriginApi.ActivateTrustedOrigin(context.Background(), trustedOriginId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test TrustedOriginApiService CreateTrustedOrigin", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TrustedOriginApi.CreateTrustedOrigin(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test TrustedOriginApiService DeactivateTrustedOrigin", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var trustedOriginId string

		resp, httpRes, err := apiClient.TrustedOriginApi.DeactivateTrustedOrigin(context.Background(), trustedOriginId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test TrustedOriginApiService DeleteTrustedOrigin", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var trustedOriginId string

		resp, httpRes, err := apiClient.TrustedOriginApi.DeleteTrustedOrigin(context.Background(), trustedOriginId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test TrustedOriginApiService GetTrustedOrigin", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var trustedOriginId string

		resp, httpRes, err := apiClient.TrustedOriginApi.GetTrustedOrigin(context.Background(), trustedOriginId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test TrustedOriginApiService ListTrustedOrigins", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TrustedOriginApi.ListTrustedOrigins(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test TrustedOriginApiService ReplaceTrustedOrigin", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var trustedOriginId string

		resp, httpRes, err := apiClient.TrustedOriginApi.ReplaceTrustedOrigin(context.Background(), trustedOriginId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
