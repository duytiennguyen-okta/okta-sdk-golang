/*
Okta Admin Management

Testing RoleTargetApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"testing"

	openapiclient "./openapi"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_okta_RoleTargetApiService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RoleTargetApiService AssignAllAppsAsTargetToRoleForUser", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string
		var roleId string

		resp, httpRes, err := apiClient.RoleTargetApi.AssignAllAppsAsTargetToRoleForUser(context.Background(), userId, roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RoleTargetApiService AssignAppInstanceTargetToAppAdminRoleForGroup", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var groupId string
		var roleId string
		var appName string
		var applicationId string

		resp, httpRes, err := apiClient.RoleTargetApi.AssignAppInstanceTargetToAppAdminRoleForGroup(context.Background(), groupId, roleId, appName, applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RoleTargetApiService AssignAppInstanceTargetToAppAdminRoleForUser", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string
		var roleId string
		var appName string
		var applicationId string

		resp, httpRes, err := apiClient.RoleTargetApi.AssignAppInstanceTargetToAppAdminRoleForUser(context.Background(), userId, roleId, appName, applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RoleTargetApiService AssignAppTargetToAdminRoleForGroup", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var groupId string
		var roleId string
		var appName string

		resp, httpRes, err := apiClient.RoleTargetApi.AssignAppTargetToAdminRoleForGroup(context.Background(), groupId, roleId, appName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RoleTargetApiService AssignAppTargetToAdminRoleForUser", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string
		var roleId string
		var appName string

		resp, httpRes, err := apiClient.RoleTargetApi.AssignAppTargetToAdminRoleForUser(context.Background(), userId, roleId, appName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RoleTargetApiService AssignGroupTargetToGroupAdminRole", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var groupId string
		var roleId string
		var targetGroupId string

		resp, httpRes, err := apiClient.RoleTargetApi.AssignGroupTargetToGroupAdminRole(context.Background(), groupId, roleId, targetGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RoleTargetApiService AssignGroupTargetToUserRole", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string
		var roleId string
		var groupId string

		resp, httpRes, err := apiClient.RoleTargetApi.AssignGroupTargetToUserRole(context.Background(), userId, roleId, groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RoleTargetApiService ListApplicationTargetsForApplicationAdministratorRoleForGroup", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var groupId string
		var roleId string

		resp, httpRes, err := apiClient.RoleTargetApi.ListApplicationTargetsForApplicationAdministratorRoleForGroup(context.Background(), groupId, roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RoleTargetApiService ListApplicationTargetsForApplicationAdministratorRoleForUser", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string
		var roleId string

		resp, httpRes, err := apiClient.RoleTargetApi.ListApplicationTargetsForApplicationAdministratorRoleForUser(context.Background(), userId, roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RoleTargetApiService ListGroupTargetsForGroupRole", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var groupId string
		var roleId string

		resp, httpRes, err := apiClient.RoleTargetApi.ListGroupTargetsForGroupRole(context.Background(), groupId, roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RoleTargetApiService ListGroupTargetsForRole", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string
		var roleId string

		resp, httpRes, err := apiClient.RoleTargetApi.ListGroupTargetsForRole(context.Background(), userId, roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RoleTargetApiService UnassignAppInstanceTargetFromAdminRoleForUser", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string
		var roleId string
		var appName string
		var applicationId string

		resp, httpRes, err := apiClient.RoleTargetApi.UnassignAppInstanceTargetFromAdminRoleForUser(context.Background(), userId, roleId, appName, applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RoleTargetApiService UnassignAppInstanceTargetToAppAdminRoleForGroup", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var groupId string
		var roleId string
		var appName string
		var applicationId string

		resp, httpRes, err := apiClient.RoleTargetApi.UnassignAppInstanceTargetToAppAdminRoleForGroup(context.Background(), groupId, roleId, appName, applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RoleTargetApiService UnassignAppTargetFromAppAdminRoleForUser", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string
		var roleId string
		var appName string

		resp, httpRes, err := apiClient.RoleTargetApi.UnassignAppTargetFromAppAdminRoleForUser(context.Background(), userId, roleId, appName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RoleTargetApiService UnassignAppTargetToAdminRoleForGroup", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var groupId string
		var roleId string
		var appName string

		resp, httpRes, err := apiClient.RoleTargetApi.UnassignAppTargetToAdminRoleForGroup(context.Background(), groupId, roleId, appName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RoleTargetApiService UnassignGroupTargetFromGroupAdminRole", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var groupId string
		var roleId string
		var targetGroupId string

		resp, httpRes, err := apiClient.RoleTargetApi.UnassignGroupTargetFromGroupAdminRole(context.Background(), groupId, roleId, targetGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RoleTargetApiService UnassignGroupTargetFromUserAdminRole", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string
		var roleId string
		var groupId string

		resp, httpRes, err := apiClient.RoleTargetApi.UnassignGroupTargetFromUserAdminRole(context.Background(), userId, roleId, groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
