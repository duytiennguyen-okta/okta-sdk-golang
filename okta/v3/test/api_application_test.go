/*
Okta Admin Management

Testing ApplicationApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"testing"

	openapiclient "./openapi"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_okta_ApplicationApiService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ApplicationApiService ActivateApplication", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appId string

		resp, httpRes, err := apiClient.ApplicationApi.ActivateApplication(context.Background(), appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ApplicationApiService ActivateDefaultProvisioningConnectionForApplication", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appId string

		resp, httpRes, err := apiClient.ApplicationApi.ActivateDefaultProvisioningConnectionForApplication(context.Background(), appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ApplicationApiService AssignApplicationPolicy", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appId string
		var policyId string

		resp, httpRes, err := apiClient.ApplicationApi.AssignApplicationPolicy(context.Background(), appId, policyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ApplicationApiService AssignGroupToApplication", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appId string
		var groupId string

		resp, httpRes, err := apiClient.ApplicationApi.AssignGroupToApplication(context.Background(), appId, groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ApplicationApiService AssignUserToApplication", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appId string

		resp, httpRes, err := apiClient.ApplicationApi.AssignUserToApplication(context.Background(), appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ApplicationApiService CloneApplicationKey", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appId string
		var keyId string

		resp, httpRes, err := apiClient.ApplicationApi.CloneApplicationKey(context.Background(), appId, keyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ApplicationApiService CreateApplication", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ApplicationApi.CreateApplication(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ApplicationApiService DeactivateApplication", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appId string

		resp, httpRes, err := apiClient.ApplicationApi.DeactivateApplication(context.Background(), appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ApplicationApiService DeactivateDefaultProvisioningConnectionForApplication", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appId string

		resp, httpRes, err := apiClient.ApplicationApi.DeactivateDefaultProvisioningConnectionForApplication(context.Background(), appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ApplicationApiService DeleteApplication", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appId string

		resp, httpRes, err := apiClient.ApplicationApi.DeleteApplication(context.Background(), appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ApplicationApiService GenerateApplicationKey", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appId string

		resp, httpRes, err := apiClient.ApplicationApi.GenerateApplicationKey(context.Background(), appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ApplicationApiService GenerateCsrForApplication", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appId string

		resp, httpRes, err := apiClient.ApplicationApi.GenerateCsrForApplication(context.Background(), appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ApplicationApiService GetApplication", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appId string

		resp, httpRes, err := apiClient.ApplicationApi.GetApplication(context.Background(), appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ApplicationApiService GetApplicationGroupAssignment", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appId string
		var groupId string

		resp, httpRes, err := apiClient.ApplicationApi.GetApplicationGroupAssignment(context.Background(), appId, groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ApplicationApiService GetApplicationKey", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appId string
		var keyId string

		resp, httpRes, err := apiClient.ApplicationApi.GetApplicationKey(context.Background(), appId, keyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ApplicationApiService GetApplicationUser", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appId string
		var userId string

		resp, httpRes, err := apiClient.ApplicationApi.GetApplicationUser(context.Background(), appId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ApplicationApiService GetCsrForApplication", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appId string
		var csrId string

		resp, httpRes, err := apiClient.ApplicationApi.GetCsrForApplication(context.Background(), appId, csrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ApplicationApiService GetDefaultProvisioningConnectionForApplication", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appId string

		resp, httpRes, err := apiClient.ApplicationApi.GetDefaultProvisioningConnectionForApplication(context.Background(), appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ApplicationApiService GetFeatureForApplication", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appId string
		var name string

		resp, httpRes, err := apiClient.ApplicationApi.GetFeatureForApplication(context.Background(), appId, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ApplicationApiService GetOAuth2TokenForApplication", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appId string
		var tokenId string

		resp, httpRes, err := apiClient.ApplicationApi.GetOAuth2TokenForApplication(context.Background(), appId, tokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ApplicationApiService GetScopeConsentGrant", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appId string
		var grantId string

		resp, httpRes, err := apiClient.ApplicationApi.GetScopeConsentGrant(context.Background(), appId, grantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ApplicationApiService GrantConsentToScope", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appId string

		resp, httpRes, err := apiClient.ApplicationApi.GrantConsentToScope(context.Background(), appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ApplicationApiService ListApplicationGroupAssignments", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appId string

		resp, httpRes, err := apiClient.ApplicationApi.ListApplicationGroupAssignments(context.Background(), appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ApplicationApiService ListApplicationKeys", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appId string

		resp, httpRes, err := apiClient.ApplicationApi.ListApplicationKeys(context.Background(), appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ApplicationApiService ListApplicationUsers", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appId string

		resp, httpRes, err := apiClient.ApplicationApi.ListApplicationUsers(context.Background(), appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ApplicationApiService ListApplications", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ApplicationApi.ListApplications(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ApplicationApiService ListCsrsForApplication", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appId string

		resp, httpRes, err := apiClient.ApplicationApi.ListCsrsForApplication(context.Background(), appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ApplicationApiService ListFeaturesForApplication", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appId string

		resp, httpRes, err := apiClient.ApplicationApi.ListFeaturesForApplication(context.Background(), appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ApplicationApiService ListOAuth2TokensForApplication", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appId string

		resp, httpRes, err := apiClient.ApplicationApi.ListOAuth2TokensForApplication(context.Background(), appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ApplicationApiService ListScopeConsentGrants", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appId string

		resp, httpRes, err := apiClient.ApplicationApi.ListScopeConsentGrants(context.Background(), appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ApplicationApiService PublishCsrFromApplication", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appId string
		var csrId string

		resp, httpRes, err := apiClient.ApplicationApi.PublishCsrFromApplication(context.Background(), appId, csrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ApplicationApiService ReplaceApplication", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appId string

		resp, httpRes, err := apiClient.ApplicationApi.ReplaceApplication(context.Background(), appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ApplicationApiService RevokeCsrFromApplication", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appId string
		var csrId string

		resp, httpRes, err := apiClient.ApplicationApi.RevokeCsrFromApplication(context.Background(), appId, csrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ApplicationApiService RevokeOAuth2TokenForApplication", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appId string
		var tokenId string

		resp, httpRes, err := apiClient.ApplicationApi.RevokeOAuth2TokenForApplication(context.Background(), appId, tokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ApplicationApiService RevokeOAuth2TokensForApplication", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appId string

		resp, httpRes, err := apiClient.ApplicationApi.RevokeOAuth2TokensForApplication(context.Background(), appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ApplicationApiService RevokeScopeConsentGrant", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appId string
		var grantId string

		resp, httpRes, err := apiClient.ApplicationApi.RevokeScopeConsentGrant(context.Background(), appId, grantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ApplicationApiService UnassignApplicationFromGroup", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appId string
		var groupId string

		resp, httpRes, err := apiClient.ApplicationApi.UnassignApplicationFromGroup(context.Background(), appId, groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ApplicationApiService UnassignUserFromApplication", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appId string
		var userId string

		resp, httpRes, err := apiClient.ApplicationApi.UnassignUserFromApplication(context.Background(), appId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ApplicationApiService UpdateApplicationUser", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appId string
		var userId string

		resp, httpRes, err := apiClient.ApplicationApi.UpdateApplicationUser(context.Background(), appId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ApplicationApiService UpdateDefaultProvisioningConnectionForApplication", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appId string

		resp, httpRes, err := apiClient.ApplicationApi.UpdateDefaultProvisioningConnectionForApplication(context.Background(), appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ApplicationApiService UpdateFeatureForApplication", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appId string
		var name string

		resp, httpRes, err := apiClient.ApplicationApi.UpdateFeatureForApplication(context.Background(), appId, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ApplicationApiService UploadApplicationLogo", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var appId string

		resp, httpRes, err := apiClient.ApplicationApi.UploadApplicationLogo(context.Background(), appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
