/*
Okta Admin Management

Testing AuthorizationServerApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"testing"

	openapiclient "./openapi"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_okta_AuthorizationServerApiService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AuthorizationServerApiService ActivateAuthorizationServer", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authServerId string

		resp, httpRes, err := apiClient.AuthorizationServerApi.ActivateAuthorizationServer(context.Background(), authServerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthorizationServerApiService ActivateAuthorizationServerPolicy", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authServerId string
		var policyId string

		resp, httpRes, err := apiClient.AuthorizationServerApi.ActivateAuthorizationServerPolicy(context.Background(), authServerId, policyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthorizationServerApiService ActivateAuthorizationServerPolicyRule", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authServerId string
		var policyId string
		var ruleId string

		resp, httpRes, err := apiClient.AuthorizationServerApi.ActivateAuthorizationServerPolicyRule(context.Background(), authServerId, policyId, ruleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthorizationServerApiService CreateAuthorizationServer", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AuthorizationServerApi.CreateAuthorizationServer(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthorizationServerApiService CreateAuthorizationServerPolicy", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authServerId string

		resp, httpRes, err := apiClient.AuthorizationServerApi.CreateAuthorizationServerPolicy(context.Background(), authServerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthorizationServerApiService CreateAuthorizationServerPolicyRule", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var policyId string
		var authServerId string

		resp, httpRes, err := apiClient.AuthorizationServerApi.CreateAuthorizationServerPolicyRule(context.Background(), policyId, authServerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthorizationServerApiService CreateOAuth2Claim", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authServerId string

		resp, httpRes, err := apiClient.AuthorizationServerApi.CreateOAuth2Claim(context.Background(), authServerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthorizationServerApiService CreateOAuth2Scope", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authServerId string

		resp, httpRes, err := apiClient.AuthorizationServerApi.CreateOAuth2Scope(context.Background(), authServerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthorizationServerApiService DeactivateAuthorizationServer", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authServerId string

		resp, httpRes, err := apiClient.AuthorizationServerApi.DeactivateAuthorizationServer(context.Background(), authServerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthorizationServerApiService DeactivateAuthorizationServerPolicy", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authServerId string
		var policyId string

		resp, httpRes, err := apiClient.AuthorizationServerApi.DeactivateAuthorizationServerPolicy(context.Background(), authServerId, policyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthorizationServerApiService DeactivateAuthorizationServerPolicyRule", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authServerId string
		var policyId string
		var ruleId string

		resp, httpRes, err := apiClient.AuthorizationServerApi.DeactivateAuthorizationServerPolicyRule(context.Background(), authServerId, policyId, ruleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthorizationServerApiService DeleteAuthorizationServer", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authServerId string

		resp, httpRes, err := apiClient.AuthorizationServerApi.DeleteAuthorizationServer(context.Background(), authServerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthorizationServerApiService DeleteAuthorizationServerPolicy", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authServerId string
		var policyId string

		resp, httpRes, err := apiClient.AuthorizationServerApi.DeleteAuthorizationServerPolicy(context.Background(), authServerId, policyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthorizationServerApiService DeleteAuthorizationServerPolicyRule", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var policyId string
		var authServerId string
		var ruleId string

		resp, httpRes, err := apiClient.AuthorizationServerApi.DeleteAuthorizationServerPolicyRule(context.Background(), policyId, authServerId, ruleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthorizationServerApiService DeleteOAuth2Claim", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authServerId string
		var claimId string

		resp, httpRes, err := apiClient.AuthorizationServerApi.DeleteOAuth2Claim(context.Background(), authServerId, claimId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthorizationServerApiService DeleteOAuth2Scope", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authServerId string
		var scopeId string

		resp, httpRes, err := apiClient.AuthorizationServerApi.DeleteOAuth2Scope(context.Background(), authServerId, scopeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthorizationServerApiService GetAuthorizationServer", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authServerId string

		resp, httpRes, err := apiClient.AuthorizationServerApi.GetAuthorizationServer(context.Background(), authServerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthorizationServerApiService GetAuthorizationServerPolicy", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authServerId string
		var policyId string

		resp, httpRes, err := apiClient.AuthorizationServerApi.GetAuthorizationServerPolicy(context.Background(), authServerId, policyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthorizationServerApiService GetAuthorizationServerPolicyRule", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var policyId string
		var authServerId string
		var ruleId string

		resp, httpRes, err := apiClient.AuthorizationServerApi.GetAuthorizationServerPolicyRule(context.Background(), policyId, authServerId, ruleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthorizationServerApiService GetOAuth2Claim", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authServerId string
		var claimId string

		resp, httpRes, err := apiClient.AuthorizationServerApi.GetOAuth2Claim(context.Background(), authServerId, claimId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthorizationServerApiService GetOAuth2Scope", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authServerId string
		var scopeId string

		resp, httpRes, err := apiClient.AuthorizationServerApi.GetOAuth2Scope(context.Background(), authServerId, scopeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthorizationServerApiService GetRefreshTokenForAuthorizationServerAndClient", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authServerId string
		var clientId string
		var tokenId string

		resp, httpRes, err := apiClient.AuthorizationServerApi.GetRefreshTokenForAuthorizationServerAndClient(context.Background(), authServerId, clientId, tokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthorizationServerApiService ListAuthorizationServerKeys", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authServerId string

		resp, httpRes, err := apiClient.AuthorizationServerApi.ListAuthorizationServerKeys(context.Background(), authServerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthorizationServerApiService ListAuthorizationServerPolicies", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authServerId string

		resp, httpRes, err := apiClient.AuthorizationServerApi.ListAuthorizationServerPolicies(context.Background(), authServerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthorizationServerApiService ListAuthorizationServerPolicyRules", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var policyId string
		var authServerId string

		resp, httpRes, err := apiClient.AuthorizationServerApi.ListAuthorizationServerPolicyRules(context.Background(), policyId, authServerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthorizationServerApiService ListAuthorizationServers", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AuthorizationServerApi.ListAuthorizationServers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthorizationServerApiService ListOAuth2Claims", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authServerId string

		resp, httpRes, err := apiClient.AuthorizationServerApi.ListOAuth2Claims(context.Background(), authServerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthorizationServerApiService ListOAuth2ClientsForAuthorizationServer", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authServerId string

		resp, httpRes, err := apiClient.AuthorizationServerApi.ListOAuth2ClientsForAuthorizationServer(context.Background(), authServerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthorizationServerApiService ListOAuth2Scopes", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authServerId string

		resp, httpRes, err := apiClient.AuthorizationServerApi.ListOAuth2Scopes(context.Background(), authServerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthorizationServerApiService ListRefreshTokensForAuthorizationServerAndClient", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authServerId string
		var clientId string

		resp, httpRes, err := apiClient.AuthorizationServerApi.ListRefreshTokensForAuthorizationServerAndClient(context.Background(), authServerId, clientId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthorizationServerApiService ReplaceAuthorizationServer", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authServerId string

		resp, httpRes, err := apiClient.AuthorizationServerApi.ReplaceAuthorizationServer(context.Background(), authServerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthorizationServerApiService ReplaceAuthorizationServerPolicy", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authServerId string
		var policyId string

		resp, httpRes, err := apiClient.AuthorizationServerApi.ReplaceAuthorizationServerPolicy(context.Background(), authServerId, policyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthorizationServerApiService ReplaceAuthorizationServerPolicyRule", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var policyId string
		var authServerId string
		var ruleId string

		resp, httpRes, err := apiClient.AuthorizationServerApi.ReplaceAuthorizationServerPolicyRule(context.Background(), policyId, authServerId, ruleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthorizationServerApiService ReplaceOAuth2Claim", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authServerId string
		var claimId string

		resp, httpRes, err := apiClient.AuthorizationServerApi.ReplaceOAuth2Claim(context.Background(), authServerId, claimId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthorizationServerApiService ReplaceOAuth2Scope", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authServerId string
		var scopeId string

		resp, httpRes, err := apiClient.AuthorizationServerApi.ReplaceOAuth2Scope(context.Background(), authServerId, scopeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthorizationServerApiService RevokeRefreshTokenForAuthorizationServerAndClient", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authServerId string
		var clientId string
		var tokenId string

		resp, httpRes, err := apiClient.AuthorizationServerApi.RevokeRefreshTokenForAuthorizationServerAndClient(context.Background(), authServerId, clientId, tokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthorizationServerApiService RevokeRefreshTokensForAuthorizationServerAndClient", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authServerId string
		var clientId string

		resp, httpRes, err := apiClient.AuthorizationServerApi.RevokeRefreshTokensForAuthorizationServerAndClient(context.Background(), authServerId, clientId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthorizationServerApiService RotateAuthorizationServerKeys", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authServerId string

		resp, httpRes, err := apiClient.AuthorizationServerApi.RotateAuthorizationServerKeys(context.Background(), authServerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
