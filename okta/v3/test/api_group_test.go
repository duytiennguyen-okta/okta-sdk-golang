/*
Okta Admin Management

Testing GroupApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"testing"

	openapiclient "./openapi"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_okta_GroupApiService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test GroupApiService ActivateGroupRule", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var ruleId string

		resp, httpRes, err := apiClient.GroupApi.ActivateGroupRule(context.Background(), ruleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test GroupApiService AssignGroupOwner", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GroupApi.AssignGroupOwner(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test GroupApiService AssignUserToGroup", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var groupId string
		var userId string

		resp, httpRes, err := apiClient.GroupApi.AssignUserToGroup(context.Background(), groupId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test GroupApiService CreateGroup", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.GroupApi.CreateGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test GroupApiService CreateGroupRule", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.GroupApi.CreateGroupRule(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test GroupApiService DeactivateGroupRule", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var ruleId string

		resp, httpRes, err := apiClient.GroupApi.DeactivateGroupRule(context.Background(), ruleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test GroupApiService DeleteGroup", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GroupApi.DeleteGroup(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test GroupApiService DeleteGroupOwner", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var groupId string
		var ownerId string

		resp, httpRes, err := apiClient.GroupApi.DeleteGroupOwner(context.Background(), groupId, ownerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test GroupApiService DeleteGroupRule", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var ruleId string

		resp, httpRes, err := apiClient.GroupApi.DeleteGroupRule(context.Background(), ruleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test GroupApiService GetGroup", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GroupApi.GetGroup(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test GroupApiService GetGroupRule", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var ruleId string

		resp, httpRes, err := apiClient.GroupApi.GetGroupRule(context.Background(), ruleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test GroupApiService ListAssignedApplicationsForGroup", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GroupApi.ListAssignedApplicationsForGroup(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test GroupApiService ListGroupOwners", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GroupApi.ListGroupOwners(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test GroupApiService ListGroupRules", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.GroupApi.ListGroupRules(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test GroupApiService ListGroupUsers", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GroupApi.ListGroupUsers(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test GroupApiService ListGroups", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.GroupApi.ListGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test GroupApiService ReplaceGroup", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GroupApi.ReplaceGroup(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test GroupApiService ReplaceGroupRule", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var ruleId string

		resp, httpRes, err := apiClient.GroupApi.ReplaceGroupRule(context.Background(), ruleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test GroupApiService UnassignUserFromGroup", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var groupId string
		var userId string

		resp, httpRes, err := apiClient.GroupApi.UnassignUserFromGroup(context.Background(), groupId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
