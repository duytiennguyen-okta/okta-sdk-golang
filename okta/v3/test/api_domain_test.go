/*
Okta Admin Management

Testing DomainApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"testing"

	openapiclient "./openapi"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_okta_DomainApiService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DomainApiService CreateDomain", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DomainApi.CreateDomain(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test DomainApiService DeleteDomain", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var domainId string

		resp, httpRes, err := apiClient.DomainApi.DeleteDomain(context.Background(), domainId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test DomainApiService GetDomain", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var domainId string

		resp, httpRes, err := apiClient.DomainApi.GetDomain(context.Background(), domainId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test DomainApiService ListDomains", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DomainApi.ListDomains(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test DomainApiService ReplaceDomain", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var domainId string

		resp, httpRes, err := apiClient.DomainApi.ReplaceDomain(context.Background(), domainId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test DomainApiService UpsertCertificate", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var domainId string

		resp, httpRes, err := apiClient.DomainApi.UpsertCertificate(context.Background(), domainId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test DomainApiService VerifyDomain", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var domainId string

		resp, httpRes, err := apiClient.DomainApi.VerifyDomain(context.Background(), domainId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
