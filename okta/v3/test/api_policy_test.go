/*
Okta Admin Management

Testing PolicyApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"testing"

	openapiclient "./openapi"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_okta_PolicyApiService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PolicyApiService ActivatePolicy", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var policyId string

		resp, httpRes, err := apiClient.PolicyApi.ActivatePolicy(context.Background(), policyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test PolicyApiService ActivatePolicyRule", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var policyId string
		var ruleId string

		resp, httpRes, err := apiClient.PolicyApi.ActivatePolicyRule(context.Background(), policyId, ruleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test PolicyApiService ClonePolicy", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var policyId string

		resp, httpRes, err := apiClient.PolicyApi.ClonePolicy(context.Background(), policyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test PolicyApiService CreatePolicy", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PolicyApi.CreatePolicy(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test PolicyApiService CreatePolicyRule", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var policyId string

		resp, httpRes, err := apiClient.PolicyApi.CreatePolicyRule(context.Background(), policyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test PolicyApiService DeactivatePolicy", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var policyId string

		resp, httpRes, err := apiClient.PolicyApi.DeactivatePolicy(context.Background(), policyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test PolicyApiService DeactivatePolicyRule", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var policyId string
		var ruleId string

		resp, httpRes, err := apiClient.PolicyApi.DeactivatePolicyRule(context.Background(), policyId, ruleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test PolicyApiService DeletePolicy", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var policyId string

		resp, httpRes, err := apiClient.PolicyApi.DeletePolicy(context.Background(), policyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test PolicyApiService DeletePolicyRule", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var policyId string
		var ruleId string

		resp, httpRes, err := apiClient.PolicyApi.DeletePolicyRule(context.Background(), policyId, ruleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test PolicyApiService GetPolicy", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var policyId string

		resp, httpRes, err := apiClient.PolicyApi.GetPolicy(context.Background(), policyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test PolicyApiService GetPolicyRule", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var policyId string
		var ruleId string

		resp, httpRes, err := apiClient.PolicyApi.GetPolicyRule(context.Background(), policyId, ruleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test PolicyApiService ListPolicies", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PolicyApi.ListPolicies(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test PolicyApiService ListPolicyRules", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var policyId string

		resp, httpRes, err := apiClient.PolicyApi.ListPolicyRules(context.Background(), policyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test PolicyApiService ReplacePolicy", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var policyId string

		resp, httpRes, err := apiClient.PolicyApi.ReplacePolicy(context.Background(), policyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test PolicyApiService ReplacePolicyRule", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var policyId string
		var ruleId string

		resp, httpRes, err := apiClient.PolicyApi.ReplacePolicyRule(context.Background(), policyId, ruleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
