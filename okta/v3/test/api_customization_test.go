/*
Okta Admin Management

Testing CustomizationApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"testing"

	openapiclient "./openapi"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_okta_CustomizationApiService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CustomizationApiService CreateBrand", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CustomizationApi.CreateBrand(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService CreateEmailCustomization", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string
		var templateName string

		resp, httpRes, err := apiClient.CustomizationApi.CreateEmailCustomization(context.Background(), brandId, templateName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService DeleteAllCustomizations", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string
		var templateName string

		resp, httpRes, err := apiClient.CustomizationApi.DeleteAllCustomizations(context.Background(), brandId, templateName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService DeleteBrand", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string

		resp, httpRes, err := apiClient.CustomizationApi.DeleteBrand(context.Background(), brandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService DeleteBrandThemeBackgroundImage", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string
		var themeId string

		resp, httpRes, err := apiClient.CustomizationApi.DeleteBrandThemeBackgroundImage(context.Background(), brandId, themeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService DeleteBrandThemeFavicon", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string
		var themeId string

		resp, httpRes, err := apiClient.CustomizationApi.DeleteBrandThemeFavicon(context.Background(), brandId, themeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService DeleteBrandThemeLogo", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string
		var themeId string

		resp, httpRes, err := apiClient.CustomizationApi.DeleteBrandThemeLogo(context.Background(), brandId, themeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService DeleteEmailCustomization", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string
		var templateName string
		var customizationId string

		resp, httpRes, err := apiClient.CustomizationApi.DeleteEmailCustomization(context.Background(), brandId, templateName, customizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService GetBrand", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string

		resp, httpRes, err := apiClient.CustomizationApi.GetBrand(context.Background(), brandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService GetBrandTheme", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string
		var themeId string

		resp, httpRes, err := apiClient.CustomizationApi.GetBrandTheme(context.Background(), brandId, themeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService GetCustomizationPreview", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string
		var templateName string
		var customizationId string

		resp, httpRes, err := apiClient.CustomizationApi.GetCustomizationPreview(context.Background(), brandId, templateName, customizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService GetCustomizedErrorPage", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string

		resp, httpRes, err := apiClient.CustomizationApi.GetCustomizedErrorPage(context.Background(), brandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService GetCustomizedSignInPage", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string

		resp, httpRes, err := apiClient.CustomizationApi.GetCustomizedSignInPage(context.Background(), brandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService GetDefaultErrorPage", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string

		resp, httpRes, err := apiClient.CustomizationApi.GetDefaultErrorPage(context.Background(), brandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService GetDefaultSignInPage", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string

		resp, httpRes, err := apiClient.CustomizationApi.GetDefaultSignInPage(context.Background(), brandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService GetEmailCustomization", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string
		var templateName string
		var customizationId string

		resp, httpRes, err := apiClient.CustomizationApi.GetEmailCustomization(context.Background(), brandId, templateName, customizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService GetEmailDefaultContent", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string
		var templateName string

		resp, httpRes, err := apiClient.CustomizationApi.GetEmailDefaultContent(context.Background(), brandId, templateName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService GetEmailDefaultPreview", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string
		var templateName string

		resp, httpRes, err := apiClient.CustomizationApi.GetEmailDefaultPreview(context.Background(), brandId, templateName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService GetEmailSettings", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string
		var templateName string

		resp, httpRes, err := apiClient.CustomizationApi.GetEmailSettings(context.Background(), brandId, templateName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService GetEmailTemplate", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string
		var templateName string

		resp, httpRes, err := apiClient.CustomizationApi.GetEmailTemplate(context.Background(), brandId, templateName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService GetErrorPage", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string

		resp, httpRes, err := apiClient.CustomizationApi.GetErrorPage(context.Background(), brandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService GetPreviewErrorPage", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string

		resp, httpRes, err := apiClient.CustomizationApi.GetPreviewErrorPage(context.Background(), brandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService GetPreviewSignInPage", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string

		resp, httpRes, err := apiClient.CustomizationApi.GetPreviewSignInPage(context.Background(), brandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService GetSignInPage", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string

		resp, httpRes, err := apiClient.CustomizationApi.GetSignInPage(context.Background(), brandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService GetSignOutPageSettings", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string

		resp, httpRes, err := apiClient.CustomizationApi.GetSignOutPageSettings(context.Background(), brandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService LinkBrandDomain", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string

		resp, httpRes, err := apiClient.CustomizationApi.LinkBrandDomain(context.Background(), brandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService ListAllSignInWidgetVersions", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string

		resp, httpRes, err := apiClient.CustomizationApi.ListAllSignInWidgetVersions(context.Background(), brandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService ListBrandDomains", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string

		resp, httpRes, err := apiClient.CustomizationApi.ListBrandDomains(context.Background(), brandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService ListBrandThemes", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string

		resp, httpRes, err := apiClient.CustomizationApi.ListBrandThemes(context.Background(), brandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService ListBrands", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CustomizationApi.ListBrands(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService ListEmailCustomizations", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string
		var templateName string

		resp, httpRes, err := apiClient.CustomizationApi.ListEmailCustomizations(context.Background(), brandId, templateName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService ListEmailTemplates", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string

		resp, httpRes, err := apiClient.CustomizationApi.ListEmailTemplates(context.Background(), brandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService ReplaceBrand", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string

		resp, httpRes, err := apiClient.CustomizationApi.ReplaceBrand(context.Background(), brandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService ReplaceBrandTheme", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string
		var themeId string

		resp, httpRes, err := apiClient.CustomizationApi.ReplaceBrandTheme(context.Background(), brandId, themeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService ReplaceCustomizedErrorPage", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string

		resp, httpRes, err := apiClient.CustomizationApi.ReplaceCustomizedErrorPage(context.Background(), brandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService ReplaceCustomizedSignInPage", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string

		resp, httpRes, err := apiClient.CustomizationApi.ReplaceCustomizedSignInPage(context.Background(), brandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService ReplaceEmailCustomization", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string
		var templateName string
		var customizationId string

		resp, httpRes, err := apiClient.CustomizationApi.ReplaceEmailCustomization(context.Background(), brandId, templateName, customizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService ReplaceEmailSettings", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string
		var templateName string

		resp, httpRes, err := apiClient.CustomizationApi.ReplaceEmailSettings(context.Background(), brandId, templateName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService ReplacePreviewErrorPage", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string

		resp, httpRes, err := apiClient.CustomizationApi.ReplacePreviewErrorPage(context.Background(), brandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService ReplacePreviewSignInPage", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string

		resp, httpRes, err := apiClient.CustomizationApi.ReplacePreviewSignInPage(context.Background(), brandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService ReplaceSignOutPageSettings", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string

		resp, httpRes, err := apiClient.CustomizationApi.ReplaceSignOutPageSettings(context.Background(), brandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService ResetCustomizedErrorPage", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string

		resp, httpRes, err := apiClient.CustomizationApi.ResetCustomizedErrorPage(context.Background(), brandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService ResetCustomizedSignInPage", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string

		resp, httpRes, err := apiClient.CustomizationApi.ResetCustomizedSignInPage(context.Background(), brandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService ResetPreviewErrorPage", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string

		resp, httpRes, err := apiClient.CustomizationApi.ResetPreviewErrorPage(context.Background(), brandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService ResetPreviewSignInPage", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string

		resp, httpRes, err := apiClient.CustomizationApi.ResetPreviewSignInPage(context.Background(), brandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService SendTestEmail", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string
		var templateName string

		resp, httpRes, err := apiClient.CustomizationApi.SendTestEmail(context.Background(), brandId, templateName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService UnlinkBrandDomain", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string
		var domainId string

		resp, httpRes, err := apiClient.CustomizationApi.UnlinkBrandDomain(context.Background(), brandId, domainId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService UploadBrandThemeBackgroundImage", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string
		var themeId string

		resp, httpRes, err := apiClient.CustomizationApi.UploadBrandThemeBackgroundImage(context.Background(), brandId, themeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService UploadBrandThemeFavicon", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string
		var themeId string

		resp, httpRes, err := apiClient.CustomizationApi.UploadBrandThemeFavicon(context.Background(), brandId, themeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CustomizationApiService UploadBrandThemeLogo", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var brandId string
		var themeId string

		resp, httpRes, err := apiClient.CustomizationApi.UploadBrandThemeLogo(context.Background(), brandId, themeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
