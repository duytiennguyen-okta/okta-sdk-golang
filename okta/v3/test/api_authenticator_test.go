/*
Okta Admin Management

Testing AuthenticatorApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"testing"

	openapiclient "./openapi"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_okta_AuthenticatorApiService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AuthenticatorApiService ActivateAuthenticator", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authenticatorId string

		resp, httpRes, err := apiClient.AuthenticatorApi.ActivateAuthenticator(context.Background(), authenticatorId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthenticatorApiService CreateAuthenticator", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AuthenticatorApi.CreateAuthenticator(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthenticatorApiService DeactivateAuthenticator", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authenticatorId string

		resp, httpRes, err := apiClient.AuthenticatorApi.DeactivateAuthenticator(context.Background(), authenticatorId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthenticatorApiService GetAuthenticator", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authenticatorId string

		resp, httpRes, err := apiClient.AuthenticatorApi.GetAuthenticator(context.Background(), authenticatorId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthenticatorApiService ListAuthenticators", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AuthenticatorApi.ListAuthenticators(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthenticatorApiService ReplaceAuthenticator", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authenticatorId string

		resp, httpRes, err := apiClient.AuthenticatorApi.ReplaceAuthenticator(context.Background(), authenticatorId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
