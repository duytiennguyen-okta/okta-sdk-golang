/*
Okta Admin Management

Testing RoleAssignmentApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okta

import (
	"context"
	"testing"

	openapiclient "./openapi"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_okta_RoleAssignmentApiService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RoleAssignmentApiService AssignRoleToGroup", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.RoleAssignmentApi.AssignRoleToGroup(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RoleAssignmentApiService AssignRoleToUser", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.RoleAssignmentApi.AssignRoleToUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RoleAssignmentApiService GetGroupAssignedRole", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var groupId string
		var roleId string

		resp, httpRes, err := apiClient.RoleAssignmentApi.GetGroupAssignedRole(context.Background(), groupId, roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RoleAssignmentApiService GetUserAssignedRole", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string
		var roleId string

		resp, httpRes, err := apiClient.RoleAssignmentApi.GetUserAssignedRole(context.Background(), userId, roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RoleAssignmentApiService ListAssignedRolesForUser", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.RoleAssignmentApi.ListAssignedRolesForUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RoleAssignmentApiService ListGroupAssignedRoles", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.RoleAssignmentApi.ListGroupAssignedRoles(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RoleAssignmentApiService UnassignRoleFromGroup", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var groupId string
		var roleId string

		resp, httpRes, err := apiClient.RoleAssignmentApi.UnassignRoleFromGroup(context.Background(), groupId, roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RoleAssignmentApiService UnassignRoleFromUser", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string
		var roleId string

		resp, httpRes, err := apiClient.RoleAssignmentApi.UnassignRoleFromUser(context.Background(), userId, roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
