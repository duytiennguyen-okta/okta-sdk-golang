/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// PolicyRuleAuthContextType the model 'PolicyRuleAuthContextType'
type PolicyRuleAuthContextType string

// List of PolicyRuleAuthContextType
const (
	POLICYRULEAUTHCONTEXTTYPE_ANY    PolicyRuleAuthContextType = "ANY"
	POLICYRULEAUTHCONTEXTTYPE_RADIUS PolicyRuleAuthContextType = "RADIUS"
)

// All allowed values of PolicyRuleAuthContextType enum
var AllowedPolicyRuleAuthContextTypeEnumValues = []PolicyRuleAuthContextType{
	"ANY",
	"RADIUS",
}

func (v *PolicyRuleAuthContextType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PolicyRuleAuthContextType(value)
	for _, existing := range AllowedPolicyRuleAuthContextTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PolicyRuleAuthContextType", value)
}

// NewPolicyRuleAuthContextTypeFromValue returns a pointer to a valid PolicyRuleAuthContextType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPolicyRuleAuthContextTypeFromValue(v string) (*PolicyRuleAuthContextType, error) {
	ev := PolicyRuleAuthContextType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PolicyRuleAuthContextType: valid values are %v", v, AllowedPolicyRuleAuthContextTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PolicyRuleAuthContextType) IsValid() bool {
	for _, existing := range AllowedPolicyRuleAuthContextTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PolicyRuleAuthContextType value
func (v PolicyRuleAuthContextType) Ptr() *PolicyRuleAuthContextType {
	return &v
}

type NullablePolicyRuleAuthContextType struct {
	value *PolicyRuleAuthContextType
	isSet bool
}

func (v NullablePolicyRuleAuthContextType) Get() *PolicyRuleAuthContextType {
	return v.value
}

func (v *NullablePolicyRuleAuthContextType) Set(val *PolicyRuleAuthContextType) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyRuleAuthContextType) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyRuleAuthContextType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyRuleAuthContextType(val *PolicyRuleAuthContextType) *NullablePolicyRuleAuthContextType {
	return &NullablePolicyRuleAuthContextType{value: val, isSet: true}
}

func (v NullablePolicyRuleAuthContextType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyRuleAuthContextType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
