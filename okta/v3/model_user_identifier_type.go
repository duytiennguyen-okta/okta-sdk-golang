/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// UserIdentifierType the model 'UserIdentifierType'
type UserIdentifierType string

// List of UserIdentifierType
const (
	USERIDENTIFIERTYPE_ATTRIBUTE  UserIdentifierType = "ATTRIBUTE"
	USERIDENTIFIERTYPE_IDENTIFIER UserIdentifierType = "IDENTIFIER"
)

// All allowed values of UserIdentifierType enum
var AllowedUserIdentifierTypeEnumValues = []UserIdentifierType{
	"ATTRIBUTE",
	"IDENTIFIER",
}

func (v *UserIdentifierType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UserIdentifierType(value)
	for _, existing := range AllowedUserIdentifierTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UserIdentifierType", value)
}

// NewUserIdentifierTypeFromValue returns a pointer to a valid UserIdentifierType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserIdentifierTypeFromValue(v string) (*UserIdentifierType, error) {
	ev := UserIdentifierType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UserIdentifierType: valid values are %v", v, AllowedUserIdentifierTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserIdentifierType) IsValid() bool {
	for _, existing := range AllowedUserIdentifierTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UserIdentifierType value
func (v UserIdentifierType) Ptr() *UserIdentifierType {
	return &v
}

type NullableUserIdentifierType struct {
	value *UserIdentifierType
	isSet bool
}

func (v NullableUserIdentifierType) Get() *UserIdentifierType {
	return v.value
}

func (v *NullableUserIdentifierType) Set(val *UserIdentifierType) {
	v.value = val
	v.isSet = true
}

func (v NullableUserIdentifierType) IsSet() bool {
	return v.isSet
}

func (v *NullableUserIdentifierType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserIdentifierType(val *UserIdentifierType) *NullableUserIdentifierType {
	return &NullableUserIdentifierType{value: val, isSet: true}
}

func (v NullableUserIdentifierType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserIdentifierType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
