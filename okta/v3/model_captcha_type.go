/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// CAPTCHAType the model 'CAPTCHAType'
type CAPTCHAType string

// List of CAPTCHAType
const (
	CAPTCHATYPE_HCAPTCHA     CAPTCHAType = "HCAPTCHA"
	CAPTCHATYPE_RECAPTCHA_V2 CAPTCHAType = "RECAPTCHA_V2"
)

// All allowed values of CAPTCHAType enum
var AllowedCAPTCHATypeEnumValues = []CAPTCHAType{
	"HCAPTCHA",
	"RECAPTCHA_V2",
}

func (v *CAPTCHAType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CAPTCHAType(value)
	for _, existing := range AllowedCAPTCHATypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CAPTCHAType", value)
}

// NewCAPTCHATypeFromValue returns a pointer to a valid CAPTCHAType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCAPTCHATypeFromValue(v string) (*CAPTCHAType, error) {
	ev := CAPTCHAType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CAPTCHAType: valid values are %v", v, AllowedCAPTCHATypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CAPTCHAType) IsValid() bool {
	for _, existing := range AllowedCAPTCHATypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CAPTCHAType value
func (v CAPTCHAType) Ptr() *CAPTCHAType {
	return &v
}

type NullableCAPTCHAType struct {
	value *CAPTCHAType
	isSet bool
}

func (v NullableCAPTCHAType) Get() *CAPTCHAType {
	return v.value
}

func (v *NullableCAPTCHAType) Set(val *CAPTCHAType) {
	v.value = val
	v.isSet = true
}

func (v NullableCAPTCHAType) IsSet() bool {
	return v.isSet
}

func (v *NullableCAPTCHAType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCAPTCHAType(val *CAPTCHAType) *NullableCAPTCHAType {
	return &NullableCAPTCHAType{value: val, isSet: true}
}

func (v NullableCAPTCHAType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCAPTCHAType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
