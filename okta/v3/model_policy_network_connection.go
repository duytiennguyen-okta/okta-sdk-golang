/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// PolicyNetworkConnection the model 'PolicyNetworkConnection'
type PolicyNetworkConnection string

// List of PolicyNetworkConnection
const (
	POLICYNETWORKCONNECTION_ANYWHERE PolicyNetworkConnection = "ANYWHERE"
	POLICYNETWORKCONNECTION_ZONE     PolicyNetworkConnection = "ZONE"
)

// All allowed values of PolicyNetworkConnection enum
var AllowedPolicyNetworkConnectionEnumValues = []PolicyNetworkConnection{
	"ANYWHERE",
	"ZONE",
}

func (v *PolicyNetworkConnection) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PolicyNetworkConnection(value)
	for _, existing := range AllowedPolicyNetworkConnectionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PolicyNetworkConnection", value)
}

// NewPolicyNetworkConnectionFromValue returns a pointer to a valid PolicyNetworkConnection
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPolicyNetworkConnectionFromValue(v string) (*PolicyNetworkConnection, error) {
	ev := PolicyNetworkConnection(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PolicyNetworkConnection: valid values are %v", v, AllowedPolicyNetworkConnectionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PolicyNetworkConnection) IsValid() bool {
	for _, existing := range AllowedPolicyNetworkConnectionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PolicyNetworkConnection value
func (v PolicyNetworkConnection) Ptr() *PolicyNetworkConnection {
	return &v
}

type NullablePolicyNetworkConnection struct {
	value *PolicyNetworkConnection
	isSet bool
}

func (v NullablePolicyNetworkConnection) Get() *PolicyNetworkConnection {
	return v.value
}

func (v *NullablePolicyNetworkConnection) Set(val *PolicyNetworkConnection) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyNetworkConnection) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyNetworkConnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyNetworkConnection(val *PolicyNetworkConnection) *NullablePolicyNetworkConnection {
	return &NullablePolicyNetworkConnection{value: val, isSet: true}
}

func (v NullablePolicyNetworkConnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyNetworkConnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
