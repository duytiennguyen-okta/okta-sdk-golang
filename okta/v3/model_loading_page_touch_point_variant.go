/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// LoadingPageTouchPointVariant the model 'LoadingPageTouchPointVariant'
type LoadingPageTouchPointVariant string

// List of LoadingPageTouchPointVariant
const (
	LOADINGPAGETOUCHPOINTVARIANT_NONE         LoadingPageTouchPointVariant = "NONE"
	LOADINGPAGETOUCHPOINTVARIANT_OKTA_DEFAULT LoadingPageTouchPointVariant = "OKTA_DEFAULT"
)

// All allowed values of LoadingPageTouchPointVariant enum
var AllowedLoadingPageTouchPointVariantEnumValues = []LoadingPageTouchPointVariant{
	"NONE",
	"OKTA_DEFAULT",
}

func (v *LoadingPageTouchPointVariant) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LoadingPageTouchPointVariant(value)
	for _, existing := range AllowedLoadingPageTouchPointVariantEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LoadingPageTouchPointVariant", value)
}

// NewLoadingPageTouchPointVariantFromValue returns a pointer to a valid LoadingPageTouchPointVariant
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLoadingPageTouchPointVariantFromValue(v string) (*LoadingPageTouchPointVariant, error) {
	ev := LoadingPageTouchPointVariant(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LoadingPageTouchPointVariant: valid values are %v", v, AllowedLoadingPageTouchPointVariantEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LoadingPageTouchPointVariant) IsValid() bool {
	for _, existing := range AllowedLoadingPageTouchPointVariantEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LoadingPageTouchPointVariant value
func (v LoadingPageTouchPointVariant) Ptr() *LoadingPageTouchPointVariant {
	return &v
}

type NullableLoadingPageTouchPointVariant struct {
	value *LoadingPageTouchPointVariant
	isSet bool
}

func (v NullableLoadingPageTouchPointVariant) Get() *LoadingPageTouchPointVariant {
	return v.value
}

func (v *NullableLoadingPageTouchPointVariant) Set(val *LoadingPageTouchPointVariant) {
	v.value = val
	v.isSet = true
}

func (v NullableLoadingPageTouchPointVariant) IsSet() bool {
	return v.isSet
}

func (v *NullableLoadingPageTouchPointVariant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoadingPageTouchPointVariant(val *LoadingPageTouchPointVariant) *NullableLoadingPageTouchPointVariant {
	return &NullableLoadingPageTouchPointVariant{value: val, isSet: true}
}

func (v NullableLoadingPageTouchPointVariant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoadingPageTouchPointVariant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
