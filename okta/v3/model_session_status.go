/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// SessionStatus the model 'SessionStatus'
type SessionStatus string

// List of SessionStatus
const (
	SESSIONSTATUS_ACTIVE       SessionStatus = "ACTIVE"
	SESSIONSTATUS_MFA_ENROLL   SessionStatus = "MFA_ENROLL"
	SESSIONSTATUS_MFA_REQUIRED SessionStatus = "MFA_REQUIRED"
)

// All allowed values of SessionStatus enum
var AllowedSessionStatusEnumValues = []SessionStatus{
	"ACTIVE",
	"MFA_ENROLL",
	"MFA_REQUIRED",
}

func (v *SessionStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SessionStatus(value)
	for _, existing := range AllowedSessionStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SessionStatus", value)
}

// NewSessionStatusFromValue returns a pointer to a valid SessionStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSessionStatusFromValue(v string) (*SessionStatus, error) {
	ev := SessionStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SessionStatus: valid values are %v", v, AllowedSessionStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SessionStatus) IsValid() bool {
	for _, existing := range AllowedSessionStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SessionStatus value
func (v SessionStatus) Ptr() *SessionStatus {
	return &v
}

type NullableSessionStatus struct {
	value *SessionStatus
	isSet bool
}

func (v NullableSessionStatus) Get() *SessionStatus {
	return v.value
}

func (v *NullableSessionStatus) Set(val *SessionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSessionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSessionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSessionStatus(val *SessionStatus) *NullableSessionStatus {
	return &NullableSessionStatus{value: val, isSet: true}
}

func (v NullableSessionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSessionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
