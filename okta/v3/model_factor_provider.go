/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// FactorProvider the model 'FactorProvider'
type FactorProvider string

// List of FactorProvider
const (
	FACTORPROVIDER_CUSTOM   FactorProvider = "CUSTOM"
	FACTORPROVIDER_DUO      FactorProvider = "DUO"
	FACTORPROVIDER_FIDO     FactorProvider = "FIDO"
	FACTORPROVIDER_GOOGLE   FactorProvider = "GOOGLE"
	FACTORPROVIDER_OKTA     FactorProvider = "OKTA"
	FACTORPROVIDER_RSA      FactorProvider = "RSA"
	FACTORPROVIDER_SYMANTEC FactorProvider = "SYMANTEC"
	FACTORPROVIDER_YUBICO   FactorProvider = "YUBICO"
)

// All allowed values of FactorProvider enum
var AllowedFactorProviderEnumValues = []FactorProvider{
	"CUSTOM",
	"DUO",
	"FIDO",
	"GOOGLE",
	"OKTA",
	"RSA",
	"SYMANTEC",
	"YUBICO",
}

func (v *FactorProvider) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FactorProvider(value)
	for _, existing := range AllowedFactorProviderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FactorProvider", value)
}

// NewFactorProviderFromValue returns a pointer to a valid FactorProvider
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFactorProviderFromValue(v string) (*FactorProvider, error) {
	ev := FactorProvider(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FactorProvider: valid values are %v", v, AllowedFactorProviderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FactorProvider) IsValid() bool {
	for _, existing := range AllowedFactorProviderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FactorProvider value
func (v FactorProvider) Ptr() *FactorProvider {
	return &v
}

type NullableFactorProvider struct {
	value *FactorProvider
	isSet bool
}

func (v NullableFactorProvider) Get() *FactorProvider {
	return v.value
}

func (v *NullableFactorProvider) Set(val *FactorProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableFactorProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableFactorProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFactorProvider(val *FactorProvider) *NullableFactorProvider {
	return &NullableFactorProvider{value: val, isSet: true}
}

func (v NullableFactorProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFactorProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
