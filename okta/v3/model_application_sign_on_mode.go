/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// ApplicationSignOnMode the model 'ApplicationSignOnMode'
type ApplicationSignOnMode string

// List of ApplicationSignOnMode
const (
	APPLICATIONSIGNONMODE_AUTO_LOGIN            ApplicationSignOnMode = "AUTO_LOGIN"
	APPLICATIONSIGNONMODE_BASIC_AUTH            ApplicationSignOnMode = "BASIC_AUTH"
	APPLICATIONSIGNONMODE_BOOKMARK              ApplicationSignOnMode = "BOOKMARK"
	APPLICATIONSIGNONMODE_BROWSER_PLUGIN        ApplicationSignOnMode = "BROWSER_PLUGIN"
	APPLICATIONSIGNONMODE_OPENID_CONNECT        ApplicationSignOnMode = "OPENID_CONNECT"
	APPLICATIONSIGNONMODE_SAML_1_1              ApplicationSignOnMode = "SAML_1_1"
	APPLICATIONSIGNONMODE_SAML_2_0              ApplicationSignOnMode = "SAML_2_0"
	APPLICATIONSIGNONMODE_SECURE_PASSWORD_STORE ApplicationSignOnMode = "SECURE_PASSWORD_STORE"
	APPLICATIONSIGNONMODE_WS_FEDERATION         ApplicationSignOnMode = "WS_FEDERATION"
)

// All allowed values of ApplicationSignOnMode enum
var AllowedApplicationSignOnModeEnumValues = []ApplicationSignOnMode{
	"AUTO_LOGIN",
	"BASIC_AUTH",
	"BOOKMARK",
	"BROWSER_PLUGIN",
	"OPENID_CONNECT",
	"SAML_1_1",
	"SAML_2_0",
	"SECURE_PASSWORD_STORE",
	"WS_FEDERATION",
}

func (v *ApplicationSignOnMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ApplicationSignOnMode(value)
	for _, existing := range AllowedApplicationSignOnModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ApplicationSignOnMode", value)
}

// NewApplicationSignOnModeFromValue returns a pointer to a valid ApplicationSignOnMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewApplicationSignOnModeFromValue(v string) (*ApplicationSignOnMode, error) {
	ev := ApplicationSignOnMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApplicationSignOnMode: valid values are %v", v, AllowedApplicationSignOnModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ApplicationSignOnMode) IsValid() bool {
	for _, existing := range AllowedApplicationSignOnModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ApplicationSignOnMode value
func (v ApplicationSignOnMode) Ptr() *ApplicationSignOnMode {
	return &v
}

type NullableApplicationSignOnMode struct {
	value *ApplicationSignOnMode
	isSet bool
}

func (v NullableApplicationSignOnMode) Get() *ApplicationSignOnMode {
	return v.value
}

func (v *NullableApplicationSignOnMode) Set(val *ApplicationSignOnMode) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationSignOnMode) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationSignOnMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationSignOnMode(val *ApplicationSignOnMode) *NullableApplicationSignOnMode {
	return &NullableApplicationSignOnMode{value: val, isSet: true}
}

func (v NullableApplicationSignOnMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationSignOnMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
