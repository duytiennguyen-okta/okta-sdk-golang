/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// FactorStatus the model 'FactorStatus'
type FactorStatus string

// List of FactorStatus
const (
	FACTORSTATUS_ACTIVE             FactorStatus = "ACTIVE"
	FACTORSTATUS_DISABLED           FactorStatus = "DISABLED"
	FACTORSTATUS_ENROLLED           FactorStatus = "ENROLLED"
	FACTORSTATUS_EXPIRED            FactorStatus = "EXPIRED"
	FACTORSTATUS_INACTIVE           FactorStatus = "INACTIVE"
	FACTORSTATUS_NOT_SETUP          FactorStatus = "NOT_SETUP"
	FACTORSTATUS_PENDING_ACTIVATION FactorStatus = "PENDING_ACTIVATION"
)

// All allowed values of FactorStatus enum
var AllowedFactorStatusEnumValues = []FactorStatus{
	"ACTIVE",
	"DISABLED",
	"ENROLLED",
	"EXPIRED",
	"INACTIVE",
	"NOT_SETUP",
	"PENDING_ACTIVATION",
}

func (v *FactorStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FactorStatus(value)
	for _, existing := range AllowedFactorStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FactorStatus", value)
}

// NewFactorStatusFromValue returns a pointer to a valid FactorStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFactorStatusFromValue(v string) (*FactorStatus, error) {
	ev := FactorStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FactorStatus: valid values are %v", v, AllowedFactorStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FactorStatus) IsValid() bool {
	for _, existing := range AllowedFactorStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FactorStatus value
func (v FactorStatus) Ptr() *FactorStatus {
	return &v
}

type NullableFactorStatus struct {
	value *FactorStatus
	isSet bool
}

func (v NullableFactorStatus) Get() *FactorStatus {
	return v.value
}

func (v *NullableFactorStatus) Set(val *FactorStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableFactorStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableFactorStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFactorStatus(val *FactorStatus) *NullableFactorStatus {
	return &NullableFactorStatus{value: val, isSet: true}
}

func (v NullableFactorStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFactorStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
