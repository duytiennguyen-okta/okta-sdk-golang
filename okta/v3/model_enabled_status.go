/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// EnabledStatus the model 'EnabledStatus'
type EnabledStatus string

// List of EnabledStatus
const (
	ENABLEDSTATUS_DISABLED EnabledStatus = "DISABLED"
	ENABLEDSTATUS_ENABLED  EnabledStatus = "ENABLED"
)

// All allowed values of EnabledStatus enum
var AllowedEnabledStatusEnumValues = []EnabledStatus{
	"DISABLED",
	"ENABLED",
}

func (v *EnabledStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnabledStatus(value)
	for _, existing := range AllowedEnabledStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnabledStatus", value)
}

// NewEnabledStatusFromValue returns a pointer to a valid EnabledStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnabledStatusFromValue(v string) (*EnabledStatus, error) {
	ev := EnabledStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnabledStatus: valid values are %v", v, AllowedEnabledStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnabledStatus) IsValid() bool {
	for _, existing := range AllowedEnabledStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnabledStatus value
func (v EnabledStatus) Ptr() *EnabledStatus {
	return &v
}

type NullableEnabledStatus struct {
	value *EnabledStatus
	isSet bool
}

func (v NullableEnabledStatus) Get() *EnabledStatus {
	return v.value
}

func (v *NullableEnabledStatus) Set(val *EnabledStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableEnabledStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableEnabledStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnabledStatus(val *EnabledStatus) *NullableEnabledStatus {
	return &NullableEnabledStatus{value: val, isSet: true}
}

func (v NullableEnabledStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnabledStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
