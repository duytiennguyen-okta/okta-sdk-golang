/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// OAuth2ScopeMetadataPublish the model 'OAuth2ScopeMetadataPublish'
type OAuth2ScopeMetadataPublish string

// List of OAuth2ScopeMetadataPublish
const (
	OAUTH2SCOPEMETADATAPUBLISH_ALL_CLIENTS OAuth2ScopeMetadataPublish = "ALL_CLIENTS"
	OAUTH2SCOPEMETADATAPUBLISH_NO_CLIENTS  OAuth2ScopeMetadataPublish = "NO_CLIENTS"
)

// All allowed values of OAuth2ScopeMetadataPublish enum
var AllowedOAuth2ScopeMetadataPublishEnumValues = []OAuth2ScopeMetadataPublish{
	"ALL_CLIENTS",
	"NO_CLIENTS",
}

func (v *OAuth2ScopeMetadataPublish) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OAuth2ScopeMetadataPublish(value)
	for _, existing := range AllowedOAuth2ScopeMetadataPublishEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OAuth2ScopeMetadataPublish", value)
}

// NewOAuth2ScopeMetadataPublishFromValue returns a pointer to a valid OAuth2ScopeMetadataPublish
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOAuth2ScopeMetadataPublishFromValue(v string) (*OAuth2ScopeMetadataPublish, error) {
	ev := OAuth2ScopeMetadataPublish(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OAuth2ScopeMetadataPublish: valid values are %v", v, AllowedOAuth2ScopeMetadataPublishEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OAuth2ScopeMetadataPublish) IsValid() bool {
	for _, existing := range AllowedOAuth2ScopeMetadataPublishEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OAuth2ScopeMetadataPublish value
func (v OAuth2ScopeMetadataPublish) Ptr() *OAuth2ScopeMetadataPublish {
	return &v
}

type NullableOAuth2ScopeMetadataPublish struct {
	value *OAuth2ScopeMetadataPublish
	isSet bool
}

func (v NullableOAuth2ScopeMetadataPublish) Get() *OAuth2ScopeMetadataPublish {
	return v.value
}

func (v *NullableOAuth2ScopeMetadataPublish) Set(val *OAuth2ScopeMetadataPublish) {
	v.value = val
	v.isSet = true
}

func (v NullableOAuth2ScopeMetadataPublish) IsSet() bool {
	return v.isSet
}

func (v *NullableOAuth2ScopeMetadataPublish) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOAuth2ScopeMetadataPublish(val *OAuth2ScopeMetadataPublish) *NullableOAuth2ScopeMetadataPublish {
	return &NullableOAuth2ScopeMetadataPublish{value: val, isSet: true}
}

func (v NullableOAuth2ScopeMetadataPublish) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOAuth2ScopeMetadataPublish) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
