/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// ProtocolType the model 'ProtocolType'
type ProtocolType string

// List of ProtocolType
const (
	PROTOCOLTYPE_MTLS   ProtocolType = "MTLS"
	PROTOCOLTYPE_OAUTH2 ProtocolType = "OAUTH2"
	PROTOCOLTYPE_OIDC   ProtocolType = "OIDC"
	PROTOCOLTYPE_SAML2  ProtocolType = "SAML2"
)

// All allowed values of ProtocolType enum
var AllowedProtocolTypeEnumValues = []ProtocolType{
	"MTLS",
	"OAUTH2",
	"OIDC",
	"SAML2",
}

func (v *ProtocolType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProtocolType(value)
	for _, existing := range AllowedProtocolTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProtocolType", value)
}

// NewProtocolTypeFromValue returns a pointer to a valid ProtocolType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProtocolTypeFromValue(v string) (*ProtocolType, error) {
	ev := ProtocolType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProtocolType: valid values are %v", v, AllowedProtocolTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProtocolType) IsValid() bool {
	for _, existing := range AllowedProtocolTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProtocolType value
func (v ProtocolType) Ptr() *ProtocolType {
	return &v
}

type NullableProtocolType struct {
	value *ProtocolType
	isSet bool
}

func (v NullableProtocolType) Get() *ProtocolType {
	return v.value
}

func (v *NullableProtocolType) Set(val *ProtocolType) {
	v.value = val
	v.isSet = true
}

func (v NullableProtocolType) IsSet() bool {
	return v.isSet
}

func (v *NullableProtocolType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtocolType(val *ProtocolType) *NullableProtocolType {
	return &NullableProtocolType{value: val, isSet: true}
}

func (v NullableProtocolType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtocolType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
