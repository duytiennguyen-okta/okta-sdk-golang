/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// InlineHookType the model 'InlineHookType'
type InlineHookType string

// List of InlineHookType
const (
	INLINEHOOKTYPE_IMPORT_TRANSFORM                InlineHookType = "com.okta.import.transform"
	INLINEHOOKTYPE_OAUTH2_TOKENS_TRANSFORM         InlineHookType = "com.okta.oauth2.tokens.transform"
	INLINEHOOKTYPE_SAML_TOKENS_TRANSFORM           InlineHookType = "com.okta.saml.tokens.transform"
	INLINEHOOKTYPE_USER_CREDENTIAL_PASSWORD_IMPORT InlineHookType = "com.okta.user.credential.password.import"
	INLINEHOOKTYPE_USER_PRE_REGISTRATION           InlineHookType = "com.okta.user.pre-registration"
)

// All allowed values of InlineHookType enum
var AllowedInlineHookTypeEnumValues = []InlineHookType{
	"com.okta.import.transform",
	"com.okta.oauth2.tokens.transform",
	"com.okta.saml.tokens.transform",
	"com.okta.user.credential.password.import",
	"com.okta.user.pre-registration",
}

func (v *InlineHookType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InlineHookType(value)
	for _, existing := range AllowedInlineHookTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InlineHookType", value)
}

// NewInlineHookTypeFromValue returns a pointer to a valid InlineHookType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInlineHookTypeFromValue(v string) (*InlineHookType, error) {
	ev := InlineHookType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InlineHookType: valid values are %v", v, AllowedInlineHookTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InlineHookType) IsValid() bool {
	for _, existing := range AllowedInlineHookTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InlineHookType value
func (v InlineHookType) Ptr() *InlineHookType {
	return &v
}

type NullableInlineHookType struct {
	value *InlineHookType
	isSet bool
}

func (v NullableInlineHookType) Get() *InlineHookType {
	return v.value
}

func (v *NullableInlineHookType) Set(val *InlineHookType) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineHookType) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineHookType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineHookType(val *InlineHookType) *NullableInlineHookType {
	return &NullableInlineHookType{value: val, isSet: true}
}

func (v NullableInlineHookType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineHookType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
