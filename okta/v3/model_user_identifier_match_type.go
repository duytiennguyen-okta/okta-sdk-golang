/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// UserIdentifierMatchType the model 'UserIdentifierMatchType'
type UserIdentifierMatchType string

// List of UserIdentifierMatchType
const (
	USERIDENTIFIERMATCHTYPE_CONTAINS    UserIdentifierMatchType = "CONTAINS"
	USERIDENTIFIERMATCHTYPE_EQUALS      UserIdentifierMatchType = "EQUALS"
	USERIDENTIFIERMATCHTYPE_EXPRESSION  UserIdentifierMatchType = "EXPRESSION"
	USERIDENTIFIERMATCHTYPE_STARTS_WITH UserIdentifierMatchType = "STARTS_WITH"
	USERIDENTIFIERMATCHTYPE_SUFFIX      UserIdentifierMatchType = "SUFFIX"
)

// All allowed values of UserIdentifierMatchType enum
var AllowedUserIdentifierMatchTypeEnumValues = []UserIdentifierMatchType{
	"CONTAINS",
	"EQUALS",
	"EXPRESSION",
	"STARTS_WITH",
	"SUFFIX",
}

func (v *UserIdentifierMatchType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UserIdentifierMatchType(value)
	for _, existing := range AllowedUserIdentifierMatchTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UserIdentifierMatchType", value)
}

// NewUserIdentifierMatchTypeFromValue returns a pointer to a valid UserIdentifierMatchType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserIdentifierMatchTypeFromValue(v string) (*UserIdentifierMatchType, error) {
	ev := UserIdentifierMatchType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UserIdentifierMatchType: valid values are %v", v, AllowedUserIdentifierMatchTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserIdentifierMatchType) IsValid() bool {
	for _, existing := range AllowedUserIdentifierMatchTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UserIdentifierMatchType value
func (v UserIdentifierMatchType) Ptr() *UserIdentifierMatchType {
	return &v
}

type NullableUserIdentifierMatchType struct {
	value *UserIdentifierMatchType
	isSet bool
}

func (v NullableUserIdentifierMatchType) Get() *UserIdentifierMatchType {
	return v.value
}

func (v *NullableUserIdentifierMatchType) Set(val *UserIdentifierMatchType) {
	v.value = val
	v.isSet = true
}

func (v NullableUserIdentifierMatchType) IsSet() bool {
	return v.isSet
}

func (v *NullableUserIdentifierMatchType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserIdentifierMatchType(val *UserIdentifierMatchType) *NullableUserIdentifierMatchType {
	return &NullableUserIdentifierMatchType{value: val, isSet: true}
}

func (v NullableUserIdentifierMatchType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserIdentifierMatchType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
