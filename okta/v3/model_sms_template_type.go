/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// SmsTemplateType the model 'SmsTemplateType'
type SmsTemplateType string

// List of SmsTemplateType
const (
	SMSTEMPLATETYPE_SMS_VERIFY_CODE SmsTemplateType = "SMS_VERIFY_CODE"
)

// All allowed values of SmsTemplateType enum
var AllowedSmsTemplateTypeEnumValues = []SmsTemplateType{
	"SMS_VERIFY_CODE",
}

func (v *SmsTemplateType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SmsTemplateType(value)
	for _, existing := range AllowedSmsTemplateTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SmsTemplateType", value)
}

// NewSmsTemplateTypeFromValue returns a pointer to a valid SmsTemplateType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSmsTemplateTypeFromValue(v string) (*SmsTemplateType, error) {
	ev := SmsTemplateType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SmsTemplateType: valid values are %v", v, AllowedSmsTemplateTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SmsTemplateType) IsValid() bool {
	for _, existing := range AllowedSmsTemplateTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SmsTemplateType value
func (v SmsTemplateType) Ptr() *SmsTemplateType {
	return &v
}

type NullableSmsTemplateType struct {
	value *SmsTemplateType
	isSet bool
}

func (v NullableSmsTemplateType) Get() *SmsTemplateType {
	return v.value
}

func (v *NullableSmsTemplateType) Set(val *SmsTemplateType) {
	v.value = val
	v.isSet = true
}

func (v NullableSmsTemplateType) IsSet() bool {
	return v.isSet
}

func (v *NullableSmsTemplateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmsTemplateType(val *SmsTemplateType) *NullableSmsTemplateType {
	return &NullableSmsTemplateType{value: val, isSet: true}
}

func (v NullableSmsTemplateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmsTemplateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
