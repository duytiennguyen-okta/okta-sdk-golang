/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// AgentUpdateJobStatus Overall state for the auto-update job from admin perspective
type AgentUpdateJobStatus string

// List of AgentUpdateJobStatus
const (
	AGENTUPDATEJOBSTATUS_CANCELLED   AgentUpdateJobStatus = "Cancelled"
	AGENTUPDATEJOBSTATUS_FAILED      AgentUpdateJobStatus = "Failed"
	AGENTUPDATEJOBSTATUS_IN_PROGRESS AgentUpdateJobStatus = "InProgress"
	AGENTUPDATEJOBSTATUS_PAUSED      AgentUpdateJobStatus = "Paused"
	AGENTUPDATEJOBSTATUS_SCHEDULED   AgentUpdateJobStatus = "Scheduled"
	AGENTUPDATEJOBSTATUS_SUCCESS     AgentUpdateJobStatus = "Success"
)

// All allowed values of AgentUpdateJobStatus enum
var AllowedAgentUpdateJobStatusEnumValues = []AgentUpdateJobStatus{
	"Cancelled",
	"Failed",
	"InProgress",
	"Paused",
	"Scheduled",
	"Success",
}

func (v *AgentUpdateJobStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AgentUpdateJobStatus(value)
	for _, existing := range AllowedAgentUpdateJobStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AgentUpdateJobStatus", value)
}

// NewAgentUpdateJobStatusFromValue returns a pointer to a valid AgentUpdateJobStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAgentUpdateJobStatusFromValue(v string) (*AgentUpdateJobStatus, error) {
	ev := AgentUpdateJobStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AgentUpdateJobStatus: valid values are %v", v, AllowedAgentUpdateJobStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AgentUpdateJobStatus) IsValid() bool {
	for _, existing := range AllowedAgentUpdateJobStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AgentUpdateJobStatus value
func (v AgentUpdateJobStatus) Ptr() *AgentUpdateJobStatus {
	return &v
}

type NullableAgentUpdateJobStatus struct {
	value *AgentUpdateJobStatus
	isSet bool
}

func (v NullableAgentUpdateJobStatus) Get() *AgentUpdateJobStatus {
	return v.value
}

func (v *NullableAgentUpdateJobStatus) Set(val *AgentUpdateJobStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableAgentUpdateJobStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableAgentUpdateJobStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgentUpdateJobStatus(val *AgentUpdateJobStatus) *NullableAgentUpdateJobStatus {
	return &NullableAgentUpdateJobStatus{value: val, isSet: true}
}

func (v NullableAgentUpdateJobStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgentUpdateJobStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
