openapi: 3.0.3
info:
  contact:
    email: devex-public@okta.com
    name: Okta Developer Team
    url: https://developer.okta.com/
  description: Allows customers to easily access the Okta Management APIs
  license:
    name: Apache-2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://developer.okta.com/terms/
  title: Okta Admin Management
  version: 4.0.0
  x-logo:
    url: logo.svg
    backgroundColor: transparent
    altText: Okta Developer
externalDocs:
  description: Find more info here
  url: https://developer.okta.com/docs/api/getting_started/design_principles.html
servers:
- url: "https://{yourOktaDomain}"
  variables:
    yourOktaDomain:
      default: subdomain.okta.com
      description: "The domain of your organization. This can be a provided subdomain\
        \ of an official okta domain (okta.com, oktapreview.com, etc) or one of your\
        \ configured custom domains."
tags:
- description: The Agent Pools API provides operation to manage the update settings
    of the agents for your organization.
  name: AgentPools
  x-displayName: Agent Pools
- description: The API Tokens API provides operations to manage SSWS API tokens for
    your organization.
  name: ApiToken
  x-displayName: API Tokens
- description: The Applications API provides operations to manage applications and/or
    assignments to users or groups for your organization.
  name: Application
  x-displayName: Applications
- description: The Attack Protection API provides operations to configure the User
    Lockout Settings in your org to prevent brute-force attacks.
  name: AttackProtection
  x-displayName: Attack Protection
- description: "The Authenticators Administration API provides operations to configure\
    \ which Authenticators are available to end users for use when signing in to applications.\n\
    \nEnd users are required to use one or more Authenticators depending on the security\
    \ requirements of the authentication policy.\n\nOkta Identity Engine currently\
    \ supports Authenticators for the following factors:\n\n**Knowledge-based:**\n\
    \n* Password\n* Security Question\n\n**Possession-based:**\n\n* Phone (SMS, Voice\
    \ Call)\n* Email\n* WebAuthn\n* Duo\n* Custom App <ea>Early Access</ea>"
  name: Authenticator
  x-displayName: Authenticators
- description: "Authorization Servers generate OAuth 2.0 and OpenID Connect tokens,\
    \ including access tokens and ID tokens. The Okta Management API gives you the\
    \ ability to configure and manage Authorization Servers and the security policies\
    \ that are attached to them."
  name: AuthorizationServer
  x-displayName: Authorization Servers
- description: The Behavior Rules API provides operations to manage the behavior detection
    rules for your organization.
  name: Behavior
  x-displayName: Behavior Rules
- description: "As an option to increase org security, Okta supports CAPTCHA services\
    \ to prevent automated sign-in attempts. You can integrate one of two providers:\
    \ [hCaptcha](https://www.hcaptcha.com/) or [reCAPTCHA v2](https://developers.google.com/recaptcha/docs/invisible).\n\
    \nThe vendor implementations supported by Okta are both invisible. They each run\
    \ risk-analysis software in the background during user sign in to determine the\
    \ likelihood that the user is a bot. This risk analysis is based on the settings\
    \ that you configure with the provider that you choose.\n\nBefore you configure\
    \ your org to use CAPTCHA, sign in to the vendor of your choice or sign up for\
    \ an account. For more details, refer to [CAPTCHA integration](https://help.okta.com/okta_help.htm?type=oie&id=csh-captcha)."
  name: CAPTCHA
  x-displayName: CAPTCHAs
- description: "The Brands API allows you to customize the look and feel of pages\
    \ and templates, such as the Okta-hosted sign-in page, error pages, email templates,\
    \ and the Okta End-User Dashboard.\n\nEach org starts off with Okta's default\
    \ branding. You can upload your own assets (colors, background image, logo, and\
    \ favicon) to replace Okta's default brand assets. You can then publish these\
    \ assets directly to your pages and templates.\n\n>**Important:** Despite being\
    \ called the Brands API (due to conventions around REST API naming), each org\
    \ can currently contain only one brand and one theme. We will likely allow multiple\
    \ brands and themes per org at some point in the future, so stay tuned!"
  name: Customization
  x-displayName: Customizations
- description: "The Okta Devices API provides a centralized integration platform to\
    \ fetch and manage device information. Okta administrators can use these APIs\
    \ to manage workforce identity Device object information.\n\nThe Devices API supports\
    \ the following **Device Operations**:\n* Get, Delete Device objects.\n* Perform\
    \ lifecycle transitions on the Device objects.\n\nThe Devices API supports the\
    \ following **Authorization Schemes**:\n* SSWS - [API tokens](https://developer.okta.com/docs/reference/core-okta-api/#authentication)\n\
    * Bearer - [OAuth2.0 and OpenID Connect](https://developer.okta.com/docs/concepts/oauth-openid/)\n\
    \n> **Note:** For devices to enroll in Okta and show up in the Devices API, the\
    \ following actions are required:\n> 1. Admins - Enable Okta FastPass. See [Enable\
    \ FastPass](https://help.okta.com/okta_help.htm?type=oie&id=ext-fp-enable)\n>\
    \ 2. End users with existing mobile Okta Verify enrollments - After you upgrade\
    \ your org to Okta Identity Engine, direct end users with existing Okta Verify\
    \ enrollments to use [FastPass](https://help.okta.com/okta_help.htm?type=oie&id=csh-fp-main).\n\
    \n> End users with a new enrollment in Okta Verify on an Okta Identity Engine\
    \ org have a device record created in the device inventory by default.\nSee [Device\
    \ Registration](https://help.okta.com/okta_help.htm?type=oie&id=csh-device-registration),\
    \ [Login Using Okta Verify](https://help.okta.com/okta_help.htm?type=eu&id=ext-ov-user-overview)."
  name: Device
  x-displayName: Devices
- description: The Device Assurance Policies API provides operations to manage device
    assurance policies in your organization.
  name: DeviceAssurance
  x-displayName: Device Assurance Policies
- description: The Domains API provides operations to manage custom domains for your
    organization.
  name: Domain
  x-displayName: Domains
- description: The Email Domains API provides operations to manage custom domains
    for your organization.
  name: EmailDomain
  x-displayName: Email Domains
- description: "The Event Hooks API provides operations to manage event hooks for\
    \ your organization.\n\nFor general information on event hooks and how to create\
    \ and use them, see [Event hooks](https://developer.okta.com/docs/concepts/event-hooks/).\
    \ The following documentation is only for the management API, which provides a\
    \ CRUD interface for registering event hooks.\n\nFor a step-by-step guide on implementing\
    \ an example event hook, see the [Event hook](https://developer.okta.com/docs/guides/event-hook-implementation/)\
    \ guide."
  name: EventHook
  x-displayName: Event Hooks
- description: "The Okta Features API provides operations to manage self-service Early\
    \ Access (EA) and Beta features in your org.\n\n> **Note:** Important background\
    \ information for this API is available on the [Feature Lifecycle Management](https://developer.okta.com/docs/concepts/feature-lifecycle-management/)\
    \ page."
  name: Feature
  x-displayName: Features
- description: The Groups API provides operations to manage Okta Groups and their
    user members for your organization.
  name: Group
  x-displayName: Groups
- description: The Hook Keys API provides operations to manage hook keys for your
    organization.
  name: HookKey
  x-displayName: Hook Keys
- description: "The Identity Providers API provides operations to manage federations\
    \ with external Identity Providers (IdP). For example, your app can support signing\
    \ in with credentials from Apple, Facebook, Google, LinkedIn, Microsoft, an enterprise\
    \ IdP using SAML 2.0, or an IdP using the OpenID Connect (`OIDC`) protocol."
  name: IdentityProvider
  x-displayName: Identity Providers
- description: The Okta Identity Source API provides a mechanism to synchronize an
    HR source (the custom identity source) with Okta user profiles in an org.
  name: IdentitySource
  x-displayName: Identity Sources
- description: "The Inline Hooks API provides operations to manage inline hooks for\
    \ your organization.\n\nFor general information on inline hooks and how to create\
    \ and use them, see [inline hooks](https://developer.okta.com/docs/concepts/inline-hooks/).\
    \ The following documentation is only for the management API, which provides a\
    \ CRUD interface for registering inline hooks."
  name: InlineHook
  x-displayName: Inline Hooks
- description: "Users have relationships to each other, like manager and subordinate\
    \ or customer and sales representative. You can create users with relationships\
    \ by using the Linked Objects API to represent the relationship.\n\n1. Create\
    \ a Linked Object definition such as Manager:Subordinate or Case Worker:Client.\
    \ These pairs are represented by a `primary` attribute and an `associated` attribute.\n\
    2. Link users together to create the relationship between the two. You create\
    \ a Linked Object value with a single request that links one `primary` and one\
    \ `associated` user.\n\nFor each relationship:\n\n* A user has at most one `primary`\
    \ link (a user has a single manager), but can have many `associated` links (a\
    \ user can have many subordinates).\n* A user can be the `primary` in one relationship\
    \ and the `associated` in another.\n* A user can be both the `primary` and `associated`\
    \ in the same relationship.\n\nOkta Expression Language function for [Linked Objects](https://developer.okta.com/docs/reference/okta-expression-language/#linked-object-function)\
    \ provides access to the details about a linked user.\n\n> **Note:** The Linked\
    \ Objects feature isn't available for OpenID Connect claims.\n\n## Example usage\n\
    \nOkta allows you to create up to 200 Linked Object definitions. These definitions\
    \ are one-to-many, for example:\n\n* A manager has many subordinates. Each subordinate\
    \ has one manager.\n* A sales representative has many customers. Each customer\
    \ has one sales rep.\n* A case worker has many clients. Each client has one case\
    \ worker.\n\nMost organizations have more than one manager or sales representative.\
    \ You can create the Linked Object definition once, and then assign the `primary`\
    \ relationship to as many users as you have people in that relationship.\n\nYou\
    \ can assign the `associated` relationship for a single `primary` user to as many\
    \ users as needed. The `associated` user can be related to only one `primary`\
    \ per Linked Object definition. But a user can be assigned to more than one Linked\
    \ Object definition.\n\nFor example, assume that you've created one Linked Object\
    \ definition for manager (`primary`) and for subordinates (`associated`):\n\n\
    * Joe is Frank's manager.\n* Bob is Joe's manager, but Jane's subordinate.\n*\
    \ Jane is the CEO, so she reports to herself.\n\nThus, you can create chains of\
    \ relationships (Jane > Bob > Joe > Frank) or terminal relationships (Jane is\
    \ both `primary` and `associated` user).\n\nThen, if you create another Linked\
    \ Object relationship for scrum team membership, you could assign relationships\
    \ to the same four users:\n\n* Bob is the scrum lead for the Identity Scrum team.\n\
    * Joe and Frank are both contributors to the team.\n\nBob can be the `primary`\
    \ for a Manager:Subordinate, an `associated` user for that same Linked Object\
    \ definition, and also the `primary` for the Scrumlead:Contributor Linked Object\
    \ definition.\n\nTo represent a relationship, create a Linked Object definition\
    \ that specifies a `primary` (parent) relationship and an `associated` (child)\
    \ relationship, and then add a link in which the appropriate user is assigned\
    \ to each side of that link type.\n\n## Links between User Types\n\nIf you created\
    \ multiple User Types, they all share the same Linked Object definitions. For\
    \ example, if you have separate User Types for employees and contractors, a link\
    \ could designate an employee as the manager for a contractor, with the contractor\
    \ being a subordinate of that employee."
  name: LinkedObject
  x-displayName: Linked Objects
- description: The Log Streaming API provides operations to manage Log Stream configurations
    for an org. You can configure up to two Log Stream integrations per org.
  name: LogStream
  x-displayName: Log Streaming
- description: "The Okta Network Zones API provides operations to manage Zones in\
    \ your organization. There are two usage Zone types: Policy Network Zones and\
    \ Blocklist Network Zones. Policy Network Zones are used to guide policy decisions.\
    \ Blocklist Network Zones are used to deny access from certain IP addresses, locations,\
    \ proxy types, or Autonomous System Numbers (ASNs) before policy evaluation.\n\
    \nA default system Policy Network Zone is provided in your Okta org. You can use\
    \ the Network Zones API to modify the default Policy Network Zone or to create\
    \ a custom Policy or Blocklist Network Zone. When you create your custom Zone,\
    \ you can specify if the Zone is an IP Zone or a Dynamic Zone. An IP Zone allows\
    \ you to define network perimeters around a set of IPs, whereas a Dynamic Zone\
    \ allows you to define network perimeters around location, IP type, and ASNs."
  name: NetworkZone
  x-displayName: Network Zones
- description: "The Org Settings API provides operations to manage your org account\
    \ settings such as contact information, granting Okta Support access, and more."
  name: OrgSetting
  x-displayName: Org Settings
- description: "The Okta Policy API enables an Administrator to perform Policy and\
    \ Policy Rule operations. The Policy framework is used by Okta to control Rules\
    \ and settings that govern, among other things, user session lifetime, whether\
    \ multi-factor authentication is required when logging in, what MFA factors may\
    \ be employed, password complexity requirements, what types of self-service operations\
    \ are permitted under various circumstances, and what identity provider to route\
    \ users to.\n\nPolicy settings for a particular Policy type, such as Sign On Policy,\
    \ consist of one or more Policy objects, each of which contains one or more Policy\
    \ Rules. Policies and Rules contain conditions that determine whether they are\
    \ applicable to a particular user at a particular time."
  name: Policy
  x-displayName: Policies
- description: The Principal Rate Limits API provides operations to manage Principal
    Rate Limits for your organization.
  name: PrincipalRateLimit
  x-displayName: Principal Rate Limits
- description: "The Mappings API provides operations to manage the mapping of properties\
    \ between an Okta User's and an App User's Profile properties using [Okta Expression\
    \ Language](https://developer.okta.com/docs/reference/okta-expression-language).\
    \ More information on Okta User and App User Profiles can be found in Okta's [User\
    \ profiles](https://developer.okta.com/docs/concepts/user-profiles/#what-is-the-okta-universal-directory)."
  name: ProfileMapping
  x-displayName: Profile Mappings
- description: The Push Providers API provides operations to manage Push Providers
    for your organization.
  name: PushProvider
  x-displayName: Push Providers
- description: The Rate Limit Settings APIs provide operations to manage settings
    and configurations surrounding rate limiting in your Okta organization.
  name: RateLimitSettings
  x-displayName: Rate Limit Settings
- description: "The Resource Sets API provides operations to manage Resource Sets\
    \ as custom collections of resources. You can use Resource Sets to assign Custom\
    \ Roles to administrators who are scoped to the designated resources. See [Supported\
    \ Resources](https://developer.okta.com/docs/concepts/role-assignment/#supported-resources)."
  name: ResourceSet
  x-displayName: Resource Sets
- description: "The Risk Events API provides the ability for third-party Risk Providers\
    \ to send Risk Events to Okta. See [Third-party risk provider integration overview](https://developer.okta.com/docs/guides/third-party-risk-integration/)\
    \ for guidance on integrating third-party risk providers with Okta."
  name: RiskEvent
  x-displayName: Risk Events
- description: "The Risk Providers API provides the ability to manage the Risk Providers\
    \ within Okta. See [Third-party risk provider integration overview](https://developer.okta.com/docs/guides/third-party-risk-integration/)\
    \ for guidance on integrating third-party risk providers with Okta."
  name: RiskProvider
  x-displayName: Risk Providers
- description: |-
    The Roles API provides operations to manage administrative Role assignments for a User.

    Role listing APIs provide a union of both standard and Custom Roles assigned to a User or Group.
  name: Role
  x-displayName: Roles
- description: "These APIs allow you to assign custom roles to user and groups, as\
    \ well as designate Third-Party Administrator status to a user or group."
  name: RoleAssignment
  x-displayName: Role Assignments
- description: "Role targets are a way of defining permissions for admin roles into\
    \ a smaller subset of Groups or Apps within your org. Targets limit an admin's\
    \ permissions to a targeted area of the org. You can define admin roles to target\
    \ Groups, Applications, and Application Instances.\n\n* **Group targets:** Grant\
    \ an admin permission to manage only a specified Group. For example, an admin\
    \ role may be assigned to manage only the IT Group.\n* **App targets:** Grant\
    \ an admin permission to manage all instances of the specified Apps. Target Apps\
    \ are Okta catalog Apps. For example, you can have multiple configurations of\
    \ an Okta catalog App, such as Salesforce or Facebook. When you add a Salesforce\
    \ or Facebook App as a target, that grants the admin permission to manage all\
    \ the instances of those Apps and create new instances of them.\n* **App Instance\
    \ targets:** Grant an admin permission to manage an instance of one App or instances\
    \ of multiple Apps. App Instances are specific Apps that admins have created in\
    \ their org. For example, there may be a Salesforce App configured differently\
    \ for each sales region of a company. When you create an App Instance target,\
    \ you can assign an admin to manage only two instances of the configured Salesforce\
    \ Apps and then also to manage an instance of another configured App such as Workday.\n\
    \n> **Note:** Don't use these operations with a Custom Role ID. Custom Role assignments\
    \ always require a target Resource Set. See [Role Assignments](https://developer.okta.com/docs/concepts/role-assignment/)\
    \ for more information."
  name: RoleTarget
  x-displayName: Role Targets
- description: "The Schemas API provides operations to manage custom User profiles\
    \ as well as endpoints to discover the structure of the Log Stream configuration.\n\
    \nOkta's [Universal Directory](https://help.okta.com/okta_help.htm?id=ext_About_Universal_Directory)\
    \ allows administrators to define custom User profiles for Okta Users and Applications.\n\
    Okta adopts a subset of [JSON Schema Draft 4](https://tools.ietf.org/html/draft-zyp-json-schema-04)\
    \ as the schema language to describe and validate extensible User profiles.\n\
    For Log Stream Schemas, Okta uses [JSON Schema Draft 2020-12](https://json-schema.org/specification.html).\n\
    [JSON Schema](http://json-schema.org/) is a lightweight declarative format for\
    \ describing the structure, constraints, and validation of JSON documents.\n\n\
    > **Note:** Okta implements only a subset of [JSON Schema Draft 4](https://tools.ietf.org/html/draft-zyp-json-schema-04)\
    \ and [JSON Schema Draft 2020-12](https://json-schema.org/specification.html).\
    \ This document describes which parts apply to Okta, and any extensions Okta has\
    \ made to [JSON Schema Draft 4](https://tools.ietf.org/html/draft-zyp-json-schema-04)\
    \ and [JSON Schema Draft 2020-12](https://json-schema.org/specification.html)."
  name: Schema
  x-displayName: Schemas
- description: "Okta uses a cookie-based authentication mechanism to maintain a user's\
    \ authentication Session across web requests. The Okta Sessions API provides operations\
    \ to create and manage authentication Sessions for users in your Okta organization.\n\
    \n>**Note:** Some browsers block third-party cookies by default, which disrupts\
    \ Okta functionality in certain flows. See [FAQ: How Blocked Third Party Cookies\
    \ Can Potentially Impact Your Okta Environment](https://support.okta.com/help/s/article/FAQ-How-Blocking-Third-Party-Cookies-Can-Potentially-Impact-Your-Okta-Environment).\n\
    \n>**Note:** The Sessions API doesn't support direct authentication. Direct authentication\
    \ is supported through the [Authentication API](https://developer.okta.com/docs/reference/api/authn/#authentication-operations)\
    \ or through OIDC using the [Resource Owner Password flow](https://developer.okta.com/docs/guides/implement-grant-type/ropassword/main/).\n\
    \n### Session cookie\n\nOkta uses an HTTP session cookie to provide access to\
    \ your Okta organization and applications across web requests for an interactive\
    \ user agent such as a web browser. A session cookie has an expiration configurable\
    \ by an administrator for the organization and is valid until the cookie expires\
    \ or the user closes the Session (logout) or browser application.\n\n### Session\
    \ token\n\nA [session token](https://developer.okta.com/docs/reference/api/authn/#session-token)\
    \ is a one-time bearer token that provides proof of authentication and may be\
    \ redeemed for an interactive SSO session in Okta in a user agent. Session tokens\
    \ can only be used **once** to establish a Session for a user and are revoked\
    \ when the token expires.\n\nOkta provides a very rich [Authentication API](https://developer.okta.com/docs/reference/api/authn/)\
    \ to validate a [user's primary credentials](https://developer.okta.com/docs/reference/api/authn/#primary-authentication)\
    \ and secondary [MFA factor](https://developer.okta.com/docs/reference/api/authn/#verify-factor).\
    \ A session token is returned after successful authentication, which can be later\
    \ exchanged for a session cookie that uses one of the following flows:\n\n- [Retrieve\
    \ a session cookie by visiting the OpenID Connect Authorization Endpoint](https://developer.okta.com/docs/guides/session-cookie/main/#retrieve-a-session-cookie-through-the-openid-connect-authorization-endpoint)\n\
    - [Retrieve a session cookie by visiting a session redirect link](https://developer.okta.com/docs/guides/session-cookie/main/#retrieve-a-session-cookie-by-visiting-a-session-redirect-link)\n\
    - [Retrieve a session cookie by visiting an application embed link](https://developer.okta.com/docs/guides/session-cookie/main/#retrieve-a-session-cookie-by-visiting-an-application-embed-link)\n\
    \n>**Note:** **Session tokens** are secrets and should be protected at rest and\
    \ during transit. A session token for a user is equivalent to having the user's\
    \ actual credentials."
  name: Session
  x-displayName: Sessions
- description: The Subscriptions API provides operations to manage email subscription
    settings for Okta administrator notifications.
  name: Subscription
  x-displayName: Subscriptions
- description: "The System Log records system events that are related to your organization\
    \ in order to provide an audit trail that can be used to understand platform activity\
    \ and to diagnose problems.\n\nThe System Log API provides near real-time, read-only\
    \ access to your organization's system log and is the programmatic counterpart\
    \ of the [System Log UI](https://help.okta.com/okta_help.htm?id=ext_Reports_SysLog).\n\
    \nThe terms \"event\" and \"log event\" are often used interchangeably. In the\
    \ context of this API, an \"event\" is an occurrence of interest within the system,\
    \ and a \"log\" or \"log event\" is the recorded fact.\n\nThe System Log API supports\
    \ these primary use cases:\n  * Event data export into a security information\
    \ and event management system (SIEM)\n  * System monitoring\n  * Development debugging\n\
    \  * Event introspection and audit\n\nThe System Log API isn't intended for use\
    \ as a Database as a Service (DBaaS) or to serve data directly to downstream consumers\
    \ without an intermediate data store.\n\nSee [Events API Migration](https://developer.okta.com/docs/concepts/events-api-migration/)\
    \ for information on migrating from the Events API to the System Log API."
  name: SystemLog
  x-displayName: System Log
- description: "The SMS Templates API provides operations to manage custom SMS templates\
    \ for verification.\n\n> **Note:** Only SMS custom Templates are available through\
    \ the API.\n\nSMS Templates customize the SMS message that is sent to users. One\
    \ default SMS Template is provided. All custom Templates must have the variable\
    \ `${code}` as part of the text. The `${code}` variable is replaced with the actual\
    \ SMS code when the message is sent. Optionally, you can also use the variable\
    \ `${org.name}`. If a Template contains `${org.name}`, it is replaced with the\
    \ organization name before the SMS message is sent."
  name: Template
  x-displayName: SMS Templates
- description: "[Okta ThreatInsight](https://help.okta.com/okta_help.htm?id=ext_threatinsight)\
    \ maintains a constantly evolving list of IPs that exhibit suspicious behaviors\
    \ suggestive of malicious activity. Authentication requests associated with an\
    \ IP in this list can be logged in [System Log](https://help.okta.com/okta_help.htm?id=ext_Reports_SysLog)\
    \ and blocked. The Okta ThreatInsight Configuration API provides operations to\
    \ manage your ThreatInsight configuration.\n\nIn order to prevent abuse, Okta\
    \ ThreatInsight works in a limited capacity for free trial editions. Please contact\
    \ Okta support if fully functional Okta ThreatInsight is required."
  name: ThreatInsight
  x-displayName: ThreatInsight
- description: "The Trusted Origins API provides operations to manage Trusted Origins\
    \ and sources.\n\nWhen external URLs are requested during sign-in, sign-out, or\
    \ recovery operations, Okta checks those URLs against the allowed list of Trusted\
    \ Origins. Trusted Origins also enable browser-based applications to access Okta\
    \ APIs from JavaScript (CORS). If the origins aren't specified, the related operation\
    \ (redirect or Okta API access) isn't permitted.\n\nYou can also configure Trusted\
    \ Origins to allow iFrame embedding of Okta resources, such as Okta sign-in pages\
    \ and the Okta End-User Dashboard, within that origin. This is an Early Access\
    \ feature. To enable it, contact [Okta Support](https://support.okta.com/help/s/).\n\
    \n> **Note:** This Early Access feature is supported for Okta domains only. It\
    \ isn't currently supported for custom domains."
  name: TrustedOrigin
  x-displayName: Trusted Origins
- description: The User API provides operations to manage users in your organization.
  name: User
  x-displayName: Users
- description: "The Factors API provides operations to enroll, manage, and verify\
    \ factors for multifactor authentication (MFA). Manage both administration and\
    \ end-user accounts, or verify an individual factor at any time."
  name: UserFactor
  x-displayName: User Factors
- description: The User Types API provides operations to manage User Types.
  name: UserType
  x-displayName: User Types
paths:
  /.well-known/okta-organization:
    get:
      description: "Retrieves the well-known org metadata, which includes the id,\
        \ configured custom domains, authentication pipeline, and various other org\
        \ settings"
      operationId: getWellknownOrgMetadata
      responses:
        "200":
          content:
            application/json:
              examples:
                Identity Engine Org with Custom Domain:
                  $ref: '#/components/examples/WellKnownOrgMetadataResponseCustomUrlOie'
                Classic Org:
                  $ref: '#/components/examples/WellKnownOrgMetadataResponseClassic'
              schema:
                $ref: '#/components/schemas/WellKnownOrgMetadata'
          description: Success
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security: []
      summary: Retrieve the Well-Known Org Metadata
      tags:
      - OrgSetting
  /api/v1/agentPools:
    get:
      description: Lists all agent pools with pagination support
      operationId: listAgentPools
      parameters:
      - description: Maximum number of AgentPools being returned
        explode: true
        in: query
        name: limitPerPoolType
        required: false
        schema:
          default: 5
          type: integer
        style: form
      - description: Agent type to search for
        explode: true
        in: query
        name: poolType
        required: false
        schema:
          $ref: '#/components/schemas/AgentType'
        style: form
      - description: "The cursor to use for pagination. It is an opaque string that\
          \ specifies your current location in the list and is obtained from the `Link`\
          \ response header. See [Pagination](/#pagination) for more information."
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AgentPool'
                type: array
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.agentPools.read
      summary: List all Agent Pools
      tags:
      - AgentPools
  /api/v1/agentPools/{poolId}/updates:
    get:
      description: Lists all agent pool updates
      operationId: listAgentPoolsUpdates
      parameters:
      - description: Id of the agent pool for which the settings will apply
        explode: false
        in: path
        name: poolId
        required: true
        schema:
          type: string
        style: simple
      - description: Scope the list only to scheduled or ad-hoc updates. If the parameter
          is not provided we will return the whole list of updates.
        explode: true
        in: query
        name: scheduled
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AgentPoolUpdate'
                type: array
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.agentPools.read
      summary: List all Agent Pool updates
      tags:
      - AgentPools
    post:
      description: "Creates an Agent pool update \\n For user flow 2 manual update,\
        \ starts the update immediately. \\n For user flow 3, schedules the update\
        \ based on the configured update window and delay."
      operationId: createAgentPoolsUpdate
      parameters:
      - description: Id of the agent pool for which the settings will apply
        explode: false
        in: path
        name: poolId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentPoolUpdate'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentPoolUpdate'
          description: Created
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.agentPools.manage
      summary: Create an Agent Pool update
      tags:
      - AgentPools
  /api/v1/agentPools/{poolId}/updates/settings:
    get:
      description: Retrieves the current state of the agent pool update instance settings
      operationId: getAgentPoolsUpdateSettings
      parameters:
      - description: Id of the agent pool for which the settings will apply
        explode: false
        in: path
        name: poolId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentPoolUpdateSetting'
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.agentPools.read
      summary: Retrieve an Agent Pool update's settings
      tags:
      - AgentPools
    post:
      description: Updates an agent pool update settings
      operationId: updateAgentPoolsUpdateSettings
      parameters:
      - description: Id of the agent pool for which the settings will apply
        explode: false
        in: path
        name: poolId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentPoolUpdateSetting'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentPoolUpdateSetting'
          description: Updated
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.agentPools.manage
      summary: Update an Agent Pool update settings
      tags:
      - AgentPools
  /api/v1/agentPools/{poolId}/updates/{updateId}:
    delete:
      description: Deletes Agent pool update
      operationId: deleteAgentPoolsUpdate
      parameters:
      - description: Id of the agent pool for which the settings will apply
        explode: false
        in: path
        name: poolId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the update
        explode: false
        in: path
        name: updateId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Deleted
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.agentPools.manage
      summary: Delete an Agent Pool update
      tags:
      - AgentPools
    get:
      description: Retrieves Agent pool update from updateId
      operationId: getAgentPoolsUpdateInstance
      parameters:
      - description: Id of the agent pool for which the settings will apply
        explode: false
        in: path
        name: poolId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the update
        explode: false
        in: path
        name: updateId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentPoolUpdate'
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.agentPools.read
      summary: Retrieve an Agent Pool update by id
      tags:
      - AgentPools
    post:
      description: Updates Agent pool update and return latest agent pool update
      operationId: updateAgentPoolsUpdate
      parameters:
      - description: Id of the agent pool for which the settings will apply
        explode: false
        in: path
        name: poolId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the update
        explode: false
        in: path
        name: updateId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentPoolUpdate'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentPoolUpdate'
          description: Updated
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.agentPools.manage
      summary: Update an Agent Pool update by id
      tags:
      - AgentPools
  /api/v1/agentPools/{poolId}/updates/{updateId}/activate:
    post:
      description: Activates scheduled Agent pool update
      operationId: activateAgentPoolsUpdate
      parameters:
      - description: Id of the agent pool for which the settings will apply
        explode: false
        in: path
        name: poolId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the update
        explode: false
        in: path
        name: updateId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentPoolUpdate'
          description: Activated
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.agentPools.manage
      summary: Activate an Agent Pool update
      tags:
      - AgentPools
  /api/v1/agentPools/{poolId}/updates/{updateId}/deactivate:
    post:
      description: Deactivates scheduled Agent pool update
      operationId: deactivateAgentPoolsUpdate
      parameters:
      - description: Id of the agent pool for which the settings will apply
        explode: false
        in: path
        name: poolId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the update
        explode: false
        in: path
        name: updateId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentPoolUpdate'
          description: Deactivated
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.agentPools.manage
      summary: Deactivate an Agent Pool update
      tags:
      - AgentPools
  /api/v1/agentPools/{poolId}/updates/{updateId}/pause:
    post:
      description: Pauses running or queued Agent pool update
      operationId: pauseAgentPoolsUpdate
      parameters:
      - description: Id of the agent pool for which the settings will apply
        explode: false
        in: path
        name: poolId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the update
        explode: false
        in: path
        name: updateId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentPoolUpdate'
          description: Paused
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.agentPools.manage
      summary: Pause an Agent Pool update
      tags:
      - AgentPools
  /api/v1/agentPools/{poolId}/updates/{updateId}/resume:
    post:
      description: Resumes running or queued Agent pool update
      operationId: resumeAgentPoolsUpdate
      parameters:
      - description: Id of the agent pool for which the settings will apply
        explode: false
        in: path
        name: poolId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the update
        explode: false
        in: path
        name: updateId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentPoolUpdate'
          description: Resumed
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.agentPools.manage
      summary: Resume an Agent Pool update
      tags:
      - AgentPools
  /api/v1/agentPools/{poolId}/updates/{updateId}/retry:
    post:
      description: Retries Agent pool update
      operationId: retryAgentPoolsUpdate
      parameters:
      - description: Id of the agent pool for which the settings will apply
        explode: false
        in: path
        name: poolId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the update
        explode: false
        in: path
        name: updateId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentPoolUpdate'
          description: Retried
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.agentPools.manage
      summary: Retry an Agent Pool update
      tags:
      - AgentPools
  /api/v1/agentPools/{poolId}/updates/{updateId}/stop:
    post:
      description: Stops Agent pool update
      operationId: stopAgentPoolsUpdate
      parameters:
      - description: Id of the agent pool for which the settings will apply
        explode: false
        in: path
        name: poolId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the update
        explode: false
        in: path
        name: updateId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentPoolUpdate'
          description: Stopped
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.agentPools.manage
      summary: Stop an Agent Pool update
      tags:
      - AgentPools
  /api/v1/api-tokens:
    get:
      description: Lists all the metadata of the active API tokens
      operationId: listApiTokens
      parameters:
      - description: "The cursor to use for pagination. It is an opaque string that\
          \ specifies your current location in the list and is obtained from the `Link`\
          \ response header. See [Pagination](/#pagination) for more information."
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - description: A limit on the number of objects to return.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          maximum: 200
          minimum: 1
          type: integer
        style: form
      - description: Finds a token that matches the name or clientName.
        explode: true
        in: query
        name: q
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                List Tokens:
                  $ref: '#/components/examples/ApiTokenListMetadataResponse'
              schema:
                items:
                  $ref: '#/components/schemas/ApiToken'
                type: array
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apiTokens.read
      summary: List all API Token Metadata
      tags:
      - ApiToken
  /api/v1/api-tokens/current:
    delete:
      description: Revokes the API token provided in the Authorization header
      operationId: revokeCurrentApiToken
      responses:
        "204":
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      summary: Revoke the Current API Token
      tags:
      - ApiToken
  /api/v1/api-tokens/{apiTokenId}:
    delete:
      description: Revokes an API token by `apiTokenId`
      operationId: revokeApiToken
      parameters:
      - description: id of the API Token
        explode: false
        in: path
        name: apiTokenId
        required: true
        schema:
          example: 00Tabcdefg1234567890
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apiTokens.manage
      summary: Revoke an API Token
      tags:
      - ApiToken
    get:
      description: Retrieves the metadata for an active API token by id
      operationId: getApiToken
      parameters:
      - description: id of the API Token
        explode: false
        in: path
        name: apiTokenId
        required: true
        schema:
          example: 00Tabcdefg1234567890
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                HCaptcha:
                  $ref: '#/components/examples/ApiTokenMetadataResponse'
              schema:
                $ref: '#/components/schemas/ApiToken'
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apiTokens.read
      summary: Retrieve an API Token's Metadata
      tags:
      - ApiToken
  /api/v1/apps:
    get:
      description: Lists all applications with pagination. A subset of apps can be
        returned that match a supported filter expression or query.
      operationId: listApplications
      parameters:
      - explode: true
        in: query
        name: q
        required: false
        schema:
          type: string
        style: form
      - description: Specifies the pagination cursor for the next page of apps
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - description: Specifies the number of results for a page
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: -1
          format: int32
          type: integer
        style: form
      - description: "Filters apps by status, user.id, group.id or credentials.signing.kid\
          \ expression"
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: Traverses users link relationship and optionally embeds Application
          User resource
        explode: true
        in: query
        name: expand
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: includeNonDeleted
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/listApplications_200_response_inner'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apps.read
      summary: List all Applications
      tags:
      - Application
    post:
      description: Creates a new application to your Okta organization
      operationId: createApplication
      parameters:
      - description: Executes activation lifecycle operation when creating the app
        explode: true
        in: query
        name: activate
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - explode: false
        in: header
        name: OktaAccessGateway-Agent
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/listApplications_200_response_inner'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listApplications_200_response_inner'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apps.manage
      summary: Create an Application
      tags:
      - Application
      x-codegen-request-body-name: application
  /api/v1/apps/{appId}:
    delete:
      description: Deletes an inactive application
      operationId: deleteApplication
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apps.manage
      summary: Delete an Application
      tags:
      - Application
    get:
      description: Retrieves an application from your Okta organization by `id`
      operationId: getApplication
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: expand
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listApplications_200_response_inner'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apps.read
      summary: Retrieve an Application
      tags:
      - Application
    put:
      description: Replaces an application
      operationId: replaceApplication
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/listApplications_200_response_inner'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listApplications_200_response_inner'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apps.manage
      summary: Replace an Application
      tags:
      - Application
      x-codegen-request-body-name: application
  /api/v1/apps/{appId}/connections/default:
    get:
      description: Retrieves the default Provisioning Connection for application
      operationId: getDefaultProvisioningConnectionForApplication
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvisioningConnection'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apps.read
      summary: Retrieve the default Provisioning Connection
      tags:
      - Application
    post:
      description: Updates the default provisioning connection for application
      operationId: updateDefaultProvisioningConnectionForApplication
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: activate
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProvisioningConnectionRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvisioningConnection'
          description: Created
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apps.manage
      summary: Update the default Provisioning Connection
      tags:
      - Application
  /api/v1/apps/{appId}/connections/default/lifecycle/activate:
    post:
      description: Activates the default Provisioning Connection for an application
      operationId: activateDefaultProvisioningConnectionForApplication
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apps.manage
      summary: Activate the default Provisioning Connection
      tags:
      - Application
  /api/v1/apps/{appId}/connections/default/lifecycle/deactivate:
    post:
      description: Deactivates the default Provisioning Connection for an application
      operationId: deactivateDefaultProvisioningConnectionForApplication
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apps.manage
      summary: Deactivate the default Provisioning Connection for an Application
      tags:
      - Application
  /api/v1/apps/{appId}/credentials/csrs:
    get:
      description: Lists all Certificate Signing Requests for an application
      operationId: listCsrsForApplication
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Csr'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apps.read
      summary: List all Certificate Signing Requests
      tags:
      - Application
    post:
      description: Generates a new key pair and returns the Certificate Signing Request
        for it
      operationId: generateCsrForApplication
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CsrMetadata'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Csr'
          description: Created
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apps.manage
      summary: Generate a Certificate Signing Request
      tags:
      - Application
      x-codegen-request-body-name: metadata
  /api/v1/apps/{appId}/credentials/csrs/{csrId}:
    delete:
      description: Revokes a certificate signing request and deletes the key pair
        from the application
      operationId: revokeCsrFromApplication
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: csrId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apps.manage
      summary: Revoke a Certificate Signing Request
      tags:
      - Application
    get:
      description: Retrieves a certificate signing request for the app by `id`
      operationId: getCsrForApplication
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: csrId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Csr'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apps.read
      summary: Retrieve a Certificate Signing Request
      tags:
      - Application
  /api/v1/apps/{appId}/credentials/csrs/{csrId}/lifecycle/publish:
    post:
      description: Publishes a certificate signing request for the app with a signed
        X.509 certificate and adds it into the application key credentials
      operationId: publishCsrFromApplication
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: csrId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/x-x509-ca-cert:
            schema:
              format: binary
              type: string
              x-okta-operationId: publishBinaryCerCert
          application/pkix-cert:
            schema:
              format: binary
              type: string
              x-okta-operationId: publishBinaryDerCert
          application/x-pem-file:
            schema:
              format: binary
              type: string
              x-okta-operationId: publishBinaryPemCert
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonWebKey'
          description: Created
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apps.manage
      summary: Publish a Certificate Signing Request
      tags:
      - Application
  /api/v1/apps/{appId}/credentials/keys:
    get:
      description: Lists all key credentials for an application
      operationId: listApplicationKeys
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/JsonWebKey'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apps.read
      summary: List all Key Credentials
      tags:
      - Application
  /api/v1/apps/{appId}/credentials/keys/generate:
    post:
      description: Generates a new X.509 certificate for an application key credential
      operationId: generateApplicationKey
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: validityYears
        required: false
        schema:
          type: integer
        style: form
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonWebKey'
          description: Created
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apps.manage
      summary: Generate a Key Credential
      tags:
      - Application
  /api/v1/apps/{appId}/credentials/keys/{keyId}:
    get:
      description: Retrieves a specific application key credential by kid
      operationId: getApplicationKey
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: keyId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonWebKey'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apps.read
      summary: Retrieve a Key Credential
      tags:
      - Application
  /api/v1/apps/{appId}/credentials/keys/{keyId}/clone:
    post:
      description: Clones a X.509 certificate for an application key credential from
        a source application to target application.
      operationId: cloneApplicationKey
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: keyId
        required: true
        schema:
          type: string
        style: simple
      - description: Unique key of the target Application
        explode: true
        in: query
        name: targetAid
        required: true
        schema:
          type: string
        style: form
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonWebKey'
          description: Created
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apps.manage
      summary: Clone a Key Credential
      tags:
      - Application
  /api/v1/apps/{appId}/features:
    get:
      description: Lists all features for an application
      operationId: listFeaturesForApplication
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApplicationFeature'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apps.read
      summary: List all Features
      tags:
      - Application
  /api/v1/apps/{appId}/features/{name}:
    get:
      description: Retrieves a Feature object for an application
      operationId: getFeatureForApplication
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationFeature'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apps.read
      summary: Retrieve a Feature
      tags:
      - Application
    put:
      description: Updates a Feature object for an application
      operationId: updateFeatureForApplication
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CapabilitiesObject'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationFeature'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apps.manage
      summary: Update a Feature
      tags:
      - Application
  /api/v1/apps/{appId}/grants:
    get:
      description: Lists all scope consent grants for the application
      operationId: listScopeConsentGrants
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: expand
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OAuth2ScopeConsentGrant'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      summary: List all Scope Consent Grants
      tags:
      - Application
    post:
      description: Grants consent for the application to request an OAuth 2.0 Okta
        scope
      operationId: grantConsentToScope
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuth2ScopeConsentGrant'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2ScopeConsentGrant'
          description: Created
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      summary: Grant Consent to Scope
      tags:
      - Application
      x-codegen-request-body-name: oAuth2ScopeConsentGrant
  /api/v1/apps/{appId}/grants/{grantId}:
    delete:
      description: Revokes permission for the application to request the given scope
      operationId: revokeScopeConsentGrant
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: grantId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      summary: Revoke a Scope Consent Grant
      tags:
      - Application
    get:
      description: Retrieves a single scope consent grant for the application
      operationId: getScopeConsentGrant
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: grantId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: expand
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2ScopeConsentGrant'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      summary: Retrieve a Scope Consent Grant
      tags:
      - Application
  /api/v1/apps/{appId}/groups:
    get:
      description: Lists all group assignments for an application
      operationId: listApplicationGroupAssignments
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: q
        required: false
        schema:
          type: string
        style: form
      - description: Specifies the pagination cursor for the next page of assignments
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - description: Specifies the number of results for a page
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: -1
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: expand
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApplicationGroupAssignment'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apps.read
      summary: List all Assigned Groups
      tags:
      - Application
  /api/v1/apps/{appId}/groups/{groupId}:
    delete:
      description: Unassigns a group from an application
      operationId: unassignApplicationFromGroup
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apps.manage
      summary: Unassign a Group
      tags:
      - Application
    get:
      description: Retrieves an application group assignment
      operationId: getApplicationGroupAssignment
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: expand
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationGroupAssignment'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apps.read
      summary: Retrieve an Assigned Group
      tags:
      - Application
    put:
      description: Assigns a group to an application
      operationId: assignGroupToApplication
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationGroupAssignment'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationGroupAssignment'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apps.manage
      summary: Assign a Group
      tags:
      - Application
      x-codegen-request-body-name: applicationGroupAssignment
  /api/v1/apps/{appId}/lifecycle/activate:
    post:
      description: Activates an inactive application
      operationId: activateApplication
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apps.manage
      summary: Activate an Application
      tags:
      - Application
  /api/v1/apps/{appId}/lifecycle/deactivate:
    post:
      description: Deactivates an active application
      operationId: deactivateApplication
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apps.manage
      summary: Deactivate an Application
      tags:
      - Application
  /api/v1/apps/{appId}/logo:
    post:
      description: "Uploads a logo for the application. The file must be in PNG, JPG,\
        \ or GIF format, and less than 1 MB in size. For best results use landscape\
        \ orientation, a transparent background, and a minimum size of 420px by 120px\
        \ to prevent upscaling."
      operationId: uploadApplicationLogo
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/uploadApplicationLogo_request'
      responses:
        "201":
          description: Created
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apps.manage
      summary: Upload a Logo
      tags:
      - Application
  /api/v1/apps/{appId}/policies/{policyId}:
    put:
      description: "Assigns an application to a policy identified by `policyId`. If\
        \ the application was previously assigned to another policy, this removes\
        \ that assignment."
      operationId: assignApplicationPolicy
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: policyId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apps.manage
      summary: Assign an Application to a Policy
      tags:
      - Application
  /api/v1/apps/{appId}/tokens:
    delete:
      description: Revokes all tokens for the specified application
      operationId: revokeOAuth2TokensForApplication
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apps.manage
      summary: Revoke all OAuth 2.0 Tokens
      tags:
      - Application
    get:
      description: Lists all tokens for the application
      operationId: listOAuth2TokensForApplication
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: expand
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OAuth2Token'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apps.read
      summary: List all OAuth 2.0 Tokens
      tags:
      - Application
  /api/v1/apps/{appId}/tokens/{tokenId}:
    delete:
      description: Revokes the specified token for the specified application
      operationId: revokeOAuth2TokenForApplication
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: tokenId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apps.manage
      summary: Revoke an OAuth 2.0 Token
      tags:
      - Application
    get:
      description: Retrieves a token for the specified application
      operationId: getOAuth2TokenForApplication
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: tokenId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: expand
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Token'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apps.read
      summary: Retrieve an OAuth 2.0 Token
      tags:
      - Application
  /api/v1/apps/{appId}/users:
    get:
      description: "Lists all assigned [application users](#application-user-model)\
        \ for an application"
      operationId: listApplicationUsers
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: q
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: query_scope
        required: false
        schema:
          type: string
        style: form
      - description: specifies the pagination cursor for the next page of assignments
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - description: specifies the number of results for a page
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: -1
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: expand
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AppUser'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apps.read
      summary: List all Assigned Users
      tags:
      - Application
    post:
      description: "Assigns an user to an application with [credentials](#application-user-credentials-object)\
        \ and an app-specific [profile](#application-user-profile-object). Profile\
        \ mappings defined for the application are first applied before applying any\
        \ profile properties specified in the request."
      operationId: assignUserToApplication
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppUser'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppUser'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apps.manage
      summary: Assign a User
      tags:
      - Application
      x-codegen-request-body-name: appUser
  /api/v1/apps/{appId}/users/{userId}:
    delete:
      description: Unassigns a user from an application
      operationId: unassignUserFromApplication
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: sendEmail
        required: false
        schema:
          default: false
          type: boolean
        style: form
        x-okta-added-version: 1.5.0
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apps.manage
      summary: Unassign a User
      tags:
      - Application
    get:
      description: Retrieves a specific user assignment for application by `id`
      operationId: getApplicationUser
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: expand
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppUser'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apps.read
      summary: Retrieve an Assigned User
      tags:
      - Application
    post:
      description: Updates a user's profile for an application
      operationId: updateApplicationUser
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppUser'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppUser'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apps.manage
      summary: Update an Application Profile for Assigned User
      tags:
      - Application
      x-codegen-request-body-name: appUser
  /api/v1/authenticators:
    get:
      description: Lists all authenticators
      operationId: listAuthenticators
      responses:
        "200":
          content:
            application/json:
              examples:
                Org Authenticators:
                  $ref: '#/components/examples/AuthenticatorsResponse'
              schema:
                items:
                  $ref: '#/components/schemas/Authenticator'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authenticators.read
      summary: List all Authenticators
      tags:
      - Authenticator
    post:
      description: "Creates an authenticator. You can use this operation as part of\
        \ the \"Create a custom authenticator\" flow. See the [Custom authenticator\
        \ integration guide](https://developer.okta.com/docs/guides/authenticators-custom-authenticator/android/main/)."
      operationId: createAuthenticator
      parameters:
      - description: Whether to execute the activation lifecycle operation when Okta
          creates the authenticator
        explode: true
        in: query
        name: activate
        required: false
        schema:
          default: false
          type: boolean
        style: form
      requestBody:
        $ref: '#/components/requestBodies/AuthenticatorRequestBody'
      responses:
        "200":
          content:
            application/json:
              examples:
                Duo:
                  $ref: '#/components/examples/AuthenticatorResponseDuo'
                Email:
                  $ref: '#/components/examples/AuthenticatorResponseEmail'
                Password:
                  $ref: '#/components/examples/AuthenticatorResponsePassword'
                Phone:
                  $ref: '#/components/examples/AuthenticatorResponsePhone'
                WebAuthn:
                  $ref: '#/components/examples/AuthenticatorResponseWebAuthn'
                Security Question:
                  $ref: '#/components/examples/AuthenticatorResponseSecurityQuestion'
              schema:
                $ref: '#/components/schemas/Authenticator'
          description: OK
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authenticators.manage
      summary: Create an Authenticator
      tags:
      - Authenticator
      x-codegen-request-body-name: authenticator
  /api/v1/authenticators/{authenticatorId}:
    get:
      description: Retrieves an authenticator from your Okta organization by `authenticatorId`
      operationId: getAuthenticator
      parameters:
      - explode: false
        in: path
        name: authenticatorId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Duo:
                  $ref: '#/components/examples/AuthenticatorResponseDuo'
                Email:
                  $ref: '#/components/examples/AuthenticatorResponseEmail'
                Password:
                  $ref: '#/components/examples/AuthenticatorResponsePassword'
                Phone:
                  $ref: '#/components/examples/AuthenticatorResponsePhone'
                WebAuthn:
                  $ref: '#/components/examples/AuthenticatorResponseWebAuthn'
                Security Question:
                  $ref: '#/components/examples/AuthenticatorResponseSecurityQuestion'
              schema:
                $ref: '#/components/schemas/Authenticator'
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authenticators.read
      summary: Retrieve an Authenticator
      tags:
      - Authenticator
    put:
      description: Replaces an authenticator
      operationId: replaceAuthenticator
      parameters:
      - explode: false
        in: path
        name: authenticatorId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/AuthenticatorRequestBody'
      responses:
        "200":
          content:
            application/json:
              examples:
                Duo:
                  $ref: '#/components/examples/AuthenticatorResponseDuo'
                Email:
                  $ref: '#/components/examples/AuthenticatorResponseEmail'
                Password:
                  $ref: '#/components/examples/AuthenticatorResponsePassword'
                Phone:
                  $ref: '#/components/examples/AuthenticatorResponsePhone'
                WebAuthn:
                  $ref: '#/components/examples/AuthenticatorResponseWebAuthn'
                Security Question:
                  $ref: '#/components/examples/AuthenticatorResponseSecurityQuestion'
              schema:
                $ref: '#/components/schemas/Authenticator'
          description: OK
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authenticators.manage
      summary: Replace an Authenticator
      tags:
      - Authenticator
      x-codegen-request-body-name: authenticator
  /api/v1/authenticators/{authenticatorId}/lifecycle/activate:
    post:
      description: Activates an authenticator by `authenticatorId`
      operationId: activateAuthenticator
      parameters:
      - explode: false
        in: path
        name: authenticatorId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Duo:
                  $ref: '#/components/examples/AuthenticatorResponseDuo'
                Email:
                  $ref: '#/components/examples/AuthenticatorResponseEmail'
                Password:
                  $ref: '#/components/examples/AuthenticatorResponsePassword'
                Phone:
                  $ref: '#/components/examples/AuthenticatorResponsePhone'
                WebAuthn:
                  $ref: '#/components/examples/AuthenticatorResponseWebAuthn'
                Security Question:
                  $ref: '#/components/examples/AuthenticatorResponseSecurityQuestion'
              schema:
                $ref: '#/components/schemas/Authenticator'
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authenticators.manage
      summary: Activate an Authenticator
      tags:
      - Authenticator
  /api/v1/authenticators/{authenticatorId}/lifecycle/deactivate:
    post:
      description: Deactivates an authenticator by `authenticatorId`
      operationId: deactivateAuthenticator
      parameters:
      - explode: false
        in: path
        name: authenticatorId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Duo:
                  $ref: '#/components/examples/AuthenticatorResponseDuo'
                Email:
                  $ref: '#/components/examples/AuthenticatorResponseEmail'
                Password:
                  $ref: '#/components/examples/AuthenticatorResponsePassword'
                Phone:
                  $ref: '#/components/examples/AuthenticatorResponsePhone'
                WebAuthn:
                  $ref: '#/components/examples/AuthenticatorResponseWebAuthn'
                Security Question:
                  $ref: '#/components/examples/AuthenticatorResponseSecurityQuestion'
              schema:
                $ref: '#/components/schemas/Authenticator'
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authenticators.manage
      summary: Deactivate an Authenticator
      tags:
      - Authenticator
  /api/v1/authorizationServers:
    get:
      description: Lists all authorization servers
      operationId: listAuthorizationServers
      parameters:
      - explode: true
        in: query
        name: q
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 200
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AuthorizationServer'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authorizationServers.read
      summary: List all Authorization Servers
      tags:
      - AuthorizationServer
    post:
      description: Creates an authorization server
      operationId: createAuthorizationServer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationServer'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationServer'
          description: Created
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authorizationServers.manage
      summary: Create an Authorization Server
      tags:
      - AuthorizationServer
      x-codegen-request-body-name: authorizationServer
  /api/v1/authorizationServers/{authServerId}:
    delete:
      description: Deletes an authorization server
      operationId: deleteAuthorizationServer
      parameters:
      - explode: false
        in: path
        name: authServerId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authorizationServers.manage
      summary: Delete an Authorization Server
      tags:
      - AuthorizationServer
    get:
      description: Retrieves an authorization server
      operationId: getAuthorizationServer
      parameters:
      - explode: false
        in: path
        name: authServerId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationServer'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authorizationServers.read
      summary: Retrieve an Authorization Server
      tags:
      - AuthorizationServer
    put:
      description: Replaces an authorization server
      operationId: replaceAuthorizationServer
      parameters:
      - explode: false
        in: path
        name: authServerId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationServer'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationServer'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authorizationServers.manage
      summary: Replace an Authorization Server
      tags:
      - AuthorizationServer
      x-codegen-request-body-name: authorizationServer
  /api/v1/authorizationServers/{authServerId}/claims:
    get:
      description: Lists all custom token claims
      operationId: listOAuth2Claims
      parameters:
      - explode: false
        in: path
        name: authServerId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OAuth2Claim'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authorizationServers.read
      summary: List all Custom Token Claims
      tags:
      - AuthorizationServer
    post:
      description: Creates a custom token claim
      operationId: createOAuth2Claim
      parameters:
      - explode: false
        in: path
        name: authServerId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuth2Claim'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Claim'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authorizationServers.manage
      summary: Create a Custom Token Claim
      tags:
      - AuthorizationServer
      x-codegen-request-body-name: oAuth2Claim
  /api/v1/authorizationServers/{authServerId}/claims/{claimId}:
    delete:
      description: Deletes a custom token claim
      operationId: deleteOAuth2Claim
      parameters:
      - explode: false
        in: path
        name: authServerId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: claimId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authorizationServers.manage
      summary: Delete a Custom Token Claim
      tags:
      - AuthorizationServer
    get:
      description: Retrieves a custom token claim
      operationId: getOAuth2Claim
      parameters:
      - explode: false
        in: path
        name: authServerId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: claimId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Claim'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authorizationServers.read
      summary: Retrieve a Custom Token Claim
      tags:
      - AuthorizationServer
    put:
      description: Replaces a custom token claim
      operationId: replaceOAuth2Claim
      parameters:
      - explode: false
        in: path
        name: authServerId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: claimId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuth2Claim'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Claim'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authorizationServers.manage
      summary: Replace a Custom Token Claim
      tags:
      - AuthorizationServer
      x-codegen-request-body-name: oAuth2Claim
  /api/v1/authorizationServers/{authServerId}/clients:
    get:
      description: Lists all clients
      operationId: listOAuth2ClientsForAuthorizationServer
      parameters:
      - explode: false
        in: path
        name: authServerId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OAuth2Client'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authorizationServers.read
      summary: List all Clients
      tags:
      - AuthorizationServer
  /api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens:
    delete:
      description: Revokes all refresh tokens for a client
      operationId: revokeRefreshTokensForAuthorizationServerAndClient
      parameters:
      - explode: false
        in: path
        name: authServerId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: clientId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authorizationServers.manage
      summary: Revoke all Refresh Tokens for a Client
      tags:
      - AuthorizationServer
    get:
      description: Lists all refresh tokens for a client
      operationId: listRefreshTokensForAuthorizationServerAndClient
      parameters:
      - explode: false
        in: path
        name: authServerId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: clientId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: expand
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: -1
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OAuth2RefreshToken'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authorizationServers.read
      summary: List all Refresh Tokens for a Client
      tags:
      - AuthorizationServer
  /api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens/{tokenId}:
    delete:
      description: Revokes a refresh token for a client
      operationId: revokeRefreshTokenForAuthorizationServerAndClient
      parameters:
      - explode: false
        in: path
        name: authServerId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: clientId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: tokenId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authorizationServers.manage
      summary: Revoke a Refresh Token for a Client
      tags:
      - AuthorizationServer
    get:
      description: Retrieves a refresh token for a client
      operationId: getRefreshTokenForAuthorizationServerAndClient
      parameters:
      - explode: false
        in: path
        name: authServerId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: clientId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: tokenId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: expand
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2RefreshToken'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authorizationServers.read
      summary: Retrieve a Refresh Token for a Client
      tags:
      - AuthorizationServer
  /api/v1/authorizationServers/{authServerId}/credentials/keys:
    get:
      description: Lists all credential keys
      operationId: listAuthorizationServerKeys
      parameters:
      - explode: false
        in: path
        name: authServerId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/JsonWebKey'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authorizationServers.read
      summary: List all Credential Keys
      tags:
      - AuthorizationServer
  /api/v1/authorizationServers/{authServerId}/credentials/lifecycle/keyRotate:
    post:
      description: Rotates all credential keys
      operationId: rotateAuthorizationServerKeys
      parameters:
      - explode: false
        in: path
        name: authServerId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JwkUse'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/JsonWebKey'
                type: array
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authorizationServers.manage
      summary: Rotate all Credential Keys
      tags:
      - AuthorizationServer
      x-codegen-request-body-name: use
  /api/v1/authorizationServers/{authServerId}/lifecycle/activate:
    post:
      description: Activates an authorization server
      operationId: activateAuthorizationServer
      parameters:
      - explode: false
        in: path
        name: authServerId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authorizationServers.manage
      summary: Activate an Authorization Server
      tags:
      - AuthorizationServer
  /api/v1/authorizationServers/{authServerId}/lifecycle/deactivate:
    post:
      description: Deactivates an authorization server
      operationId: deactivateAuthorizationServer
      parameters:
      - explode: false
        in: path
        name: authServerId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authorizationServers.manage
      summary: Deactivate an Authorization Server
      tags:
      - AuthorizationServer
  /api/v1/authorizationServers/{authServerId}/policies:
    get:
      description: Lists all policies
      operationId: listAuthorizationServerPolicies
      parameters:
      - explode: false
        in: path
        name: authServerId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AuthorizationServerPolicy'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authorizationServers.read
      summary: List all Policies
      tags:
      - AuthorizationServer
    post:
      description: Creates a policy
      operationId: createAuthorizationServerPolicy
      parameters:
      - explode: false
        in: path
        name: authServerId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationServerPolicy'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationServerPolicy'
          description: Created
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authorizationServers.manage
      summary: Create a Policy
      tags:
      - AuthorizationServer
      x-codegen-request-body-name: policy
  /api/v1/authorizationServers/{authServerId}/policies/{policyId}:
    delete:
      description: Deletes a policy
      operationId: deleteAuthorizationServerPolicy
      parameters:
      - explode: false
        in: path
        name: authServerId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: policyId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authorizationServers.manage
      summary: Delete a Policy
      tags:
      - AuthorizationServer
    get:
      description: Retrieves a policy
      operationId: getAuthorizationServerPolicy
      parameters:
      - explode: false
        in: path
        name: authServerId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: policyId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationServerPolicy'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authorizationServers.read
      summary: Retrieve a Policy
      tags:
      - AuthorizationServer
    put:
      description: Replaces a policy
      operationId: replaceAuthorizationServerPolicy
      parameters:
      - explode: false
        in: path
        name: authServerId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: policyId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationServerPolicy'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationServerPolicy'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authorizationServers.manage
      summary: Replace a Policy
      tags:
      - AuthorizationServer
      x-codegen-request-body-name: policy
  /api/v1/authorizationServers/{authServerId}/policies/{policyId}/lifecycle/activate:
    post:
      description: Activates an authorization server policy
      operationId: activateAuthorizationServerPolicy
      parameters:
      - explode: false
        in: path
        name: authServerId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: policyId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authorizationServers.manage
      summary: Activate a Policy
      tags:
      - AuthorizationServer
  /api/v1/authorizationServers/{authServerId}/policies/{policyId}/lifecycle/deactivate:
    post:
      description: Deactivates an authorization server policy
      operationId: deactivateAuthorizationServerPolicy
      parameters:
      - explode: false
        in: path
        name: authServerId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: policyId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authorizationServers.manage
      summary: Deactivate a Policy
      tags:
      - AuthorizationServer
  /api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules:
    get:
      description: Lists all policy rules for the specified Custom Authorization Server
        and Policy
      operationId: listAuthorizationServerPolicyRules
      parameters:
      - explode: false
        in: path
        name: policyId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: authServerId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AuthorizationServerPolicyRule'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authorizationServers.read
      summary: List all Policy Rules
      tags:
      - AuthorizationServer
    post:
      description: Creates a policy rule for the specified Custom Authorization Server
        and Policy
      operationId: createAuthorizationServerPolicyRule
      parameters:
      - explode: false
        in: path
        name: policyId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: authServerId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationServerPolicyRule'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationServerPolicyRule'
          description: Created
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authorizationServers.manage
      summary: Create a Policy Rule
      tags:
      - AuthorizationServer
      x-codegen-request-body-name: policyRule
  /api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}:
    delete:
      description: Deletes a Policy Rule defined in the specified Custom Authorization
        Server and Policy
      operationId: deleteAuthorizationServerPolicyRule
      parameters:
      - explode: false
        in: path
        name: policyId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: authServerId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: ruleId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authorizationServers.manage
      summary: Delete a Policy Rule
      tags:
      - AuthorizationServer
    get:
      description: Retrieves a policy rule by `ruleId`
      operationId: getAuthorizationServerPolicyRule
      parameters:
      - explode: false
        in: path
        name: policyId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: authServerId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: ruleId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationServerPolicyRule'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authorizationServers.read
      summary: Retrieve a Policy Rule
      tags:
      - AuthorizationServer
    put:
      description: Replaces the configuration of the Policy Rule defined in the specified
        Custom Authorization Server and Policy
      operationId: replaceAuthorizationServerPolicyRule
      parameters:
      - explode: false
        in: path
        name: policyId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: authServerId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: ruleId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationServerPolicyRule'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationServerPolicyRule'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authorizationServers.manage
      summary: Replace a Policy Rule
      tags:
      - AuthorizationServer
      x-codegen-request-body-name: policyRule
  /api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}/lifecycle/activate:
    post:
      description: Activates an authorization server policy rule
      operationId: activateAuthorizationServerPolicyRule
      parameters:
      - explode: false
        in: path
        name: authServerId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: policyId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: ruleId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authorizationServers.manage
      summary: Activate a Policy Rule
      tags:
      - AuthorizationServer
  /api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}/lifecycle/deactivate:
    post:
      description: Deactivates an authorization server policy rule
      operationId: deactivateAuthorizationServerPolicyRule
      parameters:
      - explode: false
        in: path
        name: authServerId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: policyId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: ruleId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authorizationServers.manage
      summary: Deactivate a Policy Rule
      tags:
      - AuthorizationServer
  /api/v1/authorizationServers/{authServerId}/scopes:
    get:
      description: Lists all custom token scopes
      operationId: listOAuth2Scopes
      parameters:
      - explode: false
        in: path
        name: authServerId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: q
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: -1
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OAuth2Scope'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authorizationServers.read
      summary: List all Custom Token Scopes
      tags:
      - AuthorizationServer
    post:
      description: Creates a custom token scope
      operationId: createOAuth2Scope
      parameters:
      - explode: false
        in: path
        name: authServerId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuth2Scope'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Scope'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authorizationServers.manage
      summary: Create a Custom Token Scope
      tags:
      - AuthorizationServer
      x-codegen-request-body-name: oAuth2Scope
  /api/v1/authorizationServers/{authServerId}/scopes/{scopeId}:
    delete:
      description: Deletes a custom token scope
      operationId: deleteOAuth2Scope
      parameters:
      - explode: false
        in: path
        name: authServerId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: scopeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authorizationServers.manage
      summary: Delete a Custom Token Scope
      tags:
      - AuthorizationServer
    get:
      description: Retrieves a custom token scope
      operationId: getOAuth2Scope
      parameters:
      - explode: false
        in: path
        name: authServerId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: scopeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Scope'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authorizationServers.read
      summary: Retrieve a Custom Token Scope
      tags:
      - AuthorizationServer
    put:
      description: Replaces a custom token scope
      operationId: replaceOAuth2Scope
      parameters:
      - explode: false
        in: path
        name: authServerId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: scopeId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuth2Scope'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Scope'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.authorizationServers.manage
      summary: Replace a Custom Token Scope
      tags:
      - AuthorizationServer
      x-codegen-request-body-name: oAuth2Scope
  /api/v1/behaviors:
    get:
      description: Lists all behavior detection rules with pagination support
      operationId: listBehaviorDetectionRules
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/listBehaviorDetectionRules_200_response_inner'
                type: array
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.behaviors.read
      summary: List all Behavior Detection Rules
      tags:
      - Behavior
    post:
      description: Creates a new behavior detection rule
      operationId: createBehaviorDetectionRule
      requestBody:
        content:
          application/json:
            examples:
              BehaviorRuleRequest:
                $ref: '#/components/examples/BehaviorRuleRequest'
            schema:
              $ref: '#/components/schemas/listBehaviorDetectionRules_200_response_inner'
        required: true
      responses:
        "201":
          content:
            application/json:
              examples:
                BehaviorRuleReSponse:
                  $ref: '#/components/examples/BehaviorRuleResponse'
              schema:
                $ref: '#/components/schemas/BehaviorRule'
          description: Created
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.behaviors.manage
      summary: Create a Behavior Detection Rule
      tags:
      - Behavior
      x-codegen-request-body-name: rule
  /api/v1/behaviors/{behaviorId}:
    delete:
      description: Deletes a Behavior Detection Rule by `behaviorId`
      operationId: deleteBehaviorDetectionRule
      parameters:
      - description: id of the Behavior Detection Rule
        explode: false
        in: path
        name: behaviorId
        required: true
        schema:
          example: abcd1234
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.behaviors.manage
      summary: Delete a Behavior Detection Rule
      tags:
      - Behavior
    get:
      description: Retrieves a Behavior Detection Rule by `behaviorId`
      operationId: getBehaviorDetectionRule
      parameters:
      - description: id of the Behavior Detection Rule
        explode: false
        in: path
        name: behaviorId
        required: true
        schema:
          example: abcd1234
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listBehaviorDetectionRules_200_response_inner'
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.behaviors.read
      summary: Retrieve a Behavior Detection Rule
      tags:
      - Behavior
    put:
      description: Replaces a Behavior Detection Rule by `behaviorId`
      operationId: replaceBehaviorDetectionRule
      parameters:
      - description: id of the Behavior Detection Rule
        explode: false
        in: path
        name: behaviorId
        required: true
        schema:
          example: abcd1234
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              BehaviorRuleRequest:
                $ref: '#/components/examples/BehaviorRuleRequest'
            schema:
              $ref: '#/components/schemas/listBehaviorDetectionRules_200_response_inner'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                BehaviorRuleReSponse:
                  $ref: '#/components/examples/BehaviorRuleResponse'
              schema:
                $ref: '#/components/schemas/listBehaviorDetectionRules_200_response_inner'
          description: Created
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.behaviors.manage
      summary: Replace a Behavior Detection Rule
      tags:
      - Behavior
      x-codegen-request-body-name: rule
  /api/v1/behaviors/{behaviorId}/lifecycle/activate:
    post:
      description: Activates a behavior detection rule
      operationId: activateBehaviorDetectionRule
      parameters:
      - description: id of the Behavior Detection Rule
        explode: false
        in: path
        name: behaviorId
        required: true
        schema:
          example: abcd1234
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                BehaviorRuleReSponse:
                  $ref: '#/components/examples/BehaviorRuleResponse'
              schema:
                $ref: '#/components/schemas/listBehaviorDetectionRules_200_response_inner'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.behaviors.manage
      summary: Activate a Behavior Detection Rule
      tags:
      - Behavior
  /api/v1/behaviors/{behaviorId}/lifecycle/deactivate:
    post:
      description: Deactivates a behavior detection rule
      operationId: deactivateBehaviorDetectionRule
      parameters:
      - description: id of the Behavior Detection Rule
        explode: false
        in: path
        name: behaviorId
        required: true
        schema:
          example: abcd1234
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                BehaviorRuleReSponse:
                  $ref: '#/components/examples/BehaviorRuleResponse'
              schema:
                $ref: '#/components/schemas/listBehaviorDetectionRules_200_response_inner'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.behaviors.manage
      summary: Deactivate a Behavior Detection Rule
      tags:
      - Behavior
  /api/v1/brands:
    get:
      description: Lists all the brands in your org
      operationId: listBrands
      responses:
        "200":
          content:
            application/json:
              examples:
                Get brands response:
                  $ref: '#/components/examples/ListBrandsResponse'
              schema:
                items:
                  $ref: '#/components/schemas/Brand'
                type: array
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.brands.read
      summary: List all Brands
      tags:
      - Customization
    post:
      description: Creates new brand in your org
      operationId: createBrand
      requestBody:
        content:
          application/json:
            examples:
              Create brand request:
                $ref: '#/components/examples/CreateBrandRequest'
            schema:
              $ref: '#/components/schemas/CreateBrandRequest'
      responses:
        "201":
          content:
            application/json:
              examples:
                Create brand response:
                  $ref: '#/components/examples/CreateBrandResponse'
              schema:
                $ref: '#/components/schemas/Brand'
          description: Created
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.brands.manage
      summary: Create a Brand
      tags:
      - Customization
  /api/v1/brands/{brandId}:
    delete:
      description: Deletes a brand by its unique identifier
      operationId: deleteBrand
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Successfully deleted the brand.
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "409":
          content:
            application/json:
              examples:
                Cannot delete default brand:
                  $ref: '#/components/examples/ErrorDeleteDefaultBrand'
                Cannot delete brand associated with a domain:
                  $ref: '#/components/examples/ErrorDeleteBrandAssociatedWithDomain'
              schema:
                $ref: '#/components/schemas/Error'
          description: Conflict
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.brands.manage
      summary: Delete a brand
      tags:
      - Customization
    get:
      description: Retrieves a brand by `brandId`
      operationId: getBrand
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Get brand response:
                  $ref: '#/components/examples/GetBrandResponse'
              schema:
                $ref: '#/components/schemas/Brand'
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.brands.read
      summary: Retrieve a Brand
      tags:
      - Customization
    put:
      description: Replaces a brand by `brandId`
      operationId: replaceBrand
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              Update brand request:
                $ref: '#/components/examples/UpdateBrandRequest'
            schema:
              $ref: '#/components/schemas/BrandRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                Update brand response:
                  $ref: '#/components/examples/UpdateBrandResponse'
              schema:
                $ref: '#/components/schemas/Brand'
          description: OK
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.brands.manage
      summary: Replace a Brand
      tags:
      - Customization
      x-codegen-request-body-name: brand
  /api/v1/brands/{brandId}/domains:
    get:
      description: Lists all domains associated with a brand by `brandId`
      operationId: listBrandDomains
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandDomains'
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.brands.read
      summary: List all Domains associated with a Brand
      tags:
      - Customization
    post:
      description: Links a brand to a domain by `domainId`
      operationId: linkBrandDomain
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              Create brand request:
                $ref: '#/components/examples/CreateBrandDomainRequest'
            schema:
              $ref: '#/components/schemas/CreateBrandDomainRequest'
      responses:
        "201":
          content:
            application/json:
              examples:
                Link a brand with a domain:
                  $ref: '#/components/examples/LinkBrandDomain'
              schema:
                $ref: '#/components/schemas/BrandDomain'
          description: Created
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "409":
          content:
            application/json:
              examples:
                Cannot link default brand with a domain:
                  $ref: '#/components/examples/ErrorLinkDefaultBrand'
              schema:
                $ref: '#/components/schemas/Error'
          description: Conflict
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.brands.manage
      summary: Link a Brand to a Domain
      tags:
      - Customization
  /api/v1/brands/{brandId}/domains/{domainId}:
    delete:
      description: Unlinks a brand and domain by their identifiers
      operationId: unlinkBrandDomain
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the domain.
        explode: false
        in: path
        name: domainId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Successfully unlinked the domain from the brand
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.brands.manage
      summary: Unlink a Brand from a Domain
      tags:
      - Customization
  /api/v1/brands/{brandId}/pages/error:
    get:
      description: Retrieves the error page
      operationId: getErrorPage
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      - description: Specifies additional metadata to be included in the response.
        explode: false
        in: query
        name: expand
        required: false
        schema:
          items:
            enum:
            - default
            - customized
            - customizedUrl
            - preview
            - previewUrl
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageRoot'
          description: Successfully retrieved the error page.
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.brands.read
      summary: Retrieve the Error Page
      tags:
      - Customization
  /api/v1/brands/{brandId}/pages/error/customized:
    delete:
      description: Resets the customized error page
      operationId: resetCustomizedErrorPage
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Successfully reset the customized error page.
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.brands.manage
      summary: Reset the Customized Error Page
      tags:
      - Customization
    get:
      description: Retrieves the customized error page
      operationId: getCustomizedErrorPage
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomizablePage'
          description: Successfully retrieved the customized error page.
          headers:
            Location:
              explode: false
              schema:
                format: uri
                type: string
              style: simple
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.brands.read
      summary: Retrieve the Customized Error Page
      tags:
      - Customization
    put:
      description: Replaces the customized error page
      operationId: replaceCustomizedErrorPage
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomizablePage'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomizablePage'
          description: Successfully replaced the customized error page.
          headers:
            Location:
              explode: false
              schema:
                format: uri
                type: string
              style: simple
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.brands.manage
      summary: Replace the Customized Error Page
      tags:
      - Customization
  /api/v1/brands/{brandId}/pages/error/default:
    get:
      description: Retrieves the default error page
      operationId: getDefaultErrorPage
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomizablePage'
          description: Successfully retrieved the default error page.
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.brands.read
      summary: Retrieve the Default Error Page
      tags:
      - Customization
  /api/v1/brands/{brandId}/pages/error/preview:
    delete:
      description: Resets the preview error page
      operationId: resetPreviewErrorPage
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Successfully reset the preview error page.
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.brands.manage
      summary: Reset the Preview Error Page
      tags:
      - Customization
    get:
      description: Retrieves the preview error page
      operationId: getPreviewErrorPage
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomizablePage'
          description: Successfully retrieved the preview error page.
          headers:
            Location:
              explode: false
              schema:
                format: uri
                type: string
              style: simple
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.brands.read
      summary: Retrieve the Preview Error Page Preview
      tags:
      - Customization
    put:
      description: Replaces the preview error page
      operationId: replacePreviewErrorPage
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomizablePage'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomizablePage'
          description: Successfully replaced the preview error page.
          headers:
            Location:
              explode: false
              schema:
                format: uri
                type: string
              style: simple
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.brands.manage
      summary: Replace the Preview Error Page
      tags:
      - Customization
  /api/v1/brands/{brandId}/pages/sign-in:
    get:
      description: Retrieves the sign-in page
      operationId: getSignInPage
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      - description: Specifies additional metadata to be included in the response.
        explode: false
        in: query
        name: expand
        required: false
        schema:
          items:
            enum:
            - default
            - customized
            - customizedUrl
            - preview
            - previewUrl
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageRoot'
          description: Successfully retrieved the sign-in page.
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.brands.read
      summary: Retrieve the Sign-in Page
      tags:
      - Customization
  /api/v1/brands/{brandId}/pages/sign-in/customized:
    delete:
      description: Resets the customized sign-in page
      operationId: resetCustomizedSignInPage
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Successfully reset the sign-in page.
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.brands.manage
      summary: Reset the Customized Sign-in Page
      tags:
      - Customization
    get:
      description: Retrieves the customized sign-in page
      operationId: getCustomizedSignInPage
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignInPage'
          description: Successfully retrieved the customized sign-in page.
          headers:
            Location:
              explode: false
              schema:
                format: uri
                type: string
              style: simple
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.brands.read
      summary: Retrieve the Customized Sign-in Page
      tags:
      - Customization
    put:
      description: Replaces the customized sign-in page
      operationId: replaceCustomizedSignInPage
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInPage'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignInPage'
          description: Successfully replaced the customized sign-in page.
          headers:
            Location:
              explode: false
              schema:
                format: uri
                type: string
              style: simple
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.brands.manage
      summary: Replace the Customized Sign-in Page
      tags:
      - Customization
  /api/v1/brands/{brandId}/pages/sign-in/default:
    get:
      description: Retrieves the default sign-in page
      operationId: getDefaultSignInPage
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignInPage'
          description: Successfully retrieved the default sign-in page.
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.brands.read
      summary: Retrieve the Default Sign-in Page
      tags:
      - Customization
  /api/v1/brands/{brandId}/pages/sign-in/preview:
    delete:
      description: Resets the preview sign-in page
      operationId: resetPreviewSignInPage
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Successfully reset the preview sign-in page.
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.brands.manage
      summary: Reset the Preview Sign-in Page
      tags:
      - Customization
    get:
      description: Retrieves the preview sign-in page
      operationId: getPreviewSignInPage
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignInPage'
          description: Successfully retrieved the preview sign-in page.
          headers:
            Location:
              explode: false
              schema:
                format: uri
                type: string
              style: simple
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.brands.read
      summary: Retrieve the Preview Sign-in Page Preview
      tags:
      - Customization
    put:
      description: Replaces the preview sign-in page
      operationId: replacePreviewSignInPage
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInPage'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignInPage'
          description: Successfully replaced the preview sign-in page.
          headers:
            Location:
              explode: false
              schema:
                format: uri
                type: string
              style: simple
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.brands.manage
      summary: Replace the Preview Sign-in Page
      tags:
      - Customization
  /api/v1/brands/{brandId}/pages/sign-in/widget-versions:
    get:
      description: Lists all sign-in widget versions
      operationId: listAllSignInWidgetVersions
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  pattern: ^\d+\.\d+$
                  type: string
                type: array
          description: Successfully listed the sign-in widget versions.
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.brands.read
      summary: List all Sign-in Widget Versions
      tags:
      - Customization
  /api/v1/brands/{brandId}/pages/sign-out/customized:
    get:
      description: Retrieves the sign-out page settings
      operationId: getSignOutPageSettings
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostedPage'
          description: Successfully retrieved the sign-out page settings.
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.brands.read
      summary: Retrieve the Sign-out Page Settings
      tags:
      - Customization
    put:
      description: Replaces the sign-out page settings
      operationId: replaceSignOutPageSettings
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostedPage'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostedPage'
          description: Successfully replaced the sign-out page settings.
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.brands.manage
      summary: Replace the Sign-out Page Settings
      tags:
      - Customization
  /api/v1/brands/{brandId}/templates/email:
    get:
      description: Lists all email templates
      operationId: listEmailTemplates
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      - description: "The cursor to use for pagination. It is an opaque string that\
          \ specifies your current location in the list and is obtained from the `Link`\
          \ response header. See [Pagination](/#pagination) for more information."
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - description: A limit on the number of objects to return.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          maximum: 200
          minimum: 1
          type: integer
        style: form
      - description: Specifies additional metadata to be included in the response.
        explode: false
        in: query
        name: expand
        required: false
        schema:
          items:
            enum:
            - settings
            - customizationCount
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                List email templates response:
                  $ref: '#/components/examples/ListEmailTemplateResponse'
              schema:
                items:
                  $ref: '#/components/schemas/EmailTemplate'
                type: array
          description: Successfully returned the list of email templates.
          headers:
            Link:
              description: "The pagination header containing links to the current\
                \ and next page of results. See [Pagination](/#pagination) for more\
                \ information."
              explode: false
              schema:
                type: string
              style: simple
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.templates.read
      summary: List all Email Templates
      tags:
      - Customization
  /api/v1/brands/{brandId}/templates/email/{templateName}:
    get:
      description: Retrieves the details of an email template by name
      operationId: getEmailTemplate
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the email template.
        explode: false
        in: path
        name: templateName
        required: true
        schema:
          type: string
        style: simple
      - description: Specifies additional metadata to be included in the response.
        explode: false
        in: query
        name: expand
        required: false
        schema:
          items:
            enum:
            - settings
            - customizationCount
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                Get email template response:
                  $ref: '#/components/examples/GetEmailTemplateResponse'
              schema:
                $ref: '#/components/schemas/EmailTemplate'
          description: Successfully retrieved the email template.
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.templates.read
      summary: Retrieve an Email Template
      tags:
      - Customization
  /api/v1/brands/{brandId}/templates/email/{templateName}/customizations:
    delete:
      description: Deletes all customizations for an email template
      operationId: deleteAllCustomizations
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the email template.
        explode: false
        in: path
        name: templateName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Successfully deleted all customizations for the email template.
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.templates.manage
      summary: Delete all Email Customizations
      tags:
      - Customization
    get:
      description: Lists all customizations of an email template
      operationId: listEmailCustomizations
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the email template.
        explode: false
        in: path
        name: templateName
        required: true
        schema:
          type: string
        style: simple
      - description: "The cursor to use for pagination. It is an opaque string that\
          \ specifies your current location in the list and is obtained from the `Link`\
          \ response header. See [Pagination](/#pagination) for more information."
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - description: A limit on the number of objects to return.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          maximum: 200
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                List Email customizations response:
                  $ref: '#/components/examples/ListEmailCustomizationResponse'
              schema:
                items:
                  $ref: '#/components/schemas/EmailCustomization'
                type: array
          description: Successfully retrieved all email customizations for the specified
            email template.
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.templates.read
      summary: List all Email Customizations
      tags:
      - Customization
    post:
      description: Creates a new email customization
      operationId: createEmailCustomization
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the email template.
        explode: false
        in: path
        name: templateName
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              Create email customization request:
                $ref: '#/components/examples/CreateUpdateEmailCustomizationRequest'
            schema:
              $ref: '#/components/schemas/EmailCustomization'
      responses:
        "201":
          content:
            application/json:
              examples:
                Create email customization response:
                  $ref: '#/components/examples/CreateUpdateEmailCustomizationResponse'
              schema:
                $ref: '#/components/schemas/EmailCustomization'
          description: Successfully created the email customization.
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "409":
          content:
            application/json:
              examples:
                Default email customization already exists:
                  $ref: '#/components/examples/ErrorEmailCustomizationDefaultAlreadyExists'
                Email customization already exists for the specified language:
                  $ref: '#/components/examples/ErrorEmailCustomizationLanguageAlreadyExists'
              schema:
                $ref: '#/components/schemas/Error'
          description: Could not create the email customization because it conflicts
            with an existing email customization.
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.templates.manage
      summary: Create an Email Customization
      tags:
      - Customization
      x-codegen-request-body-name: instance
  /api/v1/brands/{brandId}/templates/email/{templateName}/customizations/{customizationId}:
    delete:
      description: Deletes an email customization by its unique identifier
      operationId: deleteEmailCustomization
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the email template.
        explode: false
        in: path
        name: templateName
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the email customization.
        explode: false
        in: path
        name: customizationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Successfully deleted the email customization.
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "409":
          content:
            application/json:
              examples:
                Cannot delete default email customization:
                  $ref: '#/components/examples/ErrorEmailCustomizationCannotDeleteDefault'
              schema:
                $ref: '#/components/schemas/Error'
          description: Could not delete the email customization deleted because it
            is the default email customization.
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.templates.manage
      summary: Delete an Email Customization
      tags:
      - Customization
    get:
      description: Retrieves an email customization by its unique identifier
      operationId: getEmailCustomization
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the email template.
        explode: false
        in: path
        name: templateName
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the email customization.
        explode: false
        in: path
        name: customizationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Get email customization response:
                  $ref: '#/components/examples/EmailCustomizationResponse'
              schema:
                $ref: '#/components/schemas/EmailCustomization'
          description: Successfully retrieved the email customization.
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.templates.read
      summary: Retrieve an Email Customization
      tags:
      - Customization
    put:
      description: Replaces an existing email customization using the property values
        provided
      operationId: replaceEmailCustomization
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the email template.
        explode: false
        in: path
        name: templateName
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the email customization.
        explode: false
        in: path
        name: customizationId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              Update email customization request:
                $ref: '#/components/examples/CreateUpdateEmailCustomizationRequest'
            schema:
              $ref: '#/components/schemas/EmailCustomization'
        description: Request
      responses:
        "200":
          content:
            application/json:
              examples:
                Update email customization response:
                  $ref: '#/components/examples/CreateUpdateEmailCustomizationResponse'
              schema:
                $ref: '#/components/schemas/EmailCustomization'
          description: Successfully updated the email customization.
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "409":
          content:
            application/json:
              examples:
                Default email customization already exists:
                  $ref: '#/components/examples/ErrorEmailCustomizationDefaultAlreadyExists'
                Email customization already exists for the specified language:
                  $ref: '#/components/examples/ErrorEmailCustomizationLanguageAlreadyExists'
                Cannot set the default email customization's isDefault to false:
                  $ref: '#/components/examples/ErrorEmailCustomizationCannotClearDefault'
              schema:
                $ref: '#/components/schemas/Error'
          description: Could not update the email customization because the update
            would cause a conflict with an existing email customization.
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.templates.manage
      summary: Replace an Email Customization
      tags:
      - Customization
      x-codegen-request-body-name: instance
  /api/v1/brands/{brandId}/templates/email/{templateName}/customizations/{customizationId}/preview:
    get:
      description: "Retrieves a preview of an email customization. All variable references\
        \ (e.g., `${user.profile.firstName}`) are populated using the current user's\
        \ context."
      operationId: getCustomizationPreview
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the email template.
        explode: false
        in: path
        name: templateName
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the email customization.
        explode: false
        in: path
        name: customizationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Preview email customization response:
                  $ref: '#/components/examples/PreviewEmailCustomizationResponse'
              schema:
                $ref: '#/components/schemas/EmailPreview'
          description: Successfully generated a preview of the email customization.
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.templates.read
      summary: Retrieve a Preview of an Email Customization
      tags:
      - Customization
  /api/v1/brands/{brandId}/templates/email/{templateName}/default-content:
    get:
      description: Retrieves an email template's default content
      operationId: getEmailDefaultContent
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the email template.
        explode: false
        in: path
        name: templateName
        required: true
        schema:
          type: string
        style: simple
      - description: The language to use for the email. Defaults to the current user's
          language if unspecified.
        explode: true
        in: query
        name: language
        required: false
        schema:
          $ref: '#/components/schemas/Language'
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                Get email template default content response:
                  $ref: '#/components/examples/EmailTemplateDefaultContentResponse'
              schema:
                $ref: '#/components/schemas/EmailDefaultContent'
          description: Successfully retrieved the email template's default content.
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.templates.read
      summary: Retrieve an Email Template Default Content
      tags:
      - Customization
  /api/v1/brands/{brandId}/templates/email/{templateName}/default-content/preview:
    get:
      description: "Retrieves a preview of an email template's default content. All\
        \ variable references (e.g., `${user.profile.firstName}`) are populated using\
        \ the current user's context."
      operationId: getEmailDefaultPreview
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the email template.
        explode: false
        in: path
        name: templateName
        required: true
        schema:
          type: string
        style: simple
      - description: The language to use for the email. Defaults to the current user's
          language if unspecified.
        explode: true
        in: query
        name: language
        required: false
        schema:
          $ref: '#/components/schemas/Language'
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                Preview email template default content response:
                  $ref: '#/components/examples/PreviewEmailTemplateDefaultContentResponse'
              schema:
                $ref: '#/components/schemas/EmailPreview'
          description: Successfully generated a preview of the email template's default
            content.
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.templates.read
      summary: Retrieve a Preview of the Email Template Default Content
      tags:
      - Customization
  /api/v1/brands/{brandId}/templates/email/{templateName}/settings:
    get:
      description: Retrieves an email template's settings
      operationId: getEmailSettings
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the email template.
        explode: false
        in: path
        name: templateName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Get email template settings response:
                  $ref: '#/components/examples/EmailSettingsResponse'
              schema:
                $ref: '#/components/schemas/EmailSettings'
          description: Successfully retrieved the email template's settings.
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.templates.read
      summary: Retrieve the Email Template Settings
      tags:
      - Customization
    put:
      description: Replaces an email template's settings
      operationId: replaceEmailSettings
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the email template.
        explode: false
        in: path
        name: templateName
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailSettings'
      responses:
        "204":
          description: Successfully updated the email template's settings.
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              examples:
                Invalid email template recipients:
                  $ref: '#/components/examples/ErrorInvalidEmailTemplateRecipients'
              schema:
                $ref: '#/components/schemas/Error'
          description: Could not update the email template's settings due to an invalid
            setting value.
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.templates.manage
      summary: Replace the Email Template Settings
      tags:
      - Customization
  /api/v1/brands/{brandId}/templates/email/{templateName}/test:
    post:
      description: "Sends a test email to the current user’s primary and secondary\
        \ email addresses. The email content is selected based on the following priority:\n\
        1. The email customization for the language specified in the `language` query\
        \ parameter.\n2. The email template's default customization.\n3. The email\
        \ template’s default content, translated to the current user's language."
      operationId: sendTestEmail
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the email template.
        explode: false
        in: path
        name: templateName
        required: true
        schema:
          type: string
        style: simple
      - description: The language to use for the email. Defaults to the current user's
          language if unspecified.
        explode: true
        in: query
        name: language
        required: false
        schema:
          $ref: '#/components/schemas/Language'
        style: form
      responses:
        "204":
          content: {}
          description: Successfully sent a test email.
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.templates.read
      summary: Send a Test Email
      tags:
      - Customization
  /api/v1/brands/{brandId}/themes:
    get:
      description: Lists all the themes in your brand
      operationId: listBrandThemes
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ThemeResponse'
                type: array
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.brands.read
      summary: List all Themes
      tags:
      - Customization
  /api/v1/brands/{brandId}/themes/{themeId}:
    get:
      description: Retrieves a theme for a brand
      operationId: getBrandTheme
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the theme.
        explode: false
        in: path
        name: themeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThemeResponse'
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.brands.read
      summary: Retrieve a Theme
      tags:
      - Customization
    put:
      description: Replaces a theme for a brand
      operationId: replaceBrandTheme
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the theme.
        explode: false
        in: path
        name: themeId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Theme'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThemeResponse'
          description: OK
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.brands.manage
      summary: Replace a Theme
      tags:
      - Customization
      x-codegen-request-body-name: theme
  /api/v1/brands/{brandId}/themes/{themeId}/background-image:
    delete:
      description: Deletes a Theme background image
      operationId: deleteBrandThemeBackgroundImage
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the theme.
        explode: false
        in: path
        name: themeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.brands.manage
      summary: Delete the Background Image
      tags:
      - Customization
    post:
      description: "Uploads and replaces the background image for the theme. The file\
        \ must be in PNG, JPG, or GIF format and less than 2 MB in size."
      operationId: uploadBrandThemeBackgroundImage
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the theme.
        explode: false
        in: path
        name: themeId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/uploadBrandThemeBackgroundImage_request'
        description: background image file
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageUploadResponse'
          description: Created
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.brands.manage
      summary: Upload the Background Image
      tags:
      - Customization
  /api/v1/brands/{brandId}/themes/{themeId}/favicon:
    delete:
      description: Deletes a Theme favicon. The theme will use the default Okta favicon.
      operationId: deleteBrandThemeFavicon
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the theme.
        explode: false
        in: path
        name: themeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.brands.manage
      summary: Delete the Favicon
      tags:
      - Customization
    post:
      description: Uploads and replaces the favicon for the theme
      operationId: uploadBrandThemeFavicon
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the theme.
        explode: false
        in: path
        name: themeId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/uploadBrandThemeFavicon_request'
        description: favicon file
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageUploadResponse'
          description: Created
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.brands.manage
      summary: Upload the Favicon
      tags:
      - Customization
  /api/v1/brands/{brandId}/themes/{themeId}/logo:
    delete:
      description: Deletes a Theme logo. The theme will use the default Okta logo.
      operationId: deleteBrandThemeLogo
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the theme.
        explode: false
        in: path
        name: themeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.brands.manage
      summary: Delete the Logo
      tags:
      - Customization
    post:
      description: "Uploads and replaces the logo for the theme. The file must be\
        \ in PNG, JPG, or GIF format and less than 100kB in size. For best results\
        \ use landscape orientation, a transparent background, and a minimum size\
        \ of 300px by 50px to prevent upscaling."
      operationId: uploadBrandThemeLogo
      parameters:
      - description: The ID of the brand.
        explode: false
        in: path
        name: brandId
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the theme.
        explode: false
        in: path
        name: themeId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/uploadBrandThemeLogo_request'
        description: logo file
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageUploadResponse'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.brands.manage
      summary: Upload the Logo
      tags:
      - Customization
  /api/v1/captchas:
    get:
      description: Lists all CAPTCHA instances with pagination support. A subset of
        CAPTCHA instances can be returned that match a supported filter expression
        or query.
      operationId: listCaptchaInstances
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CAPTCHAInstance'
                type: array
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.captchas.read
      summary: List all CAPTCHA instances
      tags:
      - CAPTCHA
    post:
      description: "Creates a new CAPTCHA instance. In the current release, we only\
        \ allow one CAPTCHA instance per org."
      operationId: createCaptchaInstance
      requestBody:
        content:
          application/json:
            examples:
              HCaptcha:
                $ref: '#/components/examples/CAPTCHAInstanceRequestHCaptcha'
              ReCaptcha:
                $ref: '#/components/examples/CAPTCHAInstanceRequestReCaptcha'
            schema:
              $ref: '#/components/schemas/CAPTCHAInstance'
        required: true
      responses:
        "201":
          content:
            application/json:
              examples:
                HCaptcha:
                  $ref: '#/components/examples/CAPTCHAInstanceResponseHCaptcha'
                ReCaptcha:
                  $ref: '#/components/examples/CAPTCHAInstanceResponseReCaptcha'
              schema:
                $ref: '#/components/schemas/CAPTCHAInstance'
          description: Created
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
                Error Limit of One CAPTCHA instance per org:
                  $ref: '#/components/examples/ErrorCAPTCHALimitOfOne'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.captchas.manage
      summary: Create a CAPTCHA instance
      tags:
      - CAPTCHA
      x-codegen-request-body-name: instance
  /api/v1/captchas/{captchaId}:
    delete:
      description: "Deletes a CAPTCHA instance by `captchaId`. If the CAPTCHA instance\
        \ is currently being used in the org, the delete will not be allowed."
      operationId: deleteCaptchaInstance
      parameters:
      - description: id of the CAPTCHA
        explode: false
        in: path
        name: captchaId
        required: true
        schema:
          example: abcd1234
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
                Cannot remove CAPTCHA in use:
                  $ref: '#/components/examples/ErrorCAPTCHAOrgWideSetting'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.captchas.manage
      summary: Delete a CAPTCHA Instance
      tags:
      - CAPTCHA
    get:
      description: Retrieves a CAPTCHA instance by `captchaId`
      operationId: getCaptchaInstance
      parameters:
      - description: id of the CAPTCHA
        explode: false
        in: path
        name: captchaId
        required: true
        schema:
          example: abcd1234
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                HCaptcha:
                  $ref: '#/components/examples/CAPTCHAInstanceResponseHCaptcha'
                ReCaptcha:
                  $ref: '#/components/examples/CAPTCHAInstanceResponseReCaptcha'
              schema:
                $ref: '#/components/schemas/CAPTCHAInstance'
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.captchas.read
      summary: Retrieve a CAPTCHA Instance
      tags:
      - CAPTCHA
    post:
      description: Partially updates a CAPTCHA instance by `captchaId`
      operationId: updateCaptchaInstance
      parameters:
      - description: id of the CAPTCHA
        explode: false
        in: path
        name: captchaId
        required: true
        schema:
          example: abcd1234
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              HCaptcha:
                $ref: '#/components/examples/CAPTCHAInstanceRequestHCaptcha'
              ReCaptcha:
                $ref: '#/components/examples/CAPTCHAInstanceRequestReCaptcha'
            schema:
              $ref: '#/components/schemas/CAPTCHAInstance'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                HCaptcha:
                  $ref: '#/components/examples/CAPTCHAInstanceResponseHCaptcha'
                ReCaptcha:
                  $ref: '#/components/examples/CAPTCHAInstanceResponseReCaptcha'
              schema:
                $ref: '#/components/schemas/CAPTCHAInstance'
          description: OK
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.captchas.manage
      summary: Update a CAPTCHA instance
      tags:
      - CAPTCHA
      x-codegen-request-body-name: instance
    put:
      description: Replaces a CAPTCHA instance by `captchaId`
      operationId: replaceCaptchaInstance
      parameters:
      - description: id of the CAPTCHA
        explode: false
        in: path
        name: captchaId
        required: true
        schema:
          example: abcd1234
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              HCaptcha:
                $ref: '#/components/examples/CAPTCHAInstanceRequestHCaptcha'
              ReCaptcha:
                $ref: '#/components/examples/CAPTCHAInstanceRequestReCaptcha'
            schema:
              $ref: '#/components/schemas/CAPTCHAInstance'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                HCaptcha:
                  $ref: '#/components/examples/CAPTCHAInstanceResponseHCaptcha'
                ReCaptcha:
                  $ref: '#/components/examples/CAPTCHAInstanceResponseReCaptcha'
              schema:
                $ref: '#/components/schemas/CAPTCHAInstance'
          description: OK
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.captchas.manage
      summary: Replace a CAPTCHA instance
      tags:
      - CAPTCHA
      x-codegen-request-body-name: instance
  /api/v1/device-assurances:
    get:
      description: Lists all device assurance policies
      operationId: listDeviceAssurancePolicies
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DeviceAssurance'
                type: array
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.deviceAssurance.read
      summary: List all Device Assurance Policies
      tags:
      - DeviceAssurance
    post:
      description: Creates a new Device Assurance Policy
      operationId: createDeviceAssurancePolicy
      requestBody:
        content:
          application/json:
            examples:
              ANDROID:
                $ref: '#/components/examples/DeviceAssuranceAndroidRequest'
              MACOS:
                $ref: '#/components/examples/DeviceAssuranceMacOSRequest'
              WINDOWS:
                $ref: '#/components/examples/DeviceAssuranceWindowsRequest'
              IOS:
                $ref: '#/components/examples/DeviceAssuranceIosRequest'
            schema:
              $ref: '#/components/schemas/DeviceAssurance'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                DeviceAssuranceResponse:
                  $ref: '#/components/examples/DeviceAssuranceResponse'
              schema:
                $ref: '#/components/schemas/DeviceAssurance'
          description: OK
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.deviceAssurance.manage
      summary: Create a Device Assurance Policy
      tags:
      - DeviceAssurance
      x-codegen-request-body-name: deviceAssurance
  /api/v1/device-assurances/{deviceAssuranceId}:
    delete:
      description: "Deletes a Device Assurance Policy by `deviceAssuranceId`. If the\
        \ Device Assurance Policy is currently being used in the org Authentication\
        \ Policies, the delete will not be allowed."
      operationId: deleteDeviceAssurancePolicy
      parameters:
      - description: Id of the Device Assurance Policy
        explode: false
        in: path
        name: deviceAssuranceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "409":
          content:
            application/json:
              examples:
                Cannot delete device assurance policy in use by authentication policies:
                  $ref: '#/components/examples/ErrorDeviceAssuranceInUse'
              schema:
                $ref: '#/components/schemas/Error'
          description: Conflict
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.deviceAssurance.manage
      summary: Delete a Device Assurance Policy
      tags:
      - DeviceAssurance
    get:
      description: Retrieves a Device Assurance Policy by `deviceAssuranceId`
      operationId: getDeviceAssurancePolicy
      parameters:
      - description: Id of the Device Assurance Policy
        explode: false
        in: path
        name: deviceAssuranceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                DeviceAssuranceResponse:
                  $ref: '#/components/examples/DeviceAssuranceResponse'
              schema:
                $ref: '#/components/schemas/DeviceAssurance'
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.deviceAssurance.read
      summary: Retrieve a Device Assurance Policy
      tags:
      - DeviceAssurance
    put:
      description: Replaces a Device Assurance Policy by `deviceAssuranceId`
      operationId: replaceDeviceAssurancePolicy
      parameters:
      - description: Id of the Device Assurance Policy
        explode: false
        in: path
        name: deviceAssuranceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              DeviceAssuranceResponse:
                $ref: '#/components/examples/DeviceAssuranceResponse'
            schema:
              $ref: '#/components/schemas/DeviceAssurance'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                DeviceAssuranceResponse:
                  $ref: '#/components/examples/DeviceAssuranceResponse'
              schema:
                $ref: '#/components/schemas/DeviceAssurance'
          description: OK
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.deviceAssurance.manage
      summary: Replace a Device Assurance Policy
      tags:
      - DeviceAssurance
      x-codegen-request-body-name: deviceAssurance
  /api/v1/devices:
    get:
      description: "Lists all devices with pagination support.\n\nA subset of Devices\
        \ can be returned that match a supported search criteria using the `search`\
        \ query parameter.\n\nSearches for devices based on the properties specified\
        \ in the `search` parameter conforming SCIM filter specifications (case-insensitive).\
        \ This data is eventually consistent. The API returns different results depending\
        \ on specified queries in the request. Empty list is returned if no objects\
        \ match `search` request.\n\n> **Note:** Listing devices with `search` should\
        \ not be used as a part of any critical flows—such as authentication or updates—\
        to prevent potential data loss. `search` results may not reflect the latest\
        \ information, as this endpoint uses a search index which may not be up-to-date\
        \ with recent updates to the object. <br> Don't use search results directly\
        \ for record updates, as the data might be stale and therefore overwrite newer\
        \ data, resulting in data loss. <br> Use an `id` lookup for records that you\
        \ update to ensure your results contain the latest data.\n\nThis operation\
        \ equires [URL encoding](http://en.wikipedia.org/wiki/Percent-encoding). For\
        \ example, `search=profile.displayName eq \"Bob\"` is encoded as `search=profile.displayName%20eq%20%22Bob%22`."
      operationId: listDevices
      parameters:
      - description: "The cursor to use for pagination. It is an opaque string that\
          \ specifies your current location in the list and is obtained from the `Link`\
          \ response header. See [Pagination](/#pagination) for more information."
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - description: A limit on the number of objects to return.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          maximum: 200
          minimum: 1
          type: integer
        style: form
      - description: "SCIM filter expression that filters the results. Searches include\
          \ all Device `profile` properties, as well as the Device `id`, `status`\
          \ and `lastUpdated` properties."
        examples:
          Devices that have a `status` of `ACTIVE`:
            value: status eq "ACTIVE"
          Devices last updated after a specific timestamp:
            value: lastUpdated gt "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
          Devices with a specified `id`:
            value: id eq "guo4a5u7JHHhjXrMK0g4"
          Devices that have a `displayName` of `Bob`:
            value: profile.displayName eq "Bob"
          Devices that have an `platform` of `WINDOWS`:
            value: profile.platform eq "WINDOWS"
          Devices whose `sid` starts with `S-1`:
            value: profile.sid sw "S-1"
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Device'
                type: array
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.devices.read
      summary: List all Devices
      tags:
      - Device
  /api/v1/devices/{deviceId}:
    delete:
      description: Deletes a device by `deviceId`
      operationId: deleteDevice
      parameters:
      - description: '`id` of the device'
        explode: false
        in: path
        name: deviceId
        required: true
        schema:
          example: guo4a5u7JHHhjXrMK0g4
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.devices.manage
      summary: Delete a Device
      tags:
      - Device
    get:
      description: Retrieves a device by `deviceId`
      operationId: getDevice
      parameters:
      - description: '`id` of the device'
        explode: false
        in: path
        name: deviceId
        required: true
        schema:
          example: guo4a5u7JHHhjXrMK0g4
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Response:
                  $ref: '#/components/examples/DeviceResponse'
              schema:
                $ref: '#/components/schemas/Device'
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.devices.read
      summary: Retrieve a Device
      tags:
      - Device
  /api/v1/devices/{deviceId}/lifecycle/activate:
    post:
      description: Activates a device by `deviceId`
      operationId: activateDevice
      parameters:
      - description: '`id` of the device'
        explode: false
        in: path
        name: deviceId
        required: true
        schema:
          example: guo4a5u7JHHhjXrMK0g4
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.devices.manage
      summary: Activate a Device
      tags:
      - Device
  /api/v1/devices/{deviceId}/lifecycle/deactivate:
    post:
      description: Deactivates a device by `deviceId`
      operationId: deactivateDevice
      parameters:
      - description: '`id` of the device'
        explode: false
        in: path
        name: deviceId
        required: true
        schema:
          example: guo4a5u7JHHhjXrMK0g4
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.devices.manage
      summary: Deactivate a Device
      tags:
      - Device
  /api/v1/devices/{deviceId}/lifecycle/suspend:
    post:
      description: Suspends a device by `deviceId`
      operationId: suspendDevice
      parameters:
      - description: '`id` of the device'
        explode: false
        in: path
        name: deviceId
        required: true
        schema:
          example: guo4a5u7JHHhjXrMK0g4
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.devices.manage
      summary: Suspend a Device
      tags:
      - Device
  /api/v1/devices/{deviceId}/lifecycle/unsuspend:
    post:
      description: Unsuspends a device by `deviceId`
      operationId: unsuspendDevice
      parameters:
      - description: '`id` of the device'
        explode: false
        in: path
        name: deviceId
        required: true
        schema:
          example: guo4a5u7JHHhjXrMK0g4
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.devices.manage
      summary: Unsuspend a Device
      tags:
      - Device
  /api/v1/domains:
    get:
      description: Lists all verified custom Domains for the org
      operationId: listDomains
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainListResponse'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.domains.read
      summary: List all Domains
      tags:
      - Domain
    post:
      description: Creates your domain
      operationId: createDomain
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Domain'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainResponse'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.domains.manage
      summary: Create a Domain
      tags:
      - Domain
      x-codegen-request-body-name: domain
  /api/v1/domains/{domainId}:
    delete:
      description: Deletes a Domain by `id`
      operationId: deleteDomain
      parameters:
      - explode: false
        in: path
        name: domainId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.domains.manage
      summary: Delete a Domain
      tags:
      - Domain
    get:
      description: Retrieves a Domain by `id`
      operationId: getDomain
      parameters:
      - explode: false
        in: path
        name: domainId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainResponse'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.domains.read
      summary: Retrieve a Domain
      tags:
      - Domain
    put:
      description: Replaces a Domain by `id`
      operationId: replaceDomain
      parameters:
      - explode: false
        in: path
        name: domainId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDomain'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainResponse'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.domains.manage
      summary: Replace a Domain's brandId
      tags:
      - Domain
  /api/v1/domains/{domainId}/certificate:
    put:
      description: Creates or replaces the certificate for the domain
      operationId: upsertCertificate
      parameters:
      - explode: false
        in: path
        name: domainId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainCertificate'
        required: true
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.domains.manage
      summary: Upsert the Certificate
      tags:
      - Domain
      x-codegen-request-body-name: certificate
  /api/v1/domains/{domainId}/verify:
    post:
      description: Verifies the Domain by `id`
      operationId: verifyDomain
      parameters:
      - explode: false
        in: path
        name: domainId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainResponse'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.domains.manage
      summary: Verify a Domain
      tags:
      - Domain
  /api/v1/email-domains:
    get:
      description: Lists all the email domains in your org
      operationId: listEmailDomains
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailDomainListResponse'
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.email-domains.read
      summary: List all email domains
      tags:
      - EmailDomain
    post:
      description: Creates a custom email domain
      operationId: createEmailDomain
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailDomain'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailDomainResponse'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.email-domains.manage
      summary: Create an Email Domain
      tags:
      - EmailDomain
      x-codegen-request-body-name: emailDomain
  /api/v1/email-domains/{emailDomainId}:
    delete:
      description: Deletes an Email Domain by `emailDomainId`
      operationId: deleteEmailDomain
      parameters:
      - explode: false
        in: path
        name: emailDomainId
        required: true
        schema:
          description: The ID of the email domain.
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.email-domains.manage
      summary: Delete an Email Domain
      tags:
      - EmailDomain
    get:
      description: Retrieves an Email Domain by `emailDomainId`
      operationId: getEmailDomain
      parameters:
      - explode: false
        in: path
        name: emailDomainId
        required: true
        schema:
          description: The ID of the email domain.
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailDomainResponse'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.email-domains.read
      summary: Retrieve a Email Domain
      tags:
      - EmailDomain
    put:
      description: Replaces an email domain by `emailDomainId`
      operationId: replaceEmailDomain
      parameters:
      - explode: false
        in: path
        name: emailDomainId
        required: true
        schema:
          description: The ID of the email domain.
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEmailDomain'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailDomainResponse'
          description: OK
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.email-domains.manage
      summary: Replace an Email Domain
      tags:
      - EmailDomain
      x-codegen-request-body-name: updateEmailDomain
  /api/v1/email-domains/{emailDomainId}/brands:
    get:
      description: Lists all brands linked to an email domain
      operationId: listEmailDomainBrands
      parameters:
      - explode: false
        in: path
        name: emailDomainId
        required: true
        schema:
          description: The ID of the email domain.
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Brand'
                type: array
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.email-domains.read
      summary: List all brands linked to an email domain
      tags:
      - EmailDomain
  /api/v1/email-domains/{emailDomainId}/verify:
    post:
      description: Verifies an Email Domain by `emailDomainId`
      operationId: verifyEmailDomain
      parameters:
      - explode: false
        in: path
        name: emailDomainId
        required: true
        schema:
          description: The ID of the email domain.
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailDomainResponse'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.email-domains.manage
      summary: Verify an Email Domain
      tags:
      - EmailDomain
  /api/v1/eventHooks:
    get:
      description: Lists all event hooks
      operationId: listEventHooks
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/EventHook'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.eventHooks.read
      summary: List all Event Hooks
      tags:
      - EventHook
    post:
      description: Creates an event hook
      operationId: createEventHook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventHook'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventHook'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.eventHooks.manage
      summary: Create an Event Hook
      tags:
      - EventHook
      x-codegen-request-body-name: eventHook
  /api/v1/eventHooks/{eventHookId}:
    delete:
      description: Deletes an event hook
      operationId: deleteEventHook
      parameters:
      - explode: false
        in: path
        name: eventHookId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.eventHooks.manage
      summary: Delete an Event Hook
      tags:
      - EventHook
    get:
      description: Retrieves an event hook
      operationId: getEventHook
      parameters:
      - explode: false
        in: path
        name: eventHookId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventHook'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.eventHooks.read
      summary: Retrieve an Event Hook
      tags:
      - EventHook
    put:
      description: Replaces an event hook
      operationId: replaceEventHook
      parameters:
      - explode: false
        in: path
        name: eventHookId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventHook'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventHook'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.eventHooks.manage
      summary: Replace an Event Hook
      tags:
      - EventHook
      x-codegen-request-body-name: eventHook
  /api/v1/eventHooks/{eventHookId}/lifecycle/activate:
    post:
      description: Activates an event hook
      operationId: activateEventHook
      parameters:
      - explode: false
        in: path
        name: eventHookId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventHook'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.eventHooks.manage
      summary: Activate an Event Hook
      tags:
      - EventHook
  /api/v1/eventHooks/{eventHookId}/lifecycle/deactivate:
    post:
      description: Deactivates an event hook
      operationId: deactivateEventHook
      parameters:
      - explode: false
        in: path
        name: eventHookId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventHook'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.eventHooks.manage
      summary: Deactivate an Event Hook
      tags:
      - EventHook
  /api/v1/eventHooks/{eventHookId}/lifecycle/verify:
    post:
      description: Verifies an event hook
      operationId: verifyEventHook
      parameters:
      - explode: false
        in: path
        name: eventHookId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventHook'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.eventHooks.manage
      summary: Verify an Event Hook
      tags:
      - EventHook
  /api/v1/features:
    get:
      description: Lists all features
      operationId: listFeatures
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Feature'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.features.read
      summary: List all Features
      tags:
      - Feature
  /api/v1/features/{featureId}:
    get:
      description: Retrieves a feature
      operationId: getFeature
      parameters:
      - explode: false
        in: path
        name: featureId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feature'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.features.read
      summary: Retrieve a Feature
      tags:
      - Feature
  /api/v1/features/{featureId}/dependencies:
    get:
      description: Lists all dependencies
      operationId: listFeatureDependencies
      parameters:
      - explode: false
        in: path
        name: featureId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Feature'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.features.read
      summary: List all Dependencies
      tags:
      - Feature
  /api/v1/features/{featureId}/dependents:
    get:
      description: Lists all dependents
      operationId: listFeatureDependents
      parameters:
      - explode: false
        in: path
        name: featureId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Feature'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.features.read
      summary: List all Dependents
      tags:
      - Feature
  /api/v1/features/{featureId}/{lifecycle}:
    post:
      description: Updates a feature lifecycle
      operationId: updateFeatureLifecycle
      parameters:
      - explode: false
        in: path
        name: featureId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: lifecycle
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: mode
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feature'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.features.manage
      summary: Update a Feature Lifecycle
      tags:
      - Feature
  /api/v1/groups:
    get:
      description: Lists all groups with pagination support. A subset of groups can
        be returned that match a supported filter expression or query.
      operationId: listGroups
      parameters:
      - description: Searches the name property of groups for matching value
        explode: true
        in: query
        name: q
        required: false
        schema:
          type: string
        style: form
      - description: Filter expression for groups
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: Specifies the pagination cursor for the next page of groups
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - description: Specifies the number of group results in a page
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10000
          format: int32
          type: integer
        style: form
      - description: "If specified, it causes additional metadata to be included in\
          \ the response."
        explode: true
        in: query
        name: expand
        required: false
        schema:
          type: string
        style: form
      - description: "Searches for groups with a supported filtering expression for\
          \ all attributes except for _embedded, _links, and objectClass"
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Group'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.groups.read
      summary: List all Groups
      tags:
      - Group
    post:
      description: Creates a new group with `OKTA_GROUP` type
      operationId: createGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.groups.manage
      summary: Create a Group
      tags:
      - Group
      x-codegen-request-body-name: group
  /api/v1/groups/rules:
    get:
      description: Lists all group rules
      operationId: listGroupRules
      parameters:
      - description: Specifies the number of rule results in a page
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 50
          format: int32
          type: integer
        style: form
      - description: Specifies the pagination cursor for the next page of rules
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - description: Specifies the keyword to search fules for
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: "If specified as `groupIdToGroupNameMap`, then show group names"
        explode: true
        in: query
        name: expand
        required: false
        schema:
          type: string
        style: form
        x-okta-added-version: 1.3.0
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GroupRule'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.groups.read
      summary: List all Group Rules
      tags:
      - Group
    post:
      description: Creates a group rule to dynamically add users to the specified
        group if they match the condition
      operationId: createGroupRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupRule'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupRule'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.groups.manage
      summary: Create a Group Rule
      tags:
      - Group
      x-codegen-request-body-name: groupRule
  /api/v1/groups/rules/{ruleId}:
    delete:
      description: Deletes a specific group rule by `ruleId`
      operationId: deleteGroupRule
      parameters:
      - explode: false
        in: path
        name: ruleId
        required: true
        schema:
          type: string
        style: simple
      - description: Indicates whether to keep or remove users from groups assigned
          by this rule.
        explode: true
        in: query
        name: removeUsers
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "202":
          content: {}
          description: Accepted
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.groups.manage
      summary: Delete a group Rule
      tags:
      - Group
    get:
      description: Retrieves a specific group rule by `ruleId`
      operationId: getGroupRule
      parameters:
      - explode: false
        in: path
        name: ruleId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: expand
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupRule'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.groups.read
      summary: Retrieve a Group Rule
      tags:
      - Group
    put:
      description: Replaces a group rule. Only `INACTIVE` rules can be updated.
      operationId: replaceGroupRule
      parameters:
      - explode: false
        in: path
        name: ruleId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupRule'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupRule'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.groups.manage
      summary: Replace a Group Rule
      tags:
      - Group
      x-codegen-request-body-name: groupRule
  /api/v1/groups/rules/{ruleId}/lifecycle/activate:
    post:
      description: Activates a specific group rule by `ruleId`
      operationId: activateGroupRule
      parameters:
      - explode: false
        in: path
        name: ruleId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.groups.manage
      summary: Activate a Group Rule
      tags:
      - Group
  /api/v1/groups/rules/{ruleId}/lifecycle/deactivate:
    post:
      description: Deactivates a specific group rule by `ruleId`
      operationId: deactivateGroupRule
      parameters:
      - explode: false
        in: path
        name: ruleId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.groups.manage
      summary: Deactivate a Group Rule
      tags:
      - Group
  /api/v1/groups/{groupId}:
    delete:
      description: Deletes a group with `OKTA_GROUP` type
      operationId: deleteGroup
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.groups.manage
      summary: Delete a Group
      tags:
      - Group
    get:
      description: Retrieves a group by `groupId`
      operationId: getGroup
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.groups.read
      summary: Retrieve a Group
      tags:
      - Group
    put:
      description: Replaces the profile for a group with `OKTA_GROUP` type
      operationId: replaceGroup
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.groups.manage
      summary: Replace a Group
      tags:
      - Group
      x-codegen-request-body-name: group
  /api/v1/groups/{groupId}/apps:
    get:
      description: Lists all applications that are assigned to a group
      operationId: listAssignedApplicationsForGroup
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      - description: Specifies the pagination cursor for the next page of apps
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - description: Specifies the number of app results for a page
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/listApplications_200_response_inner'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.groups.read
      summary: List all Assigned Applications
      tags:
      - Group
  /api/v1/groups/{groupId}/owners:
    get:
      description: Lists all owners for a specific group
      operationId: listGroupOwners
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      - description: SCIM Filter expression for group owners. Allows to filter owners
          by type.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: Specifies the pagination cursor for the next page of owners
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - description: Specifies the number of owner results in a page
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 1000
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GroupOwner'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.groups.read
      summary: List all Group Owners
      tags:
      - Group
    post:
      description: Assigns a group owner
      operationId: assignGroupOwner
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupOwner'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupOwner'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.groups.manage
      summary: Assign a Group Owner
      tags:
      - Group
  /api/v1/groups/{groupId}/owners/{ownerId}:
    delete:
      description: Deletes a group owner from a specific group
      operationId: deleteGroupOwner
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: ownerId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.groups.manage
      summary: Delete a Group Owner
      tags:
      - Group
  /api/v1/groups/{groupId}/roles:
    get:
      description: Lists all assigned roles of group identified by `groupId`
      operationId: listGroupAssignedRoles
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: expand
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Role'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.read
      summary: List all Assigned Roles of Group
      tags:
      - RoleAssignment
    post:
      description: Assigns a role to a group
      operationId: assignRoleToGroup
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      - description: Setting this to `true` grants the group third-party admin status
        explode: true
        in: query
        name: disableNotifications
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignRoleRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
          description: Success
        "201":
          content: {}
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.manage
      summary: Assign a Role to a Group
      tags:
      - RoleAssignment
      x-codegen-request-body-name: assignRoleRequest
  /api/v1/groups/{groupId}/roles/{roleId}:
    delete:
      description: Unassigns a role identified by `roleId` assigned to group identified
        by `groupId`
      operationId: unassignRoleFromGroup
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: roleId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.manage
      summary: Unassign a Role from a Group
      tags:
      - RoleAssignment
    get:
      description: Retrieves a role identified by `roleId` assigned to group identified
        by `groupId`
      operationId: getGroupAssignedRole
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: roleId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.read
      summary: Retrieve a Role assigned to Group
      tags:
      - RoleAssignment
  /api/v1/groups/{groupId}/roles/{roleId}/targets/catalog/apps:
    get:
      description: "Lists all App targets for an `APP_ADMIN` Role assigned to a Group.\
        \ This methods return list may include full Applications or Instances. The\
        \ response for an instance will have an `ID` value, while Application will\
        \ not have an ID."
      operationId: listApplicationTargetsForApplicationAdministratorRoleForGroup
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: roleId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CatalogApplication'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.read
      summary: List all Application Targets for an Application Administrator Role
      tags:
      - RoleTarget
  /api/v1/groups/{groupId}/roles/{roleId}/targets/catalog/apps/{appName}:
    delete:
      description: Unassigns an application target from application administrator
        role
      operationId: unassignAppTargetToAdminRoleForGroup
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: roleId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: appName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.manage
      summary: Unassign an Application Target from Application Administrator Role
      tags:
      - RoleTarget
    put:
      description: Assigns an application target to administrator role
      operationId: assignAppTargetToAdminRoleForGroup
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: roleId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: appName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.manage
      summary: Assign an Application Target to Administrator Role
      tags:
      - RoleTarget
  /api/v1/groups/{groupId}/roles/{roleId}/targets/catalog/apps/{appName}/{applicationId}:
    delete:
      description: Unassigns an application instance target from application administrator
        role
      operationId: unassignAppInstanceTargetToAppAdminRoleForGroup
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: roleId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: appName
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: applicationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.manage
      summary: Unassign an Application Instance Target from an Application Administrator
        Role
      tags:
      - RoleTarget
    put:
      description: Assigns App Instance Target to App Administrator Role given to
        a Group
      operationId: assignAppInstanceTargetToAppAdminRoleForGroup
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: roleId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: appName
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: applicationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.manage
      summary: Assign an Application Instance Target to Application Administrator
        Role
      tags:
      - RoleTarget
  /api/v1/groups/{groupId}/roles/{roleId}/targets/groups:
    get:
      description: Lists all group targets for a group role
      operationId: listGroupTargetsForGroupRole
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: roleId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Group'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.read
      summary: List all Group Targets for a Group Role
      tags:
      - RoleTarget
  /api/v1/groups/{groupId}/roles/{roleId}/targets/groups/{targetGroupId}:
    delete:
      description: Unassigns a group target from a group role
      operationId: unassignGroupTargetFromGroupAdminRole
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: roleId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: targetGroupId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.manage
      summary: Unassign a Group Target from a Group Role
      tags:
      - RoleTarget
    put:
      description: Assigns a group target to a group role
      operationId: assignGroupTargetToGroupAdminRole
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: roleId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: targetGroupId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.manage
      summary: Assign a Group Target to a Group Role
      tags:
      - RoleTarget
  /api/v1/groups/{groupId}/users:
    get:
      description: Lists all users that are a member of a group
      operationId: listGroupUsers
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      - description: Specifies the pagination cursor for the next page of users
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - description: Specifies the number of user results in a page
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 1000
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.groups.read
      summary: List all Member Users
      tags:
      - Group
  /api/v1/groups/{groupId}/users/{userId}:
    delete:
      description: Unassigns a user from a group with 'OKTA_GROUP' type
      operationId: unassignUserFromGroup
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.groups.manage
      summary: Unassign a User
      tags:
      - Group
    put:
      description: Assigns a user to a group with 'OKTA_GROUP' type
      operationId: assignUserToGroup
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.groups.manage
      summary: Assign a User
      tags:
      - Group
  /api/v1/hook-keys:
    get:
      description: Lists all keys
      operationId: listHookKeys
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/HookKey'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.inlineHooks.read
      summary: List all keys
      tags:
      - HookKey
    post:
      description: Creates a key
      operationId: createHookKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HookKey'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.inlineHooks.manage
      summary: Create a key
      tags:
      - HookKey
      x-codegen-request-body-name: keyRequest
  /api/v1/hook-keys/public/{keyId}:
    get:
      description: Retrieves a public key by `keyId`
      operationId: getPublicKey
      parameters:
      - explode: false
        in: path
        name: keyId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonWebKey'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.inlineHooks.read
      summary: Retrieve a public key
      tags:
      - HookKey
  /api/v1/hook-keys/{hookKeyId}:
    delete:
      description: "Deletes a key by `hookKeyId`. Once deleted, the Hook Key is unrecoverable.\
        \ As a safety precaution, unused keys are eligible for deletion."
      operationId: deleteHookKey
      parameters:
      - explode: false
        in: path
        name: hookKeyId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.inlineHooks.manage
      summary: Delete a key
      tags:
      - HookKey
    get:
      description: Retrieves a key by `hookKeyId`
      operationId: getHookKey
      parameters:
      - explode: false
        in: path
        name: hookKeyId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HookKey'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.inlineHooks.read
      summary: Retrieve a key
      tags:
      - HookKey
    put:
      description: Replaces a key by `hookKeyId`
      operationId: replaceHookKey
      parameters:
      - explode: false
        in: path
        name: hookKeyId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HookKey'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.inlineHooks.manage
      summary: Replace a key
      tags:
      - HookKey
      x-codegen-request-body-name: keyRequest
  /api/v1/iam/resource-sets:
    get:
      description: Lists all resource sets with pagination support
      operationId: listResourceSets
      parameters:
      - description: "The cursor to use for pagination. It is an opaque string that\
          \ specifies your current location in the list and is obtained from the `Link`\
          \ response header. See [Pagination](/#pagination) for more information."
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Response:
                  $ref: '#/components/examples/ResourceSetsResponse'
              schema:
                $ref: '#/components/schemas/ResourceSets'
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.read
      summary: List all Resource Sets
      tags:
      - ResourceSet
    post:
      description: Creates a new resource set
      operationId: createResourceSet
      requestBody:
        content:
          application/json:
            examples:
              Example Request:
                $ref: '#/components/examples/ResourceSetRequest'
            schema:
              $ref: '#/components/schemas/ResourceSet'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Response:
                  $ref: '#/components/examples/ResourceSetResponse'
              schema:
                $ref: '#/components/schemas/ResourceSet'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.manage
      summary: Create a Resource Set
      tags:
      - ResourceSet
      x-codegen-request-body-name: instance
  /api/v1/iam/resource-sets/{resourceSetId}:
    delete:
      description: Deletes a role by `resourceSetId`
      operationId: deleteResourceSet
      parameters:
      - description: '`id` of a resource set'
        explode: false
        in: path
        name: resourceSetId
        required: true
        schema:
          example: iamoJDFKaJxGIr0oamd9g
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.manage
      summary: Delete a Resource Set
      tags:
      - ResourceSet
    get:
      description: Retrieves a resource set by `resourceSetId`
      operationId: getResourceSet
      parameters:
      - description: '`id` of a resource set'
        explode: false
        in: path
        name: resourceSetId
        required: true
        schema:
          example: iamoJDFKaJxGIr0oamd9g
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Response:
                  $ref: '#/components/examples/ResourceSetResponse'
              schema:
                $ref: '#/components/schemas/ResourceSet'
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.read
      summary: Retrieve a Resource Set
      tags:
      - ResourceSet
    put:
      description: Replaces a resource set by `resourceSetId`
      operationId: replaceResourceSet
      parameters:
      - description: '`id` of a resource set'
        explode: false
        in: path
        name: resourceSetId
        required: true
        schema:
          example: iamoJDFKaJxGIr0oamd9g
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              Example Request:
                $ref: '#/components/examples/ResourceSetRequest'
            schema:
              $ref: '#/components/schemas/ResourceSet'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Response:
                  $ref: '#/components/examples/ResourceSetResponse'
              schema:
                $ref: '#/components/schemas/ResourceSet'
          description: OK
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.manage
      summary: Replace a Resource Set
      tags:
      - ResourceSet
      x-codegen-request-body-name: instance
  /api/v1/iam/resource-sets/{resourceSetId}/bindings:
    get:
      description: Lists all resource set bindings with pagination support
      operationId: listBindings
      parameters:
      - description: '`id` of a resource set'
        explode: false
        in: path
        name: resourceSetId
        required: true
        schema:
          example: iamoJDFKaJxGIr0oamd9g
          type: string
        style: simple
      - description: "The cursor to use for pagination. It is an opaque string that\
          \ specifies your current location in the list and is obtained from the `Link`\
          \ response header. See [Pagination](/#pagination) for more information."
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Response:
                  $ref: '#/components/examples/ResourceSetBindingsResponse'
              schema:
                $ref: '#/components/schemas/ResourceSetBindings'
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.read
      summary: List all Bindings
      tags:
      - ResourceSet
    post:
      description: Creates a new resource set binding
      operationId: createResourceSetBinding
      parameters:
      - description: '`id` of a resource set'
        explode: false
        in: path
        name: resourceSetId
        required: true
        schema:
          example: iamoJDFKaJxGIr0oamd9g
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              Example Request:
                $ref: '#/components/examples/ResourceSetBindingCreateRequestExample'
            schema:
              $ref: '#/components/schemas/ResourceSetBindingCreateRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Response:
                  $ref: '#/components/examples/ResourceSetBindingResponseExample'
              schema:
                $ref: '#/components/schemas/ResourceSetBindingResponse'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.manage
      summary: Create a Resource Set Binding
      tags:
      - ResourceSet
      x-codegen-request-body-name: instance
  /api/v1/iam/resource-sets/{resourceSetId}/bindings/{roleIdOrLabel}:
    delete:
      description: Deletes a resource set binding by `resourceSetId` and `roleIdOrLabel`
      operationId: deleteBinding
      parameters:
      - description: '`id` of a resource set'
        explode: false
        in: path
        name: resourceSetId
        required: true
        schema:
          example: iamoJDFKaJxGIr0oamd9g
          type: string
        style: simple
      - description: '`id` or `label` of the role'
        explode: false
        in: path
        name: roleIdOrLabel
        required: true
        schema:
          example: cr0Yq6IJxGIr0ouum0g3
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.manage
      summary: Delete a Binding
      tags:
      - ResourceSet
    get:
      description: Retrieves a resource set binding by `resourceSetId` and `roleIdOrLabel`
      operationId: getBinding
      parameters:
      - description: '`id` of a resource set'
        explode: false
        in: path
        name: resourceSetId
        required: true
        schema:
          example: iamoJDFKaJxGIr0oamd9g
          type: string
        style: simple
      - description: '`id` or `label` of the role'
        explode: false
        in: path
        name: roleIdOrLabel
        required: true
        schema:
          example: cr0Yq6IJxGIr0ouum0g3
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Response:
                  $ref: '#/components/examples/ResourceSetBindingResponseWithIdExample'
              schema:
                $ref: '#/components/schemas/ResourceSetBindingResponse'
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.read
      summary: Retrieve a Binding
      tags:
      - ResourceSet
  /api/v1/iam/resource-sets/{resourceSetId}/bindings/{roleIdOrLabel}/members:
    get:
      description: Lists all members of a resource set binding with pagination support
      operationId: listMembersOfBinding
      parameters:
      - description: '`id` of a resource set'
        explode: false
        in: path
        name: resourceSetId
        required: true
        schema:
          example: iamoJDFKaJxGIr0oamd9g
          type: string
        style: simple
      - description: '`id` or `label` of the role'
        explode: false
        in: path
        name: roleIdOrLabel
        required: true
        schema:
          example: cr0Yq6IJxGIr0ouum0g3
          type: string
        style: simple
      - description: "The cursor to use for pagination. It is an opaque string that\
          \ specifies your current location in the list and is obtained from the `Link`\
          \ response header. See [Pagination](/#pagination) for more information."
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Response:
                  $ref: '#/components/examples/ResourceSetBindingMembersResponse'
              schema:
                $ref: '#/components/schemas/ResourceSetBindingMembers'
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.read
      summary: List all Members of a binding
      tags:
      - ResourceSet
    patch:
      description: Adds more members to a resource set binding
      operationId: addMembersToBinding
      parameters:
      - description: '`id` of a resource set'
        explode: false
        in: path
        name: resourceSetId
        required: true
        schema:
          example: iamoJDFKaJxGIr0oamd9g
          type: string
        style: simple
      - description: '`id` or `label` of the role'
        explode: false
        in: path
        name: roleIdOrLabel
        required: true
        schema:
          example: cr0Yq6IJxGIr0ouum0g3
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              Example Request:
                $ref: '#/components/examples/ResourceSetBindingAddMembersRequestExample'
            schema:
              $ref: '#/components/schemas/ResourceSetBindingAddMembersRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Response:
                  $ref: '#/components/examples/ResourceSetBindingResponseExample'
              schema:
                $ref: '#/components/schemas/ResourceSetBindingResponse'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.manage
      summary: Add more Members to a binding
      tags:
      - ResourceSet
      x-codegen-request-body-name: instance
  /api/v1/iam/resource-sets/{resourceSetId}/bindings/{roleIdOrLabel}/members/{memberId}:
    delete:
      description: Unassigns a member identified by `memberId` from a binding
      operationId: unassignMemberFromBinding
      parameters:
      - description: '`id` of a resource set'
        explode: false
        in: path
        name: resourceSetId
        required: true
        schema:
          example: iamoJDFKaJxGIr0oamd9g
          type: string
        style: simple
      - description: '`id` or `label` of the role'
        explode: false
        in: path
        name: roleIdOrLabel
        required: true
        schema:
          example: cr0Yq6IJxGIr0ouum0g3
          type: string
        style: simple
      - description: '`id` of a member'
        explode: false
        in: path
        name: memberId
        required: true
        schema:
          example: irb1qe6PGuMc7Oh8N0g4
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.manage
      summary: Unassign a Member from a binding
      tags:
      - ResourceSet
      x-codegen-request-body-name: instance
    get:
      description: Retrieves a member identified by `memberId` for a binding
      operationId: getMemberOfBinding
      parameters:
      - description: '`id` of a resource set'
        explode: false
        in: path
        name: resourceSetId
        required: true
        schema:
          example: iamoJDFKaJxGIr0oamd9g
          type: string
        style: simple
      - description: '`id` or `label` of the role'
        explode: false
        in: path
        name: roleIdOrLabel
        required: true
        schema:
          example: cr0Yq6IJxGIr0ouum0g3
          type: string
        style: simple
      - description: '`id` of a member'
        explode: false
        in: path
        name: memberId
        required: true
        schema:
          example: irb1qe6PGuMc7Oh8N0g4
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Response:
                  $ref: '#/components/examples/ResourceSetBindingMemberResponse'
              schema:
                $ref: '#/components/schemas/ResourceSetBindingMember'
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.read
      summary: Retrieve a Member of a binding
      tags:
      - ResourceSet
  /api/v1/iam/resource-sets/{resourceSetId}/resources:
    get:
      description: Lists all resources that make up the resource set
      operationId: listResourceSetResources
      parameters:
      - description: '`id` of a resource set'
        explode: false
        in: path
        name: resourceSetId
        required: true
        schema:
          example: iamoJDFKaJxGIr0oamd9g
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Response:
                  $ref: '#/components/examples/ResourceSetResourcesResponse'
              schema:
                $ref: '#/components/schemas/ResourceSetResources'
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.read
      summary: List all Resources of a resource set
      tags:
      - ResourceSet
    patch:
      description: Adds more resources to a resource set
      operationId: addResourceSetResource
      parameters:
      - description: '`id` of a resource set'
        explode: false
        in: path
        name: resourceSetId
        required: true
        schema:
          example: iamoJDFKaJxGIr0oamd9g
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              Example Request:
                $ref: '#/components/examples/ResourceSetResourcePatchRequestExample'
            schema:
              $ref: '#/components/schemas/ResourceSetResourcePatchRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Response:
                  $ref: '#/components/examples/ResourceSetResponse'
              schema:
                $ref: '#/components/schemas/ResourceSet'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.manage
      summary: Add more Resource to a resource set
      tags:
      - ResourceSet
      x-codegen-request-body-name: instance
  /api/v1/iam/resource-sets/{resourceSetId}/resources/{resourceId}:
    delete:
      description: Deletes a resource identified by `resourceId` from a resource set
      operationId: deleteResourceSetResource
      parameters:
      - description: '`id` of a resource set'
        explode: false
        in: path
        name: resourceSetId
        required: true
        schema:
          example: iamoJDFKaJxGIr0oamd9g
          type: string
        style: simple
      - description: '`id` of a resource'
        explode: false
        in: path
        name: resourceId
        required: true
        schema:
          example: ire106sQKoHoXXsAe0g4
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.manage
      summary: Delete a Resource from a resource set
      tags:
      - ResourceSet
  /api/v1/iam/roles:
    get:
      description: Lists all roles with pagination support
      operationId: listRoles
      parameters:
      - description: "The cursor to use for pagination. It is an opaque string that\
          \ specifies your current location in the list and is obtained from the `Link`\
          \ response header. See [Pagination](/#pagination) for more information."
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Response:
                  $ref: '#/components/examples/RolesResponse'
              schema:
                $ref: '#/components/schemas/IamRoles'
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.read
      summary: List all Roles
      tags:
      - Role
    post:
      description: Creates a new role
      operationId: createRole
      requestBody:
        content:
          application/json:
            examples:
              Example Request:
                $ref: '#/components/examples/RoleRequest'
            schema:
              $ref: '#/components/schemas/IamRole'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Response:
                  $ref: '#/components/examples/RoleResponse'
              schema:
                $ref: '#/components/schemas/IamRole'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.manage
      summary: Create a Role
      tags:
      - Role
      x-codegen-request-body-name: instance
  /api/v1/iam/roles/{roleIdOrLabel}:
    delete:
      description: Deletes a role by `roleIdOrLabel`
      operationId: deleteRole
      parameters:
      - description: '`id` or `label` of the role'
        explode: false
        in: path
        name: roleIdOrLabel
        required: true
        schema:
          example: cr0Yq6IJxGIr0ouum0g3
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.manage
      summary: Delete a Role
      tags:
      - Role
    get:
      description: Retrieves a role by `roleIdOrLabel`
      operationId: getRole
      parameters:
      - description: '`id` or `label` of the role'
        explode: false
        in: path
        name: roleIdOrLabel
        required: true
        schema:
          example: cr0Yq6IJxGIr0ouum0g3
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Response:
                  $ref: '#/components/examples/RoleResponse'
              schema:
                $ref: '#/components/schemas/IamRole'
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.read
      summary: Retrieve a Role
      tags:
      - Role
    put:
      description: Replaces a role by `roleIdOrLabel`
      operationId: replaceRole
      parameters:
      - description: '`id` or `label` of the role'
        explode: false
        in: path
        name: roleIdOrLabel
        required: true
        schema:
          example: cr0Yq6IJxGIr0ouum0g3
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              Example Request:
                $ref: '#/components/examples/RoleRequest'
            schema:
              $ref: '#/components/schemas/IamRole'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Response:
                  $ref: '#/components/examples/RoleResponse'
              schema:
                $ref: '#/components/schemas/IamRole'
          description: OK
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.manage
      summary: Replace a Role
      tags:
      - Role
      x-codegen-request-body-name: instance
  /api/v1/iam/roles/{roleIdOrLabel}/permissions:
    get:
      description: Lists all permissions of the role by `roleIdOrLabel`
      operationId: listRolePermissions
      parameters:
      - description: '`id` or `label` of the role'
        explode: false
        in: path
        name: roleIdOrLabel
        required: true
        schema:
          example: cr0Yq6IJxGIr0ouum0g3
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Response:
                  $ref: '#/components/examples/PermissionsResponse'
              schema:
                $ref: '#/components/schemas/Permissions'
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.read
      summary: List all Permissions
      tags:
      - Role
  /api/v1/iam/roles/{roleIdOrLabel}/permissions/{permissionType}:
    delete:
      description: Deletes a permission from a role by `permissionType`
      operationId: deleteRolePermission
      parameters:
      - description: '`id` or `label` of the role'
        explode: false
        in: path
        name: roleIdOrLabel
        required: true
        schema:
          example: cr0Yq6IJxGIr0ouum0g3
          type: string
        style: simple
      - description: An okta permission type
        explode: false
        in: path
        name: permissionType
        required: true
        schema:
          example: okta.users.manage
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.manage
      summary: Delete a Permission
      tags:
      - Role
    get:
      description: Retrieves a permission by `permissionType`
      operationId: getRolePermission
      parameters:
      - description: '`id` or `label` of the role'
        explode: false
        in: path
        name: roleIdOrLabel
        required: true
        schema:
          example: cr0Yq6IJxGIr0ouum0g3
          type: string
        style: simple
      - description: An okta permission type
        explode: false
        in: path
        name: permissionType
        required: true
        schema:
          example: okta.users.manage
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Response:
                  $ref: '#/components/examples/PermissionResponse'
              schema:
                $ref: '#/components/schemas/Permission'
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.read
      summary: Retrieve a Permission
      tags:
      - Role
    post:
      description: Creates a permission specified by `permissionType` to the role
      operationId: createRolePermission
      parameters:
      - description: '`id` or `label` of the role'
        explode: false
        in: path
        name: roleIdOrLabel
        required: true
        schema:
          example: cr0Yq6IJxGIr0ouum0g3
          type: string
        style: simple
      - description: An okta permission type
        explode: false
        in: path
        name: permissionType
        required: true
        schema:
          example: okta.users.manage
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.manage
      summary: Create a Permission
      tags:
      - Role
      x-codegen-request-body-name: instance
  /api/v1/identity-sources/{identitySourceId}/sessions:
    get:
      description: Lists all identity source sessions for the given identity source
        instance
      operationId: listIdentitySourceSessions
      parameters:
      - explode: false
        in: path
        name: identitySourceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Sessions List:
                  $ref: '#/components/examples/ListSessionsResponse'
              schema:
                items:
                  $ref: '#/components/schemas/IdentitySourceSession'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.identitySources.read
      summary: List all Identity Source Sessions
      tags:
      - IdentitySource
    post:
      description: Creates an identity source session for the given identity source
        instance
      operationId: createIdentitySourceSession
      parameters:
      - explode: false
        in: path
        name: identitySourceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                sessionsList:
                  $ref: '#/components/examples/ListSessionsResponse'
              schema:
                items:
                  $ref: '#/components/schemas/IdentitySourceSession'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.identitySources.manage
      summary: Create an Identity Source Session
      tags:
      - IdentitySource
  /api/v1/identity-sources/{identitySourceId}/sessions/{sessionId}:
    delete:
      description: Deletes an identity source session for a given `identitySourceId`
        and `sessionId`
      operationId: deleteIdentitySourceSession
      parameters:
      - explode: false
        in: path
        name: identitySourceId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: sessionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.identitySources.manage
      summary: Delete an Identity Source Session
      tags:
      - IdentitySource
    get:
      description: Retrieves an identity source session for a given identity source
        id and session id
      operationId: getIdentitySourceSession
      parameters:
      - explode: false
        in: path
        name: identitySourceId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: sessionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Session:
                  $ref: '#/components/examples/ListSessionsResponse'
              schema:
                $ref: '#/components/schemas/IdentitySourceSession'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.identitySources.read
      summary: Retrieve an Identity Source Session
      tags:
      - IdentitySource
  /api/v1/identity-sources/{identitySourceId}/sessions/{sessionId}/bulk-delete:
    post:
      description: Uploads entities that need to be deleted in Okta from the identity
        source for the given session
      operationId: uploadIdentitySourceDataForDelete
      parameters:
      - explode: false
        in: path
        name: identitySourceId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: sessionId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkDeleteRequestBody'
      responses:
        "202":
          description: Accepted
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.identitySources.manage
      summary: Upload the data to be deleted in Okta
      tags:
      - IdentitySource
  /api/v1/identity-sources/{identitySourceId}/sessions/{sessionId}/bulk-upsert:
    post:
      description: Uploads entities that need to be upserted in Okta from the identity
        source for the given session
      operationId: uploadIdentitySourceDataForUpsert
      parameters:
      - explode: false
        in: path
        name: identitySourceId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: sessionId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkUpsertRequestBody'
      responses:
        "202":
          description: Accepted
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.identitySources.manage
      summary: Upload the data to be upserted in Okta
      tags:
      - IdentitySource
  /api/v1/identity-sources/{identitySourceId}/sessions/{sessionId}/start-import:
    post:
      description: Starts the import from the identity source described by the uploaded
        bulk operations
      operationId: startImportFromIdentitySource
      parameters:
      - explode: false
        in: path
        name: identitySourceId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: sessionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                sessionsList:
                  $ref: '#/components/examples/TriggerSessionResponse'
              schema:
                items:
                  $ref: '#/components/schemas/IdentitySourceSession'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.identitySources.manage
      summary: Start the import from the Identity Source
      tags:
      - IdentitySource
  /api/v1/idps:
    get:
      description: Lists all identity provider integrations with pagination. A subset
        of IdPs can be returned that match a supported filter expression or query.
      operationId: listIdentityProviders
      parameters:
      - description: Searches the name property of IdPs for matching value
        explode: true
        in: query
        name: q
        required: false
        schema:
          type: string
        style: form
      - description: Specifies the pagination cursor for the next page of IdPs
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - description: Specifies the number of IdP results in a page
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      - description: Filters IdPs by type
        explode: true
        in: query
        name: type
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/IdentityProvider'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.idps.read
      summary: List all Identity Providers
      tags:
      - IdentityProvider
    post:
      description: Creates a new identity provider integration
      operationId: createIdentityProvider
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityProvider'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityProvider'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.idps.manage
      summary: Create an Identity Provider
      tags:
      - IdentityProvider
      x-codegen-request-body-name: identityProvider
  /api/v1/idps/credentials/keys:
    get:
      description: Lists all IdP key credentials
      operationId: listIdentityProviderKeys
      parameters:
      - description: Specifies the pagination cursor for the next page of keys
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - description: Specifies the number of key results in a page
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/JsonWebKey'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.idps.read
      summary: List all Credential Keys
      tags:
      - IdentityProvider
    post:
      description: Creates a new X.509 certificate credential to the IdP key store.
      operationId: createIdentityProviderKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonWebKey'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonWebKey'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.idps.manage
      summary: Create an X.509 Certificate Public Key
      tags:
      - IdentityProvider
      x-codegen-request-body-name: jsonWebKey
  /api/v1/idps/credentials/keys/{keyId}:
    delete:
      description: Deletes a specific IdP Key Credential by `kid` if it is not currently
        being used by an Active or Inactive IdP
      operationId: deleteIdentityProviderKey
      parameters:
      - explode: false
        in: path
        name: keyId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.idps.manage
      summary: Delete a Signing Credential Key
      tags:
      - IdentityProvider
    get:
      description: Retrieves a specific IdP Key Credential by `kid`
      operationId: getIdentityProviderKey
      parameters:
      - explode: false
        in: path
        name: keyId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonWebKey'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.idps.read
      summary: Retrieve an Credential Key
      tags:
      - IdentityProvider
  /api/v1/idps/{idpId}:
    delete:
      description: Deletes an identity provider integration by `idpId`
      operationId: deleteIdentityProvider
      parameters:
      - explode: false
        in: path
        name: idpId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.idps.manage
      summary: Delete an Identity Provider
      tags:
      - IdentityProvider
    get:
      description: Retrieves an identity provider integration by `idpId`
      operationId: getIdentityProvider
      parameters:
      - explode: false
        in: path
        name: idpId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityProvider'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.idps.read
      summary: Retrieve an Identity Provider
      tags:
      - IdentityProvider
    put:
      description: Replaces an identity provider integration by `idpId`
      operationId: replaceIdentityProvider
      parameters:
      - explode: false
        in: path
        name: idpId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityProvider'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityProvider'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.idps.manage
      summary: Replace an Identity Provider
      tags:
      - IdentityProvider
      x-codegen-request-body-name: identityProvider
  /api/v1/idps/{idpId}/credentials/csrs:
    get:
      description: Lists all Certificate Signing Requests for an IdP
      operationId: listCsrsForIdentityProvider
      parameters:
      - explode: false
        in: path
        name: idpId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Csr'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.idps.read
      summary: List all Certificate Signing Requests
      tags:
      - IdentityProvider
    post:
      description: Generates a new key pair and returns a Certificate Signing Request
        for it
      operationId: generateCsrForIdentityProvider
      parameters:
      - explode: false
        in: path
        name: idpId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CsrMetadata'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Csr'
          description: Created
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.idps.manage
      summary: Generate a Certificate Signing Request
      tags:
      - IdentityProvider
      x-codegen-request-body-name: metadata
  /api/v1/idps/{idpId}/credentials/csrs/{csrId}:
    delete:
      description: Revokes a certificate signing request and deletes the key pair
        from the IdP
      operationId: revokeCsrForIdentityProvider
      parameters:
      - explode: false
        in: path
        name: idpId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: csrId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.idps.manage
      summary: Revoke a Certificate Signing Request
      tags:
      - IdentityProvider
    get:
      description: Retrieves a specific Certificate Signing Request model by id
      operationId: getCsrForIdentityProvider
      parameters:
      - explode: false
        in: path
        name: idpId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: csrId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Csr'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.idps.read
      summary: Retrieve a Certificate Signing Request
      tags:
      - IdentityProvider
  /api/v1/idps/{idpId}/credentials/csrs/{csrId}/lifecycle/publish:
    post:
      description: Publishes a certificate signing request with a signed X.509 certificate
        and adds it into the signing key credentials for the IdP
      operationId: publishCsrForIdentityProvider
      parameters:
      - explode: false
        in: path
        name: idpId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: csrId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/x-x509-ca-cert:
            schema:
              format: binary
              type: string
              x-okta-operationId: publishBinaryCerCertForIdentityProvider
          application/pkix-cert:
            schema:
              format: binary
              type: string
              x-okta-operationId: publishBinaryDerCertForIdentityProvider
          application/x-pem-file:
            schema:
              format: binary
              type: string
              x-okta-operationId: publishBinaryPemCertForIdentityProvider
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonWebKey'
          description: Created
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.idps.manage
      summary: Publish a Certificate Signing Request
      tags:
      - IdentityProvider
  /api/v1/idps/{idpId}/credentials/keys:
    get:
      description: Lists all signing key credentials for an IdP
      operationId: listIdentityProviderSigningKeys
      parameters:
      - explode: false
        in: path
        name: idpId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/JsonWebKey'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.idps.read
      summary: List all Signing Credential Keys
      tags:
      - IdentityProvider
  /api/v1/idps/{idpId}/credentials/keys/generate:
    post:
      description: Generates a new X.509 certificate for an IdP signing key credential
        to be used for signing assertions sent to the IdP
      operationId: generateIdentityProviderSigningKey
      parameters:
      - explode: false
        in: path
        name: idpId
        required: true
        schema:
          type: string
        style: simple
      - description: expiry of the IdP Key Credential
        explode: true
        in: query
        name: validityYears
        required: true
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonWebKey'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.idps.manage
      summary: Generate a new Signing Credential Key
      tags:
      - IdentityProvider
  /api/v1/idps/{idpId}/credentials/keys/{keyId}:
    get:
      description: Retrieves a specific IdP Key Credential by `kid`
      operationId: getIdentityProviderSigningKey
      parameters:
      - explode: false
        in: path
        name: idpId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: keyId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonWebKey'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.idps.read
      summary: Retrieve a Signing Credential Key
      tags:
      - IdentityProvider
  /api/v1/idps/{idpId}/credentials/keys/{keyId}/clone:
    post:
      description: Clones a X.509 certificate for an IdP signing key credential from
        a source IdP to target IdP
      operationId: cloneIdentityProviderKey
      parameters:
      - explode: false
        in: path
        name: idpId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: keyId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: targetIdpId
        required: true
        schema:
          type: string
        style: form
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonWebKey'
          description: Created
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.idps.manage
      summary: Clone a Signing Credential Key
      tags:
      - IdentityProvider
  /api/v1/idps/{idpId}/lifecycle/activate:
    post:
      description: Activates an inactive IdP
      operationId: activateIdentityProvider
      parameters:
      - explode: false
        in: path
        name: idpId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityProvider'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.idps.manage
      summary: Activate an Identity Provider
      tags:
      - IdentityProvider
  /api/v1/idps/{idpId}/lifecycle/deactivate:
    post:
      description: Deactivates an active IdP
      operationId: deactivateIdentityProvider
      parameters:
      - explode: false
        in: path
        name: idpId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityProvider'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.idps.manage
      summary: Deactivate an Identity Provider
      tags:
      - IdentityProvider
  /api/v1/idps/{idpId}/users:
    get:
      description: Lists all users linked to the identity provider
      operationId: listIdentityProviderApplicationUsers
      parameters:
      - explode: false
        in: path
        name: idpId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/IdentityProviderApplicationUser'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.idps.read
      summary: List all Users
      tags:
      - IdentityProvider
  /api/v1/idps/{idpId}/users/{userId}:
    delete:
      description: Unlinks the link between the Okta user and the IdP user
      operationId: unlinkUserFromIdentityProvider
      parameters:
      - explode: false
        in: path
        name: idpId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.idps.manage
      summary: Unlink a User from IdP
      tags:
      - IdentityProvider
    get:
      description: Retrieves a linked IdP user by ID
      operationId: getIdentityProviderApplicationUser
      parameters:
      - explode: false
        in: path
        name: idpId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityProviderApplicationUser'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.idps.read
      summary: Retrieve a User
      tags:
      - IdentityProvider
    post:
      description: Links an Okta user to an existing Social Identity Provider. This
        does not support the SAML2 Identity Provider Type
      operationId: linkUserToIdentityProvider
      parameters:
      - explode: false
        in: path
        name: idpId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserIdentityProviderLinkRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityProviderApplicationUser'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.manage
      summary: Link a User to a Social IdP
      tags:
      - IdentityProvider
      x-codegen-request-body-name: userIdentityProviderLinkRequest
  /api/v1/idps/{idpId}/users/{userId}/credentials/tokens:
    get:
      description: Lists the tokens minted by the Social Authentication Provider when
        the user authenticates with Okta via Social Auth
      operationId: listSocialAuthTokens
      parameters:
      - explode: false
        in: path
        name: idpId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SocialAuthToken'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.idps.read
      summary: List all Tokens from a OIDC Identity Provider
      tags:
      - IdentityProvider
  /api/v1/inlineHooks:
    get:
      description: Lists all inline hooks
      operationId: listInlineHooks
      parameters:
      - explode: true
        in: query
        name: type
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/InlineHook'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.inlineHooks.read
      summary: List all Inline Hooks
      tags:
      - InlineHook
    post:
      description: Creates an inline hook
      operationId: createInlineHook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InlineHook'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InlineHook'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.inlineHooks.manage
      summary: Create an Inline Hook
      tags:
      - InlineHook
      x-codegen-request-body-name: inlineHook
  /api/v1/inlineHooks/{inlineHookId}:
    delete:
      description: "Deletes an inline hook by `inlineHookId`. Once deleted, the Inline\
        \ Hook is unrecoverable. As a safety precaution, only Inline Hooks with a\
        \ status of INACTIVE are eligible for deletion."
      operationId: deleteInlineHook
      parameters:
      - explode: false
        in: path
        name: inlineHookId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.inlineHooks.manage
      summary: Delete an Inline Hook
      tags:
      - InlineHook
    get:
      description: Retrieves an inline hook by `inlineHookId`
      operationId: getInlineHook
      parameters:
      - explode: false
        in: path
        name: inlineHookId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InlineHook'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.inlineHooks.read
      summary: Retrieve an Inline Hook
      tags:
      - InlineHook
    put:
      description: Replaces an inline hook by `inlineHookId`
      operationId: replaceInlineHook
      parameters:
      - explode: false
        in: path
        name: inlineHookId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InlineHook'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InlineHook'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.inlineHooks.manage
      summary: Replace an Inline Hook
      tags:
      - InlineHook
      x-codegen-request-body-name: inlineHook
  /api/v1/inlineHooks/{inlineHookId}/execute:
    post:
      description: Executes the inline hook by `inlineHookId` using the request body
        as the input. This will send the provided data through the Channel and return
        a response if it matches the correct data contract. This execution endpoint
        should only be used for testing purposes.
      operationId: executeInlineHook
      parameters:
      - explode: false
        in: path
        name: inlineHookId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InlineHookPayload'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InlineHookResponse'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.inlineHooks.manage
      summary: Execute an Inline Hook
      tags:
      - InlineHook
      x-codegen-request-body-name: payloadData
  /api/v1/inlineHooks/{inlineHookId}/lifecycle/activate:
    post:
      description: Activates the inline hook by `inlineHookId`
      operationId: activateInlineHook
      parameters:
      - explode: false
        in: path
        name: inlineHookId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InlineHook'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.inlineHooks.manage
      summary: Activate an Inline Hook
      tags:
      - InlineHook
  /api/v1/inlineHooks/{inlineHookId}/lifecycle/deactivate:
    post:
      description: Deactivates the inline hook by `inlineHookId`
      operationId: deactivateInlineHook
      parameters:
      - explode: false
        in: path
        name: inlineHookId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InlineHook'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.inlineHooks.manage
      summary: Deactivate an Inline Hook
      tags:
      - InlineHook
  /api/v1/logStreams:
    get:
      description: Lists all log streams. You can request a paginated list or a subset
        of Log Streams that match a supported filter expression.
      operationId: listLogStreams
      parameters:
      - description: "The cursor to use for pagination. It is an opaque string that\
          \ specifies your current location in the list and is obtained from the `Link`\
          \ response header. See [Pagination](/#pagination) for more information."
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - description: A limit on the number of objects to return.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          maximum: 200
          minimum: 1
          type: integer
        style: form
      - description: SCIM filter expression that filters the results. This expression
          only supports the `eq` operator on either the `status` or `type`.
        examples:
          Filter on type for AWS EventBridge:
            value: type eq "aws_eventbridge"
          Filter on status for `ACTIVE` Log Streams:
            value: status eq "ACTIVE"
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/listLogStreams_200_response_inner'
                type: array
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.logStreams.read
      summary: List all Log Streams
      tags:
      - LogStream
    post:
      description: Creates a new log stream
      operationId: createLogStream
      requestBody:
        content:
          application/json:
            examples:
              Example Request:
                $ref: '#/components/examples/LogStreamRequest'
            schema:
              $ref: '#/components/schemas/listLogStreams_200_response_inner'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Response:
                  $ref: '#/components/examples/LogStreamResponse'
              schema:
                $ref: '#/components/schemas/listLogStreams_200_response_inner'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.logStreams.manage
      summary: Create a Log Stream
      tags:
      - LogStream
      x-codegen-request-body-name: instance
  /api/v1/logStreams/{logStreamId}:
    delete:
      description: Deletes a log stream by `logStreamId`
      operationId: deleteLogStream
      parameters:
      - description: id of the log stream
        explode: false
        in: path
        name: logStreamId
        required: true
        schema:
          example: abcd1234
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.logStreams.manage
      summary: Delete a Log Stream
      tags:
      - LogStream
    get:
      description: Retrieves a log stream by `logStreamId`
      operationId: getLogStream
      parameters:
      - description: id of the log stream
        explode: false
        in: path
        name: logStreamId
        required: true
        schema:
          example: abcd1234
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Response:
                  $ref: '#/components/examples/LogStreamResponse'
              schema:
                $ref: '#/components/schemas/listLogStreams_200_response_inner'
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.logStreams.read
      summary: Retrieve a Log Stream
      tags:
      - LogStream
    put:
      description: Replaces a log stream by `logStreamId`
      operationId: replaceLogStream
      parameters:
      - description: id of the log stream
        explode: false
        in: path
        name: logStreamId
        required: true
        schema:
          example: abcd1234
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              Example Request:
                $ref: '#/components/examples/LogStreamRequest'
            schema:
              $ref: '#/components/schemas/listLogStreams_200_response_inner'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Response:
                  $ref: '#/components/examples/LogStreamResponse'
              schema:
                $ref: '#/components/schemas/listLogStreams_200_response_inner'
          description: OK
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.logStreams.manage
      summary: Replace a Log Stream
      tags:
      - LogStream
      x-codegen-request-body-name: instance
  /api/v1/logStreams/{logStreamId}/lifecycle/activate:
    post:
      description: Activates a log stream by `logStreamId`
      operationId: activateLogStream
      parameters:
      - description: id of the log stream
        explode: false
        in: path
        name: logStreamId
        required: true
        schema:
          example: abcd1234
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Response:
                  $ref: '#/components/examples/LogStreamResponse'
              schema:
                $ref: '#/components/schemas/listLogStreams_200_response_inner'
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.logStreams.manage
      summary: Activate a Log Stream
      tags:
      - LogStream
  /api/v1/logStreams/{logStreamId}/lifecycle/deactivate:
    post:
      description: Deactivates a log stream by `logStreamId`
      operationId: deactivateLogStream
      parameters:
      - description: id of the log stream
        explode: false
        in: path
        name: logStreamId
        required: true
        schema:
          example: abcd1234
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Response:
                  $ref: '#/components/examples/LogStreamResponse'
              schema:
                $ref: '#/components/schemas/listLogStreams_200_response_inner'
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.logStreams.manage
      summary: Deactivate a Log Stream
      tags:
      - LogStream
  /api/v1/logs:
    get:
      description: Lists all system log events. The Okta System Log API provides read
        access to your organization’s system log. This API provides more functionality
        than the Events API
      operationId: listLogEvents
      parameters:
      - explode: true
        in: query
        name: since
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - explode: true
        in: query
        name: until
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: q
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          type: integer
        style: form
      - explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          default: ASCENDING
          type: string
        style: form
      - explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LogEvent'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.logs.read
      summary: List all System Log Events
      tags:
      - SystemLog
  /api/v1/mappings:
    get:
      description: Lists all profile mappings with pagination
      operationId: listProfileMappings
      parameters:
      - explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: -1
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: sourceId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: targetId
        required: false
        schema:
          default: ""
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProfileMapping'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.profileMappings.read
      summary: List all Profile Mappings
      tags:
      - ProfileMapping
  /api/v1/mappings/{mappingId}:
    get:
      description: Retrieves a single Profile Mapping referenced by its ID
      operationId: getProfileMapping
      parameters:
      - explode: false
        in: path
        name: mappingId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileMapping'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.profileMappings.read
      summary: Retrieve a Profile Mapping
      tags:
      - ProfileMapping
    post:
      description: "Updates an existing Profile Mapping by adding, updating, or removing\
        \ one or many Property Mappings"
      operationId: updateProfileMapping
      parameters:
      - explode: false
        in: path
        name: mappingId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileMapping'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileMapping'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.profileMappings.manage
      summary: Update a Profile Mapping
      tags:
      - ProfileMapping
      x-codegen-request-body-name: profileMapping
  /api/v1/meta/layouts/apps/{appName}:
    get:
      description: Retrieves the UI layout for an application by `appName`
      operationId: getApplicationLayout
      parameters:
      - explode: false
        in: path
        name: appName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationLayout'
          description: successful operation
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.schemas.read
      summary: Retrieve the UI Layout for an Application
      tags:
      - Schema
  /api/v1/meta/schemas/apps/{appInstanceId}/default:
    get:
      description: Retrieves the Schema for an App User
      operationId: getApplicationUserSchema
      parameters:
      - explode: false
        in: path
        name: appInstanceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSchema'
          description: successful operation
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.schemas.read
      summary: Retrieve the default Application User Schema for an Application
      tags:
      - Schema
    post:
      description: Partially updates on the User Profile properties of the Application
        User Schema
      operationId: updateApplicationUserProfile
      parameters:
      - explode: false
        in: path
        name: appInstanceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              Add a custom property to the app user schema:
                $ref: '#/components/examples/AppUserSchemaAddRequest'
            schema:
              $ref: '#/components/schemas/UserSchema'
        required: false
      responses:
        "200":
          content:
            application/json:
              examples:
                Response with a subset of properties for brevity:
                  $ref: '#/components/examples/AppUserSchemaResponse'
              schema:
                $ref: '#/components/schemas/UserSchema'
          description: successful operation
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.schemas.manage
      summary: Update the default Application User Schema for an Application
      tags:
      - Schema
      x-codegen-request-body-name: body
  /api/v1/meta/schemas/group/default:
    get:
      description: Retrieves the group schema
      operationId: getGroupSchema
      parameters: []
      responses:
        "200":
          content:
            application/json:
              examples:
                Response with a subset of properties for brevity:
                  $ref: '#/components/examples/GroupSchemaResponse'
              schema:
                $ref: '#/components/schemas/GroupSchema'
          description: successful operation
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.schemas.read
      summary: Retrieve the default Group Schema
      tags:
      - Schema
    post:
      description: "Updates the default group schema. This updates, adds, or removes\
        \ one or more custom Group Profile properties in the schema."
      operationId: updateGroupSchema
      requestBody:
        content:
          application/json:
            examples:
              Add a custom property to the group schema:
                $ref: '#/components/examples/GroupSchemaAddRequest'
            schema:
              $ref: '#/components/schemas/GroupSchema'
      responses:
        "200":
          content:
            application/json:
              example:
                Response with a subset of properties for brevity:
                  $ref: '#/components/examples/GroupSchemaResponse'
              schema:
                $ref: '#/components/schemas/GroupSchema'
          description: successful operation
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.schemas.manage
      summary: Update the default Group Schema
      tags:
      - Schema
  /api/v1/meta/schemas/logStream:
    get:
      description: Lists the schema for all log stream types visible for this org
      operationId: listLogStreamSchemas
      responses:
        "200":
          content:
            application/json:
              examples:
                All log stream schemas for your org:
                  $ref: '#/components/examples/LogStreamSchemaList'
              schema:
                items:
                  $ref: '#/components/schemas/LogStreamSchema'
                type: array
          description: successful operation
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.logStreams.read
      summary: List the Log Stream Schemas
      tags:
      - Schema
  /api/v1/meta/schemas/logStream/{logStreamType}:
    get:
      description: "Retrieves the schema for a Log Stream type. The `logStreamType`\
        \ element in the URL specifies the Log Stream type, which is either `aws_eventbridge`\
        \ or `splunk_cloud_logstreaming`. Use the `aws_eventbridge` literal to retrieve\
        \ the AWS EventBridge type schema, and use the `splunk_cloud_logstreaming`\
        \ literal retrieve the Splunk Cloud type schema."
      operationId: getLogStreamSchema
      parameters:
      - explode: false
        in: path
        name: logStreamType
        required: true
        schema:
          $ref: '#/components/schemas/LogStreamType'
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Schema for type `aws_eventbridge`:
                  $ref: '#/components/examples/LogStreamSchemaAws'
                Schema for type `splunk_cloud_logstreaming`:
                  $ref: '#/components/examples/LogStreamSchemaSplunk'
              schema:
                $ref: '#/components/schemas/LogStreamSchema'
          description: successful operation
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.logStreams.read
      summary: Retrieve the Log Stream Schema for the schema type
      tags:
      - Schema
  /api/v1/meta/schemas/user/linkedObjects:
    get:
      description: Lists all linked object definitions
      operationId: listLinkedObjectDefinitions
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LinkedObject'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.linkedObjects.read
      summary: List all Linked Object Definitions
      tags:
      - LinkedObject
    post:
      description: Creates a linked object definition
      operationId: createLinkedObjectDefinition
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkedObject'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkedObject'
          description: Created
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.linkedObjects.manage
      summary: Create a Linked Object Definition
      tags:
      - LinkedObject
      x-codegen-request-body-name: linkedObject
  /api/v1/meta/schemas/user/linkedObjects/{linkedObjectName}:
    delete:
      description: Deletes a linked object definition
      operationId: deleteLinkedObjectDefinition
      parameters:
      - explode: false
        in: path
        name: linkedObjectName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.linkedObjects.manage
      summary: Delete a Linked Object Definition
      tags:
      - LinkedObject
    get:
      description: Retrieves a linked object definition
      operationId: getLinkedObjectDefinition
      parameters:
      - explode: false
        in: path
        name: linkedObjectName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkedObject'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.linkedObjects.read
      summary: Retrieve a Linked Object Definition
      tags:
      - LinkedObject
  /api/v1/meta/schemas/user/{schemaId}:
    get:
      description: Retrieves the schema for a Schema Id
      operationId: getUserSchema
      parameters:
      - explode: false
        in: path
        name: schemaId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Response with a subset of properties for brevity:
                  $ref: '#/components/examples/UserSchemaResponse'
              schema:
                $ref: '#/components/schemas/UserSchema'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.schemas.read
      summary: Retrieve a User Schema
      tags:
      - Schema
    post:
      description: Partially updates on the User Profile properties of the user schema
      operationId: updateUserProfile
      parameters:
      - explode: false
        in: path
        name: schemaId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              Add a custom property to the user schema:
                $ref: '#/components/examples/UserSchemaAddRequest'
            schema:
              $ref: '#/components/schemas/UserSchema'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                Response with a subset of properties for brevity:
                  $ref: '#/components/examples/UserSchemaResponse'
              schema:
                $ref: '#/components/schemas/UserSchema'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.schemas.manage
      summary: Update a User Schema
      tags:
      - Schema
      x-codegen-request-body-name: userSchema
  /api/v1/meta/types/user:
    get:
      description: Lists all User Types in your org
      operationId: listUserTypes
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserType'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.userTypes.read
      summary: List all User Types
      tags:
      - UserType
    post:
      description: "Creates a new User Type. A default User Type is automatically\
        \ created along with your org, and you may add another 9 User Types for a\
        \ maximum of 10."
      operationId: createUserType
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserType'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserType'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.userTypes.manage
      summary: Create a User Type
      tags:
      - UserType
      x-codegen-request-body-name: userType
  /api/v1/meta/types/user/{typeId}:
    delete:
      description: "Deletes a User Type permanently. This operation is not permitted\
        \ for the default type, nor for any User Type that has existing users"
      operationId: deleteUserType
      parameters:
      - explode: false
        in: path
        name: typeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.userTypes.manage
      summary: Delete a User Type
      tags:
      - UserType
    get:
      description: Retrieves a User Type by ID. The special identifier `default` may
        be used to fetch the default User Type.
      operationId: getUserType
      parameters:
      - explode: false
        in: path
        name: typeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserType'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.userTypes.read
      summary: Retrieve a User Type
      tags:
      - UserType
    post:
      description: Updates an existing User Type
      operationId: updateUserType
      parameters:
      - explode: false
        in: path
        name: typeId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserType'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserType'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.userTypes.manage
      summary: Update a User Type
      tags:
      - UserType
      x-codegen-request-body-name: userType
    put:
      description: Replaces an existing user type
      operationId: replaceUserType
      parameters:
      - explode: false
        in: path
        name: typeId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserType'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserType'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.userTypes.manage
      summary: Replace a User Type
      tags:
      - UserType
      x-codegen-request-body-name: userType
  /api/v1/org:
    get:
      description: Retrieves the org settings
      operationId: getOrgSettings
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgSetting'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.orgs.read
      summary: Retrieve the Org Settings
      tags:
      - OrgSetting
    post:
      description: Partially updates the org settings depending on provided fields
      operationId: updateOrgSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgSetting'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgSetting'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.orgs.manage
      summary: Update the Org Settings
      tags:
      - OrgSetting
    put:
      description: Replaces the settings of your organization
      operationId: replaceOrgSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgSetting'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgSetting'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.orgs.manage
      summary: Replace the Org Settings
      tags:
      - OrgSetting
      x-codegen-request-body-name: orgSetting
  /api/v1/org/contacts:
    get:
      description: Retrieves Contact Types of your organization
      operationId: getOrgContactTypes
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OrgContactTypeObj'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.orgs.read
      summary: Retrieve the Org Contact Types
      tags:
      - OrgSetting
  /api/v1/org/contacts/{contactType}:
    get:
      description: Retrieves the URL of the User associated with the specified Contact
        Type
      operationId: getOrgContactUser
      parameters:
      - explode: false
        in: path
        name: contactType
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgContactUser'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.orgs.read
      summary: Retrieve the User of the Contact Type
      tags:
      - OrgSetting
    put:
      description: Replaces the User associated with the specified Contact Type
      operationId: replaceOrgContactUser
      parameters:
      - explode: false
        in: path
        name: contactType
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgContactUser'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgContactUser'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.orgs.manage
      summary: Replace the User of the Contact Type
      tags:
      - OrgSetting
      x-codegen-request-body-name: orgContactUser
  /api/v1/org/email/bounces/remove-list:
    post:
      description: Removes a list of email addresses to be removed from the set of
        email addresses that are bounced
      operationId: bulkRemoveEmailAddressBounces
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                value:
                  emailAddresses:
                  - name@company.com
                  - unknown.email@okta.com
                  - name@okta@com
            schema:
              $ref: '#/components/schemas/BouncesRemoveListObj'
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  value:
                    errors:
                    - emailAddress: unknown.email@okta.com
                      reason: This email address does not belong to any user in your
                        organization.
                    - emailAddress: name@okta@com
                      reason: Invalid email address. The provided email address failed
                        validation against RFC 3696.
              schema:
                $ref: '#/components/schemas/BouncesRemoveListResult'
          description: Deletes the provided list of emails from the set of email addresses
            that are bounced so that the provider resumes sending emails to those
            addresses.
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.orgs.manage
      summary: Remove Emails from Email Provider Bounce List
      tags:
      - OrgSetting
  /api/v1/org/logo:
    post:
      description: "Uploads and replaces the logo for your organization. The file\
        \ must be in PNG, JPG, or GIF format and less than 100kB in size. For best\
        \ results use landscape orientation, a transparent background, and a minimum\
        \ size of 300px by 50px to prevent upscaling."
      operationId: uploadOrgLogo
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/uploadBrandThemeLogo_request'
        description: logo file
      responses:
        "201":
          description: Created
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.apps.manage
      summary: Upload the Org Logo
      tags:
      - OrgSetting
  /api/v1/org/preferences:
    get:
      description: Retrieves preferences of your organization
      operationId: getOrgPreferences
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgPreferences'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.orgs.read
      summary: Retrieve the Org Preferences
      tags:
      - OrgSetting
  /api/v1/org/preferences/hideEndUserFooter:
    post:
      description: Updates the preference hide the Okta UI footer for all end users
        of your organization
      operationId: updateOrgHideOktaUIFooter
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgPreferences'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.orgs.manage
      summary: Update the Preference to Hide the Okta Dashboard Footer
      tags:
      - OrgSetting
  /api/v1/org/preferences/showEndUserFooter:
    post:
      description: Updates the preference to show the Okta UI footer for all end users
        of your organization
      operationId: updateOrgShowOktaUIFooter
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgPreferences'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.orgs.manage
      summary: Update the Preference to Show the Okta Dashboard Footer
      tags:
      - OrgSetting
  /api/v1/org/privacy/oktaCommunication:
    get:
      description: Retrieves Okta Communication Settings of your organization
      operationId: getOktaCommunicationSettings
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgOktaCommunicationSetting'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.orgs.read
      summary: Retrieve the Okta Communication Settings
      tags:
      - OrgSetting
  /api/v1/org/privacy/oktaCommunication/optIn:
    post:
      description: Opts in all users of this org to Okta Communication emails
      operationId: optInUsersToOktaCommunicationEmails
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgOktaCommunicationSetting'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.orgs.manage
      summary: Opt in all Users to Okta Communication emails
      tags:
      - OrgSetting
  /api/v1/org/privacy/oktaCommunication/optOut:
    post:
      description: Opts out all users of this org from Okta Communication emails
      operationId: optOutUsersFromOktaCommunicationEmails
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgOktaCommunicationSetting'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.orgs.manage
      summary: Opt out all Users from Okta Communication emails
      tags:
      - OrgSetting
  /api/v1/org/privacy/oktaSupport:
    get:
      description: Retrieves Okta Support Settings of your organization
      operationId: getOrgOktaSupportSettings
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgOktaSupportSettingsObj'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.orgs.read
      summary: Retrieve the Okta Support Settings
      tags:
      - OrgSetting
  /api/v1/org/privacy/oktaSupport/extend:
    post:
      description: Extends the length of time that Okta Support can access your org
        by 24 hours. This means that 24 hours are added to the remaining access time.
      operationId: extendOktaSupport
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgOktaSupportSettingsObj'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.orgs.manage
      summary: Extend Okta Support Access
      tags:
      - OrgSetting
  /api/v1/org/privacy/oktaSupport/grant:
    post:
      description: Grants Okta Support temporary access your org as an administrator
        for eight hours
      operationId: grantOktaSupport
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgOktaSupportSettingsObj'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.orgs.manage
      summary: Grant Okta Support Access to your Org
      tags:
      - OrgSetting
  /api/v1/org/privacy/oktaSupport/revoke:
    post:
      description: Revokes Okta Support access to your organization
      operationId: revokeOktaSupport
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgOktaSupportSettingsObj'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.orgs.manage
      summary: Revoke Okta Support Access
      tags:
      - OrgSetting
  /api/v1/policies:
    get:
      description: Lists all policies with the specified type
      operationId: listPolicies
      parameters:
      - explode: true
        in: query
        name: type
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: status
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: expand
        required: false
        schema:
          default: ""
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/listPolicies_200_response_inner'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.policies.read
      summary: List all Policies
      tags:
      - Policy
    post:
      description: Creates a policy
      operationId: createPolicy
      parameters:
      - explode: true
        in: query
        name: activate
        required: false
        schema:
          default: true
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/listPolicies_200_response_inner'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listPolicies_200_response_inner'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.policies.manage
      summary: Create a Policy
      tags:
      - Policy
      x-codegen-request-body-name: policy
  /api/v1/policies/{policyId}:
    delete:
      description: Deletes a policy
      operationId: deletePolicy
      parameters:
      - explode: false
        in: path
        name: policyId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.policies.manage
      summary: Delete a Policy
      tags:
      - Policy
    get:
      description: Retrieves a policy
      operationId: getPolicy
      parameters:
      - explode: false
        in: path
        name: policyId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: expand
        required: false
        schema:
          default: ""
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listPolicies_200_response_inner'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.policies.read
      summary: Retrieve a Policy
      tags:
      - Policy
    put:
      description: Replaces a policy
      operationId: replacePolicy
      parameters:
      - explode: false
        in: path
        name: policyId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/listPolicies_200_response_inner'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listPolicies_200_response_inner'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.policies.manage
      summary: Replace a Policy
      tags:
      - Policy
      x-codegen-request-body-name: policy
  /api/v1/policies/{policyId}/clone:
    post:
      description: Clones an existing policy
      operationId: clonePolicy
      parameters:
      - explode: false
        in: path
        name: policyId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listPolicies_200_response_inner'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.policies.manage
      summary: Clone an existing policy
      tags:
      - Policy
  /api/v1/policies/{policyId}/lifecycle/activate:
    post:
      description: Activates a policy
      operationId: activatePolicy
      parameters:
      - explode: false
        in: path
        name: policyId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.policies.manage
      summary: Activate a Policy
      tags:
      - Policy
  /api/v1/policies/{policyId}/lifecycle/deactivate:
    post:
      description: Deactivates a policy
      operationId: deactivatePolicy
      parameters:
      - explode: false
        in: path
        name: policyId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.policies.manage
      summary: Deactivate a Policy
      tags:
      - Policy
  /api/v1/policies/{policyId}/rules:
    get:
      description: Lists all policy rules
      operationId: listPolicyRules
      parameters:
      - explode: false
        in: path
        name: policyId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/listPolicyRules_200_response_inner'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.policies.read
      summary: List all Policy Rules
      tags:
      - Policy
    post:
      description: Creates a policy rule
      operationId: createPolicyRule
      parameters:
      - explode: false
        in: path
        name: policyId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/listPolicyRules_200_response_inner'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listPolicyRules_200_response_inner'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.policies.manage
      summary: Create a Policy Rule
      tags:
      - Policy
      x-codegen-request-body-name: policyRule
  /api/v1/policies/{policyId}/rules/{ruleId}:
    delete:
      description: Deletes a policy rule
      operationId: deletePolicyRule
      parameters:
      - explode: false
        in: path
        name: policyId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: ruleId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.policies.manage
      summary: Delete a Policy Rule
      tags:
      - Policy
    get:
      description: Retrieves a policy rule
      operationId: getPolicyRule
      parameters:
      - explode: false
        in: path
        name: policyId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: ruleId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listPolicyRules_200_response_inner'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.policies.read
      summary: Retrieve a Policy Rule
      tags:
      - Policy
    put:
      description: Replaces a policy rules
      operationId: replacePolicyRule
      parameters:
      - explode: false
        in: path
        name: policyId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: ruleId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/listPolicyRules_200_response_inner'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listPolicyRules_200_response_inner'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.policies.manage
      summary: Replace a Policy Rule
      tags:
      - Policy
      x-codegen-request-body-name: policyRule
  /api/v1/policies/{policyId}/rules/{ruleId}/lifecycle/activate:
    post:
      description: Activates a policy rule
      operationId: activatePolicyRule
      parameters:
      - explode: false
        in: path
        name: policyId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: ruleId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.policies.manage
      summary: Activate a Policy Rule
      tags:
      - Policy
  /api/v1/policies/{policyId}/rules/{ruleId}/lifecycle/deactivate:
    post:
      description: Deactivates a policy rule
      operationId: deactivatePolicyRule
      parameters:
      - explode: false
        in: path
        name: policyId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: ruleId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.policies.manage
      summary: Deactivate a Policy Rule
      tags:
      - Policy
  /api/v1/principal-rate-limits:
    get:
      description: Lists all Principal Rate Limit entities considering the provided
        parameters
      operationId: listPrincipalRateLimitEntities
      parameters:
      - explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          format: int32
          maximum: 50
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PrincipalRateLimitEntity'
                type: array
          description: OK
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.principalRateLimits.read
      summary: List all Principal Rate Limits
      tags:
      - PrincipalRateLimit
    post:
      description: "Creates a new Principal Rate Limit entity. In the current release,\
        \ we only allow one Principal Rate Limit entity per org and principal."
      operationId: createPrincipalRateLimitEntity
      requestBody:
        content:
          application/json:
            examples:
              SSWSToken:
                $ref: '#/components/examples/PrincipalRateLimitEntityRequestSSWSToken'
              EmptyPercentages:
                $ref: '#/components/examples/PrincipalRateLimitEntityRequestEmptyPercentages'
            schema:
              $ref: '#/components/schemas/PrincipalRateLimitEntity'
        required: true
      responses:
        "201":
          content:
            application/json:
              examples:
                SSWSToken:
                  $ref: '#/components/examples/PrincipalRateLimitEntityResponseSSWSToken'
              schema:
                $ref: '#/components/schemas/PrincipalRateLimitEntity'
          description: Created
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.principalRateLimits.manage
      summary: Create a Principal Rate Limit
      tags:
      - PrincipalRateLimit
      x-codegen-request-body-name: entity
  /api/v1/principal-rate-limits/{principalRateLimitId}:
    get:
      description: Retrieves a Principal Rate Limit entity by `principalRateLimitId`
      operationId: getPrincipalRateLimitEntity
      parameters:
      - description: id of the Principal Rate Limit
        explode: false
        in: path
        name: principalRateLimitId
        required: true
        schema:
          example: abcd1234
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                SSWSToken:
                  $ref: '#/components/examples/PrincipalRateLimitEntityResponseSSWSToken'
              schema:
                $ref: '#/components/schemas/PrincipalRateLimitEntity'
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.principalRateLimits.read
      summary: Retrieve a Principal Rate Limit
      tags:
      - PrincipalRateLimit
    put:
      description: Replaces a principal rate limit entity by `principalRateLimitId`
      operationId: replacePrincipalRateLimitEntity
      parameters:
      - description: id of the Principal Rate Limit
        explode: false
        in: path
        name: principalRateLimitId
        required: true
        schema:
          example: abcd1234
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              SSWSToken:
                $ref: '#/components/examples/PrincipalRateLimitEntityRequestSSWSToken'
              EmptyPercentages:
                $ref: '#/components/examples/PrincipalRateLimitEntityRequestEmptyPercentages'
            schema:
              $ref: '#/components/schemas/PrincipalRateLimitEntity'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                SSWSToken:
                  $ref: '#/components/examples/PrincipalRateLimitEntityResponseSSWSToken'
              schema:
                $ref: '#/components/schemas/PrincipalRateLimitEntity'
          description: OK
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.principalRateLimits.manage
      summary: Replace a Principal Rate Limit
      tags:
      - PrincipalRateLimit
      x-codegen-request-body-name: entity
  /api/v1/push-providers:
    get:
      description: Lists all push providers
      operationId: listPushProviders
      parameters:
      - description: Filters push providers by `providerType`
        explode: true
        in: query
        name: type
        required: false
        schema:
          $ref: '#/components/schemas/ProviderType'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/listPushProviders_200_response_inner'
                type: array
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.pushProviders.read
      summary: List all Push Providers
      tags:
      - PushProvider
    post:
      description: Creates a new push provider
      operationId: createPushProvider
      requestBody:
        content:
          application/json:
            examples:
              APNs:
                $ref: '#/components/examples/PushProviderAPNsRequest'
              FCM:
                $ref: '#/components/examples/PushProviderFCMRequest'
            schema:
              $ref: '#/components/schemas/listPushProviders_200_response_inner'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                APNs:
                  $ref: '#/components/examples/PushProviderAPNsResponse'
                FCM:
                  $ref: '#/components/examples/PushProviderFCMResponse'
              schema:
                $ref: '#/components/schemas/listPushProviders_200_response_inner'
          description: OK
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.pushProviders.manage
      summary: Create a Push Provider
      tags:
      - PushProvider
      x-codegen-request-body-name: pushProvider
  /api/v1/push-providers/{pushProviderId}:
    delete:
      description: "Deletes a push provider by `pushProviderId`. If the push provider\
        \ is currently being used in the org by a custom authenticator, the delete\
        \ will not be allowed."
      operationId: deletePushProvider
      parameters:
      - description: Id of the push provider
        explode: false
        in: path
        name: pushProviderId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "409":
          content:
            application/json:
              examples:
                Cannot remove push provider in use by a custom app authenticator:
                  $ref: '#/components/examples/ErrorPushProviderUsedByCustomAppAuthenticator'
              schema:
                $ref: '#/components/schemas/Error'
          description: Conflict
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.pushProviders.manage
      summary: Delete a Push Provider
      tags:
      - PushProvider
    get:
      description: Retrieves a push provider by `pushProviderId`
      operationId: getPushProvider
      parameters:
      - description: Id of the push provider
        explode: false
        in: path
        name: pushProviderId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                APNs:
                  $ref: '#/components/examples/PushProviderAPNsResponse'
                FCM:
                  $ref: '#/components/examples/PushProviderFCMResponse'
              schema:
                $ref: '#/components/schemas/listPushProviders_200_response_inner'
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.pushProviders.read
      summary: Retrieve a Push Provider
      tags:
      - PushProvider
    put:
      description: Replaces a push provider by `pushProviderId`
      operationId: replacePushProvider
      parameters:
      - description: Id of the push provider
        explode: false
        in: path
        name: pushProviderId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              APNs:
                $ref: '#/components/examples/PushProviderAPNsRequest'
              FCM:
                $ref: '#/components/examples/PushProviderFCMRequest'
            schema:
              $ref: '#/components/schemas/listPushProviders_200_response_inner'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                APNs:
                  $ref: '#/components/examples/PushProviderAPNsResponse'
                FCM:
                  $ref: '#/components/examples/PushProviderFCMResponse'
              schema:
                $ref: '#/components/schemas/listPushProviders_200_response_inner'
          description: OK
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.pushProviders.manage
      summary: Replace a Push Provider
      tags:
      - PushProvider
      x-codegen-request-body-name: pushProvider
  /api/v1/rate-limit-settings/admin-notifications:
    get:
      description: Retrieves the currently configured Rate Limit Admin Notification
        Settings
      operationId: getRateLimitSettingsAdminNotifications
      responses:
        "200":
          content:
            application/json:
              examples:
                Enabled:
                  $ref: '#/components/examples/RateLimitAdminNotificationsEnabled'
                Disabled:
                  $ref: '#/components/examples/RateLimitAdminNotificationsDisabled'
              schema:
                $ref: '#/components/schemas/RateLimitAdminNotifications'
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.rateLimits.read
      summary: Retrieve the Rate Limit Admin Notification Settings
      tags:
      - RateLimitSettings
    put:
      description: Replaces the Rate Limit Admin Notification Settings and returns
        the configured properties
      operationId: replaceRateLimitSettingsAdminNotifications
      requestBody:
        content:
          application/json:
            examples:
              Enabled:
                $ref: '#/components/examples/RateLimitAdminNotificationsEnabled'
              Disabled:
                $ref: '#/components/examples/RateLimitAdminNotificationsDisabled'
            schema:
              $ref: '#/components/schemas/RateLimitAdminNotifications'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                Enabled:
                  $ref: '#/components/examples/RateLimitAdminNotificationsEnabled'
                Disabled:
                  $ref: '#/components/examples/RateLimitAdminNotificationsDisabled'
              schema:
                $ref: '#/components/schemas/RateLimitAdminNotifications'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.rateLimits.manage
      summary: Replace the Rate Limit Admin Notification Settings
      tags:
      - RateLimitSettings
      x-codegen-request-body-name: RateLimitAdminNotifications
  /api/v1/rate-limit-settings/per-client:
    get:
      description: Retrieves the currently configured Per-Client Rate Limit Settings
      operationId: getRateLimitSettingsPerClient
      responses:
        "200":
          content:
            application/json:
              examples:
                EnforceDefault:
                  $ref: '#/components/examples/PerClientRateLimitSettingsEnforceDefault'
                EnforceDefaultWithOverrides:
                  $ref: '#/components/examples/PerClientRateLimitSettingsEnforceDefaultWithOverrides'
                PreviewDefaultWithOverrides:
                  $ref: '#/components/examples/PerClientRateLimitSettingsPreviewDefaultWithOverrides'
              schema:
                $ref: '#/components/schemas/PerClientRateLimitSettings'
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.rateLimits.read
      summary: Retrieve the Per-Client Rate Limit Settings
      tags:
      - RateLimitSettings
    put:
      description: Replaces the Per-Client Rate Limit Settings and returns the configured
        properties
      operationId: replaceRateLimitSettingsPerClient
      requestBody:
        content:
          application/json:
            examples:
              EnforceDefault:
                $ref: '#/components/examples/PerClientRateLimitSettingsEnforceDefault'
              EnforceDefaultWithOverrides:
                $ref: '#/components/examples/PerClientRateLimitSettingsEnforceDefaultWithOverrides'
              PreviewDefaultWithOverrides:
                $ref: '#/components/examples/PerClientRateLimitSettingsPreviewDefaultWithOverrides'
            schema:
              $ref: '#/components/schemas/PerClientRateLimitSettings'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                EnforceDefault:
                  $ref: '#/components/examples/PerClientRateLimitSettingsEnforceDefault'
                EnforceDefaultWithOverrides:
                  $ref: '#/components/examples/PerClientRateLimitSettingsEnforceDefaultWithOverrides'
                PreviewDefaultWithOverrides:
                  $ref: '#/components/examples/PerClientRateLimitSettingsPreviewDefaultWithOverrides'
              schema:
                $ref: '#/components/schemas/PerClientRateLimitSettings'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.rateLimits.manage
      summary: Replace the Per-Client Rate Limit Settings
      tags:
      - RateLimitSettings
      x-codegen-request-body-name: perClientRateLimitSettings
  /api/v1/risk/events/ip:
    post:
      description: "Sends multiple risk events to Okta. This API is intended for Risk\
        \ Providers. This API has a rate limit of 30 requests per minute. The caller\
        \ should include multiple Risk Events (up to a maximum of 20 events) in a\
        \ single payload to reduce the number of API calls. If a client has more risk\
        \ signals to send than what the API supports, we recommend prioritizing posting\
        \ high risk signals."
      operationId: sendRiskEvents
      requestBody:
        content:
          application/json:
            examples:
              Example Request:
                $ref: '#/components/examples/RiskEventsRequest'
            schema:
              items:
                $ref: '#/components/schemas/RiskEvent'
              type: array
        required: true
      responses:
        "202":
          description: Accepted
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.riskEvents.manage
      summary: Send multiple Risk Events
      tags:
      - RiskEvent
      x-codegen-request-body-name: instance
  /api/v1/risk/providers:
    get:
      description: Lists all Risk Providers
      operationId: listRiskProviders
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RiskProvider'
                type: array
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.riskProviders.read
      summary: List all Risk Providers
      tags:
      - RiskProvider
    post:
      description: "Creates a risk provider. A maximum of 3 providers can be created.\
        \ By default, one risk provider is created by Okta."
      operationId: createRiskProvider
      requestBody:
        content:
          application/json:
            examples:
              Request Example:
                $ref: '#/components/examples/RiskProviderRequest'
            schema:
              $ref: '#/components/schemas/RiskProvider'
        required: true
      responses:
        "201":
          content:
            application/json:
              examples:
                Example Response:
                  $ref: '#/components/examples/RiskProviderResponse'
              schema:
                $ref: '#/components/schemas/RiskProvider'
          description: Created
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.riskProviders.manage
      summary: Create a Risk Provider
      tags:
      - RiskProvider
      x-codegen-request-body-name: instance
  /api/v1/risk/providers/{riskProviderId}:
    delete:
      description: Deletes a CAPTCHA instance by `riskProviderId`
      operationId: deleteRiskProvider
      parameters:
      - description: '`id` of the risk provider'
        explode: false
        in: path
        name: riskProviderId
        required: true
        schema:
          example: 00rp12r4skkjkjgsn
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.riskProviders.manage
      summary: Delete a Risk Provider
      tags:
      - RiskProvider
    get:
      description: Retrieves a risk provider by `riskProviderId`
      operationId: getRiskProvider
      parameters:
      - description: '`id` of the risk provider'
        explode: false
        in: path
        name: riskProviderId
        required: true
        schema:
          example: 00rp12r4skkjkjgsn
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Response:
                  $ref: '#/components/examples/RiskProviderResponse'
              schema:
                $ref: '#/components/schemas/RiskProvider'
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.riskProviders.read
      summary: Retrieve a Risk Provider
      tags:
      - RiskProvider
    put:
      description: Replaces a risk provider by `riskProviderId`
      operationId: replaceRiskProvider
      parameters:
      - description: '`id` of the risk provider'
        explode: false
        in: path
        name: riskProviderId
        required: true
        schema:
          example: 00rp12r4skkjkjgsn
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              Request Example:
                $ref: '#/components/examples/RiskProviderRequest'
            schema:
              $ref: '#/components/schemas/RiskProvider'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Response:
                  $ref: '#/components/examples/RiskProviderResponse'
              schema:
                $ref: '#/components/schemas/RiskProvider'
          description: OK
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.riskProviders.manage
      summary: Replace a Risk Provider
      tags:
      - RiskProvider
      x-codegen-request-body-name: instance
  /api/v1/roles/{roleTypeOrRoleId}/subscriptions:
    get:
      description: Lists all subscriptions of a Role identified by `roleType` or of
        a Custom Role identified by `roleId`
      operationId: listRoleSubscriptions
      parameters:
      - explode: false
        in: path
        name: roleTypeOrRoleId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Subscription'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.read
      summary: List all Subscriptions of a Custom Role
      tags:
      - Subscription
  /api/v1/roles/{roleTypeOrRoleId}/subscriptions/{notificationType}:
    get:
      description: Lists all subscriptions with a specific notification type of a
        Role identified by `roleType` or of a Custom Role identified by `roleId`
      operationId: listRoleSubscriptionsByNotificationType
      parameters:
      - explode: false
        in: path
        name: roleTypeOrRoleId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: notificationType
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.read
      summary: List all Subscriptions of a Custom Role with a specific notification
        type
      tags:
      - Subscription
  /api/v1/roles/{roleTypeOrRoleId}/subscriptions/{notificationType}/subscribe:
    post:
      description: "Subscribes a Role identified by `roleType` or of a Custom Role\
        \ identified by `roleId` to a specific notification type. When you change\
        \ the subscription status of a Role or Custom Role, it overrides the subscription\
        \ of any individual user of that Role or Custom Role."
      operationId: subscribeRoleSubscriptionByNotificationType
      parameters:
      - explode: false
        in: path
        name: roleTypeOrRoleId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: notificationType
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.manage
      summary: Subscribe a Custom Role to a specific notification type
      tags:
      - Subscription
  /api/v1/roles/{roleTypeOrRoleId}/subscriptions/{notificationType}/unsubscribe:
    post:
      description: "Unsubscribes a Role identified by `roleType` or of a Custom Role\
        \ identified by `roleId` from a specific notification type. When you change\
        \ the subscription status of a Role or Custom Role, it overrides the subscription\
        \ of any individual user of that Role or Custom Role."
      operationId: unsubscribeRoleSubscriptionByNotificationType
      parameters:
      - explode: false
        in: path
        name: roleTypeOrRoleId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: notificationType
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.manage
      summary: Unsubscribe a Custom Role from a specific notification type
      tags:
      - Subscription
  /api/v1/sessions:
    post:
      description: "Creates a new session for a user with a valid session token. Use\
        \ this API if, for example, you want to set the session cookie yourself instead\
        \ of allowing Okta to set it, or want to hold the session ID in order to delete\
        \ a session via the API instead of visiting the logout URL."
      operationId: createSession
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSessionRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
          description: Success
        "400":
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      summary: Create a Session with Session Token
      tags:
      - Session
      x-codegen-request-body-name: createSessionRequest
  /api/v1/sessions/{sessionId}:
    delete:
      description: Revokes a session
      operationId: revokeSession
      parameters:
      - explode: false
        in: path
        name: sessionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.sessions.manage
      summary: Revoke a Session
      tags:
      - Session
    get:
      description: Retrieves the details about a session
      operationId: getSession
      parameters:
      - explode: false
        in: path
        name: sessionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
          description: Success
        "400":
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.sessions.read
      summary: Retrieve a Session
      tags:
      - Session
  /api/v1/sessions/{sessionId}/lifecycle/refresh:
    post:
      description: Refreshes a session
      operationId: refreshSession
      parameters:
      - explode: false
        in: path
        name: sessionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.sessions.manage
      summary: Refresh a Session
      tags:
      - Session
  /api/v1/templates/sms:
    get:
      description: Lists all custom SMS templates. A subset of templates can be returned
        that match a template type.
      operationId: listSmsTemplates
      parameters:
      - explode: true
        in: query
        name: templateType
        required: false
        schema:
          $ref: '#/components/schemas/SmsTemplateType'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SmsTemplate'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.templates.read
      summary: List all SMS Templates
      tags:
      - Template
    post:
      description: Creates a new custom SMS template
      operationId: createSmsTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SmsTemplate'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmsTemplate'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.templates.manage
      summary: Create an SMS Template
      tags:
      - Template
      x-codegen-request-body-name: smsTemplate
  /api/v1/templates/sms/{templateId}:
    delete:
      description: Deletes an SMS template
      operationId: deleteSmsTemplate
      parameters:
      - explode: false
        in: path
        name: templateId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.templates.manage
      summary: Delete an SMS Template
      tags:
      - Template
    get:
      description: Retrieves a specific template by `id`
      operationId: getSmsTemplate
      parameters:
      - explode: false
        in: path
        name: templateId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmsTemplate'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.templates.read
      summary: Retrieve an SMS Template
      tags:
      - Template
    post:
      description: Updates an SMS template
      operationId: updateSmsTemplate
      parameters:
      - explode: false
        in: path
        name: templateId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SmsTemplate'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmsTemplate'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.templates.manage
      summary: Update an SMS Template
      tags:
      - Template
      x-codegen-request-body-name: smsTemplate
    put:
      description: Replaces the SMS template
      operationId: replaceSmsTemplate
      parameters:
      - explode: false
        in: path
        name: templateId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SmsTemplate'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmsTemplate'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.templates.manage
      summary: Replace an SMS Template
      tags:
      - Template
      x-codegen-request-body-name: smsTemplate
  /api/v1/threats/configuration:
    get:
      description: Retrieves current ThreatInsight configuration
      operationId: getCurrentConfiguration
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThreatInsightConfiguration'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.threatInsights.read
      summary: Retrieve the ThreatInsight Configuration
      tags:
      - ThreatInsight
    post:
      description: Updates ThreatInsight configuration
      operationId: updateConfiguration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThreatInsightConfiguration'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThreatInsightConfiguration'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.threatInsights.manage
      summary: Update the ThreatInsight Configuration
      tags:
      - ThreatInsight
      x-codegen-request-body-name: threatInsightConfiguration
  /api/v1/trustedOrigins:
    get:
      description: Lists all trusted origins
      operationId: listTrustedOrigins
      parameters:
      - explode: true
        in: query
        name: q
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: -1
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TrustedOrigin'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.trustedOrigins.read
      summary: List all Trusted Origins
      tags:
      - TrustedOrigin
    post:
      description: Creates a trusted origin
      operationId: createTrustedOrigin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrustedOrigin'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustedOrigin'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.trustedOrigins.manage
      summary: Create a Trusted Origin
      tags:
      - TrustedOrigin
      x-codegen-request-body-name: trustedOrigin
  /api/v1/trustedOrigins/{trustedOriginId}:
    delete:
      description: Deletes a trusted origin
      operationId: deleteTrustedOrigin
      parameters:
      - explode: false
        in: path
        name: trustedOriginId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.trustedOrigins.manage
      summary: Delete a Trusted Origin
      tags:
      - TrustedOrigin
    get:
      description: Retrieves a trusted origin
      operationId: getTrustedOrigin
      parameters:
      - explode: false
        in: path
        name: trustedOriginId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustedOrigin'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.trustedOrigins.read
      summary: Retrieve a Trusted Origin
      tags:
      - TrustedOrigin
    put:
      description: Replaces a trusted origin
      operationId: replaceTrustedOrigin
      parameters:
      - explode: false
        in: path
        name: trustedOriginId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrustedOrigin'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustedOrigin'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.trustedOrigins.manage
      summary: Replace a Trusted Origin
      tags:
      - TrustedOrigin
      x-codegen-request-body-name: trustedOrigin
  /api/v1/trustedOrigins/{trustedOriginId}/lifecycle/activate:
    post:
      description: Activates a trusted origin
      operationId: activateTrustedOrigin
      parameters:
      - explode: false
        in: path
        name: trustedOriginId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustedOrigin'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.trustedOrigins.manage
      summary: Activate a Trusted Origin
      tags:
      - TrustedOrigin
  /api/v1/trustedOrigins/{trustedOriginId}/lifecycle/deactivate:
    post:
      description: Deactivates a trusted origin
      operationId: deactivateTrustedOrigin
      parameters:
      - explode: false
        in: path
        name: trustedOriginId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustedOrigin'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.trustedOrigins.manage
      summary: Deactivate a Trusted Origin
      tags:
      - TrustedOrigin
  /api/v1/users:
    get:
      description: "Lists all users that do not have a status of 'DEPROVISIONED' (by\
        \ default), up to the maximum (200 for most orgs), with pagination.  A subset\
        \ of users can be returned that match a supported filter expression or search\
        \ criteria."
      operationId: listUsers
      parameters:
      - description: "Finds a user that matches firstName, lastName, and email properties"
        explode: true
        in: query
        name: q
        required: false
        schema:
          type: string
        style: form
      - description: "The cursor to use for pagination. It is an opaque string that\
          \ specifies your current location in the list and is obtained from the `Link`\
          \ response header. See [Pagination](/#pagination) for more information."
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - description: Specifies the number of results returned. Defaults to 10 if `q`
          is provided.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 200
          format: int32
          type: integer
        style: form
      - description: Filters users with a supported expression for a subset of properties
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: Searches for users with a supported filtering expression for
          most properties. Okta recommends using this parameter for search for best
          performance.
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sortBy
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                User List:
                  $ref: '#/components/examples/ListUsersResponse'
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: Success
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.read
      summary: List all Users
      tags:
      - User
    post:
      description: Creates a new user in your Okta organization with or without credentials
      operationId: createUser
      parameters:
      - description: Executes activation lifecycle operation when creating the user
        explode: true
        in: query
        name: activate
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - description: Indicates whether to create a user with a specified authentication
          provider
        explode: true
        in: query
        name: provider
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: "With activate=true, set nextLogin to \"changePassword\" to have\
          \ the password be EXPIRED, so user must change it the next time they log\
          \ in."
        explode: true
        in: query
        name: nextLogin
        required: false
        schema:
          $ref: '#/components/schemas/UserNextLogin'
        style: form
        x-okta-added-version: 0.14.0
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Success
        "400":
          content:
            application/json:
              examples:
                Create user with too many groups specified:
                  $ref: '#/components/examples/ErrorCreateUserWithTooManyManyGroupsResponse'
                Create user with expired password and activate set to `false`:
                  $ref: '#/components/examples/ErrorCreateUserWithExpiredPasswordWithoutActivation'
                Create user with expired password and `null` password:
                  $ref: '#/components/examples/ErrorCreateUserWithExpiredPasswordWithNullPassword'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.manage
      summary: Create a User
      tags:
      - User
      x-codegen-request-body-name: body
  /api/v1/users/{associatedUserId}/linkedObjects/{primaryRelationshipName}/{primaryUserId}:
    put:
      description: Creates a linked object for two users
      operationId: setLinkedObjectForUser
      parameters:
      - explode: false
        in: path
        name: associatedUserId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: primaryRelationshipName
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: primaryUserId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - oauth2:
        - okta.users.manage
      summary: Create a Linked Object for two User
      tags:
      - User
  /api/v1/users/{userId}:
    delete:
      description: Deletes a user permanently. This operation can only be performed
        on users that have a `DEPROVISIONED` status.  **This action cannot be recovered!**.
        Calling this on an `ACTIVE` user will transition the user to `DEPROVISIONED`.
      operationId: deleteUser
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: sendEmail
        required: false
        schema:
          default: false
          type: boolean
        style: form
        x-okta-added-version: 1.5.0
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.manage
      summary: Delete a User
      tags:
      - User
    get:
      description: Retrieves a user from your Okta organization
      operationId: getUser
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: "Specifies additional metadata to include in the response. Possible\
          \ value: `blocks`"
        explode: true
        in: query
        name: expand
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Success
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.read
      summary: Retrieve a User
      tags:
      - User
    post:
      description: Updates a user partially determined by the request parameters
      operationId: updateUser
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: strict
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.manage
      summary: Update a User
      tags:
      - User
      x-codegen-request-body-name: user
    put:
      description: Replaces a user's profile and/or credentials using strict-update
        semantics
      operationId: replaceUser
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: strict
        required: false
        schema:
          type: boolean
        style: form
        x-okta-added-version: 1.10.0
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.manage
      summary: Replace a User
      tags:
      - User
      x-codegen-request-body-name: user
  /api/v1/users/{userId}/appLinks:
    get:
      description: Lists all appLinks for all direct or indirect (via group membership)
        assigned applications
      operationId: listAppLinks
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AppLink'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.read
      summary: List all Assigned Application Links
      tags:
      - User
  /api/v1/users/{userId}/blocks:
    get:
      description: Lists information about how the user is blocked from accessing
        their account
      operationId: listUserBlocks
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                BlocksUnknownDevices:
                  $ref: '#/components/examples/ListUserBlocksUnknownDevicesResponse'
                BlocksAnyDevices:
                  $ref: '#/components/examples/ListUserBlocksAnyDevicesResponse'
              schema:
                items:
                  $ref: '#/components/schemas/UserBlock'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.read
      summary: List all User Blocks
      tags:
      - User
  /api/v1/users/{userId}/clients:
    get:
      description: Lists all client resources for which the specified user has grants
        or tokens
      operationId: listUserClients
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OAuth2Client'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.read
      summary: List all Clients
      tags:
      - User
  /api/v1/users/{userId}/clients/{clientId}/grants:
    delete:
      description: Revokes all grants for the specified user and client
      operationId: revokeGrantsForUserAndClient
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: clientId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.manage
      summary: Revoke all Grants for a Client
      tags:
      - User
    get:
      description: Lists all grants for a specified user and client
      operationId: listGrantsForUserAndClient
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: clientId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: expand
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OAuth2ScopeConsentGrant'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.read
      summary: List all Grants for a Client
      tags:
      - User
  /api/v1/users/{userId}/clients/{clientId}/tokens:
    delete:
      description: Revokes all refresh tokens issued for the specified User and Client
      operationId: revokeTokensForUserAndClient
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: clientId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.manage
      summary: Revoke all Refresh Tokens for a Client
      tags:
      - User
    get:
      description: Lists all refresh tokens issued for the specified User and Client
      operationId: listRefreshTokensForUserAndClient
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: clientId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: expand
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OAuth2RefreshToken'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.read
      summary: List all Refresh Tokens for a Client
      tags:
      - User
  /api/v1/users/{userId}/clients/{clientId}/tokens/{tokenId}:
    delete:
      description: Revokes the specified refresh token
      operationId: revokeTokenForUserAndClient
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: clientId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: tokenId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.manage
      summary: Revoke a Token for a Client
      tags:
      - User
    get:
      description: Retrieves a refresh token issued for the specified User and Client
      operationId: getRefreshTokenForUserAndClient
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: clientId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: tokenId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: expand
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          type: integer
        style: form
      - explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2RefreshToken'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.read
      summary: Retrieve a Refresh Token for a Client
      tags:
      - User
  /api/v1/users/{userId}/credentials/change_password:
    post:
      description: "Changes a user's password by validating the user's current password.\
        \ This operation can only be performed on users in `STAGED`, `ACTIVE`, `PASSWORD_EXPIRED`,\
        \ or `RECOVERY` status that have a valid password credential"
      operationId: changePassword
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: strict
        required: false
        schema:
          type: boolean
        style: form
        x-okta-added-version: 1.10.0
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCredentials'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.manage
      summary: Change Password
      tags:
      - User
      x-codegen-request-body-name: changePasswordRequest
  /api/v1/users/{userId}/credentials/change_recovery_question:
    post:
      description: "Changes a user's recovery question & answer credential by validating\
        \ the user's current password.  This operation can only be performed on users\
        \ in **STAGED**, **ACTIVE** or **RECOVERY** `status` that have a valid password\
        \ credential"
      operationId: changeRecoveryQuestion
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCredentials'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.manage
      summary: Change Recovery Question
      tags:
      - User
      x-codegen-request-body-name: userCredentials
  /api/v1/users/{userId}/credentials/forgot_password:
    post:
      description: Initiates the forgot password flow. Generates a one-time token
        (OTT) that can be used to reset a user's password.
      operationId: forgotPassword
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: sendEmail
        required: false
        schema:
          default: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForgotPasswordResponse'
          description: Reset url
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.manage
      summary: Initiate Forgot Password
      tags:
      - User
  /api/v1/users/{userId}/credentials/forgot_password_recovery_question:
    post:
      description: Resets the user's password to the specified password if the provided
        answer to the recovery question is correct
      operationId: forgotPasswordSetNewPassword
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: sendEmail
        required: false
        schema:
          default: true
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCredentials'
          description: Credentials
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.manage
      summary: Reset Password with Recovery Question
      tags:
      - User
      x-codegen-request-body-name: userCredentials
  /api/v1/users/{userId}/factors:
    get:
      description: Lists all the enrolled factors for the specified user
      operationId: listFactors
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/listFactors_200_response_inner'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.read
      summary: List all Factors
      tags:
      - UserFactor
    post:
      description: Enrolls a user with a supported factor
      operationId: enrollFactor
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: updatePhone
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: id of SMS template (only for SMS factor)
        explode: true
        in: query
        name: templateId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: tokenLifetimeSeconds
        required: false
        schema:
          default: 300
          format: int32
          type: integer
        style: form
        x-okta-added-version: 1.3.0
      - explode: true
        in: query
        name: activate
        required: false
        schema:
          default: false
          type: boolean
        style: form
        x-okta-added-version: 1.3.0
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/listFactors_200_response_inner'
        description: Factor
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listFactors_200_response_inner'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.manage
      summary: Enroll a Factor
      tags:
      - UserFactor
      x-codegen-request-body-name: body
  /api/v1/users/{userId}/factors/catalog:
    get:
      description: Lists all the supported factors that can be enrolled for the specified
        user
      operationId: listSupportedFactors
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/listFactors_200_response_inner'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.read
      summary: List all Supported Factors
      tags:
      - UserFactor
  /api/v1/users/{userId}/factors/questions:
    get:
      description: Lists all available security questions for a user's `question`
        factor
      operationId: listSupportedSecurityQuestions
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SecurityQuestion'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      summary: List all Supported Security Questions
      tags:
      - UserFactor
  /api/v1/users/{userId}/factors/{factorId}:
    delete:
      description: "Unenrolls an existing factor for the specified user, allowing\
        \ the user to enroll a new factor"
      operationId: unenrollFactor
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: factorId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: removeEnrollmentRecovery
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.manage
      summary: Unenroll a Factor
      tags:
      - UserFactor
    get:
      description: Retrieves a factor for the specified user
      operationId: getFactor
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: factorId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listFactors_200_response_inner'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.read
      summary: Retrieve a Factor
      tags:
      - UserFactor
  /api/v1/users/{userId}/factors/{factorId}/lifecycle/activate:
    post:
      description: Activates a factor. The `sms` and `token:software:totp` factor
        types require activation to complete the enrollment process.
      operationId: activateFactor
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: factorId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivateFactorRequest'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listFactors_200_response_inner'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.manage
      summary: Activate a Factor
      tags:
      - UserFactor
      x-codegen-request-body-name: body
  /api/v1/users/{userId}/factors/{factorId}/transactions/{transactionId}:
    get:
      description: Retrieves the factors verification transaction status
      operationId: getFactorTransactionStatus
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: factorId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: transactionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyUserFactorResponse'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.read
      summary: Retrieve a Factor Transaction Status
      tags:
      - UserFactor
  /api/v1/users/{userId}/factors/{factorId}/verify:
    post:
      description: Verifies an OTP for a `token` or `token:hardware` factor
      operationId: verifyFactor
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: factorId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: templateId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: tokenLifetimeSeconds
        required: false
        schema:
          default: 300
          format: int32
          type: integer
        style: form
        x-okta-added-version: 1.3.0
      - explode: false
        in: header
        name: X-Forwarded-For
        required: false
        schema:
          type: string
        style: simple
        x-okta-added-version: 1.11.0
      - explode: false
        in: header
        name: User-Agent
        required: false
        schema:
          type: string
        style: simple
        x-okta-added-version: 1.11.0
      - explode: false
        in: header
        name: Accept-Language
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyFactorRequest'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyUserFactorResponse'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.manage
      summary: Verify an MFA Factor
      tags:
      - UserFactor
      x-codegen-request-body-name: body
  /api/v1/users/{userId}/grants:
    delete:
      description: Revokes all grants for a specified user
      operationId: revokeUserGrants
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.manage
      summary: Revoke all User Grants
      tags:
      - User
    get:
      description: Lists all grants for the specified user
      operationId: listUserGrants
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: scopeId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: expand
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OAuth2ScopeConsentGrant'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.read
      summary: List all User Grants
      tags:
      - User
  /api/v1/users/{userId}/grants/{grantId}:
    delete:
      description: Revokes one grant for a specified user
      operationId: revokeUserGrant
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: grantId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.manage
      summary: Revoke a User Grant
      tags:
      - User
    get:
      description: Retrieves a grant for the specified user
      operationId: getUserGrant
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: grantId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: expand
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2ScopeConsentGrant'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.read
      summary: Retrieve a User Grant
      tags:
      - User
  /api/v1/users/{userId}/groups:
    get:
      description: Lists all groups of which the user is a member
      operationId: listUserGroups
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Group'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.read
      summary: List all Groups
      tags:
      - User
  /api/v1/users/{userId}/idps:
    get:
      description: Lists the IdPs associated with the user
      operationId: listUserIdentityProviders
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/IdentityProvider'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.read
      summary: List all Identity Providers
      tags:
      - User
  /api/v1/users/{userId}/lifecycle/activate:
    post:
      description: Activates a user.  This operation can only be performed on users
        with a `STAGED` status.  Activation of a user is an asynchronous operation.
        The user will have the `transitioningToStatus` property with a value of `ACTIVE`
        during activation to indicate that the user hasn't completed the asynchronous
        operation.  The user will have a status of `ACTIVE` when the activation process
        is complete.
      operationId: activateUser
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: Sends an activation email to the user if true
        explode: true
        in: query
        name: sendEmail
        required: true
        schema:
          default: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserActivationToken'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.manage
      summary: Activate a User
      tags:
      - User
  /api/v1/users/{userId}/lifecycle/deactivate:
    post:
      description: "Deactivates a user. This operation can only be performed on users\
        \ that do not have a `DEPROVISIONED` status. While the asynchronous operation\
        \ (triggered by HTTP header `Prefer: respond-async`) is proceeding the user's\
        \ `transitioningToStatus` property is `DEPROVISIONED`. The user's status is\
        \ `DEPROVISIONED` when the deactivation process is complete."
      operationId: deactivateUser
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: sendEmail
        required: false
        schema:
          default: false
          type: boolean
        style: form
        x-okta-added-version: 1.5.0
      responses:
        "200":
          content: {}
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.manage
      summary: Deactivate a User
      tags:
      - User
  /api/v1/users/{userId}/lifecycle/expire_password:
    post:
      description: Expires a user's password and transitions the user to the status
        of `PASSWORD_EXPIRED` so that the user is required to change their password
        at their next login
      operationId: expirePassword
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.manage
      summary: Expire Password
      tags:
      - User
  /api/v1/users/{userId}/lifecycle/expire_password_with_temp_password:
    post:
      description: "Expires a user's password and transitions the user to the status\
        \ of `PASSWORD_EXPIRED` so that the user is required to change their password\
        \ at their next login, and also sets the user's password to a temporary password\
        \ returned in the response"
      operationId: expirePasswordAndGetTemporaryPassword
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TempPassword'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.manage
      summary: Expire Password and Set Temporary Password
      tags:
      - User
  /api/v1/users/{userId}/lifecycle/reactivate:
    post:
      description: "Reactivates a user.  This operation can only be performed on users\
        \ with a `PROVISIONED` status.  This operation restarts the activation workflow\
        \ if for some reason the user activation was not completed when using the\
        \ activationToken from [Activate User](#activate-user)."
      operationId: reactivateUser
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: Sends an activation email to the user if true
        explode: true
        in: query
        name: sendEmail
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserActivationToken'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.manage
      summary: Reactivate a User
      tags:
      - User
  /api/v1/users/{userId}/lifecycle/reset_factors:
    post:
      description: Resets all factors for the specified user. All MFA factor enrollments
        returned to the unenrolled state. The user's status remains ACTIVE. This link
        is present only if the user is currently enrolled in one or more MFA factors.
      operationId: resetFactors
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.manage
      summary: Reset all Factors
      tags:
      - User
  /api/v1/users/{userId}/lifecycle/reset_password:
    post:
      description: Generates a one-time token (OTT) that can be used to reset a user's
        password.  The OTT link can be automatically emailed to the user or returned
        to the API caller and distributed using a custom flow.
      operationId: generateResetPasswordToken
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: sendEmail
        required: true
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPasswordToken'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.manage
      summary: Generate a Reset Password Token
      tags:
      - User
  /api/v1/users/{userId}/lifecycle/suspend:
    post:
      description: Suspends a user.  This operation can only be performed on users
        with an `ACTIVE` status.  The user will have a status of `SUSPENDED` when
        the process is complete.
      operationId: suspendUser
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.manage
      summary: Suspend a User
      tags:
      - User
  /api/v1/users/{userId}/lifecycle/unlock:
    post:
      description: Unlocks a user with a `LOCKED_OUT` status or unlocks a user with
        an `ACTIVE` status that is blocked from unknown devices. Unlocked users have
        an `ACTIVE` status and can sign in with their current password.
      operationId: unlockUser
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.manage
      summary: Unlock a User
      tags:
      - User
  /api/v1/users/{userId}/lifecycle/unsuspend:
    post:
      description: Unsuspends a user and returns them to the `ACTIVE` state.  This
        operation can only be performed on users that have a `SUSPENDED` status.
      operationId: unsuspendUser
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.manage
      summary: Unsuspend a User
      tags:
      - User
  /api/v1/users/{userId}/linkedObjects/{relationshipName}:
    delete:
      description: "Deletes linked objects for a user, relationshipName can be ONLY\
        \ a primary relationship name"
      operationId: deleteLinkedObjectForUser
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: relationshipName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.manage
      summary: Delete a Linked Object
      tags:
      - User
    get:
      description: "Lists all linked objects for a user, relationshipName can be a\
        \ primary or associated relationship name"
      operationId: listLinkedObjectsForUser
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: relationshipName
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: -1
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ResponseLinks'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.read
      summary: List all Linked Objects
      tags:
      - User
  /api/v1/users/{userId}/roles:
    get:
      description: Lists all roles assigned to a user identified by `userId`
      operationId: listAssignedRolesForUser
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: expand
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Role'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.read
      summary: List all Roles assigned to a User
      tags:
      - RoleAssignment
    post:
      description: Assigns a role to a user identified by `userId`
      operationId: assignRoleToUser
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: Setting this to `true` grants the user third-party admin status
        explode: true
        in: query
        name: disableNotifications
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignRoleRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
          description: Created
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.manage
      summary: Assign a Role to a User
      tags:
      - RoleAssignment
      x-codegen-request-body-name: assignRoleRequest
  /api/v1/users/{userId}/roles/{roleId}:
    delete:
      description: Unassigns a role identified by `roleId` from a user identified
        by `userId`
      operationId: unassignRoleFromUser
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: roleId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.manage
      summary: Unassign a Role from a User
      tags:
      - RoleAssignment
    get:
      description: Retrieves a role identified by `roleId` assigned to a user identified
        by `userId`
      operationId: getUserAssignedRole
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: roleId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.read
      summary: Retrieve a Role assigned to a User
      tags:
      - RoleAssignment
  /api/v1/users/{userId}/roles/{roleId}/targets/catalog/apps:
    get:
      description: "Lists all App targets for an `APP_ADMIN` Role assigned to a User.\
        \ This methods return list may include full Applications or Instances. The\
        \ response for an instance will have an `ID` value, while Application will\
        \ not have an ID."
      operationId: listApplicationTargetsForApplicationAdministratorRoleForUser
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: roleId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CatalogApplication'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.read
      summary: List all Application Targets for Application Administrator Role
      tags:
      - RoleTarget
    put:
      description: Assigns all Apps as Target to Role
      operationId: assignAllAppsAsTargetToRoleForUser
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: roleId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.manage
      summary: Assign all Apps as Target to Role
      tags:
      - RoleTarget
  /api/v1/users/{userId}/roles/{roleId}/targets/catalog/apps/{appName}:
    delete:
      description: Unassigns an application target from application administrator
        role
      operationId: unassignAppTargetFromAppAdminRoleForUser
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: roleId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: appName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.manage
      summary: Unassign an Application Target from an Application Administrator Role
      tags:
      - RoleTarget
    put:
      description: Assigns an application target to administrator role
      operationId: assignAppTargetToAdminRoleForUser
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: roleId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: appName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.manage
      summary: Assign an Application Target to Administrator Role
      tags:
      - RoleTarget
  /api/v1/users/{userId}/roles/{roleId}/targets/catalog/apps/{appName}/{applicationId}:
    delete:
      description: Unassigns an application instance target from an application administrator
        role
      operationId: unassignAppInstanceTargetFromAdminRoleForUser
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: roleId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: appName
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: applicationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.manage
      summary: Unassign an Application Instance Target from an Application Administrator
        Role
      tags:
      - RoleTarget
    put:
      description: Assigns anapplication instance target to appplication administrator
        role
      operationId: assignAppInstanceTargetToAppAdminRoleForUser
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: roleId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: appName
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: applicationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.manage
      summary: Assign an Application Instance Target to an Application Administrator
        Role
      tags:
      - RoleTarget
  /api/v1/users/{userId}/roles/{roleId}/targets/groups:
    get:
      description: Lists all group targets for role
      operationId: listGroupTargetsForRole
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: roleId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Group'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.read
      summary: List all Group Targets for Role
      tags:
      - RoleTarget
  /api/v1/users/{userId}/roles/{roleId}/targets/groups/{groupId}:
    delete:
      description: Unassigns a Group Target from Role
      operationId: unassignGroupTargetFromUserAdminRole
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: roleId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.manage
      summary: Unassign a Group Target from Role
      tags:
      - RoleTarget
    put:
      description: Assigns a Group Target to Role
      operationId: assignGroupTargetToUserRole
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: roleId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.roles.manage
      summary: Assign a Group Target to Role
      tags:
      - RoleTarget
  /api/v1/users/{userId}/sessions:
    delete:
      description: Revokes all active identity provider sessions of the user. This
        forces the user to authenticate on the next operation. Optionally revokes
        OpenID Connect and OAuth refresh and access tokens issued to the user.
      operationId: revokeUserSessions
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: Revoke issued OpenID Connect and OAuth refresh and access tokens
        explode: true
        in: query
        name: oauthTokens
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.manage
      summary: Revoke all User Sessions
      tags:
      - User
  /api/v1/users/{userId}/subscriptions:
    get:
      description: Lists all subscriptions of a user. Only lists subscriptions for
        current user. An AccessDeniedException message is sent if requests are made
        from other users.
      operationId: listUserSubscriptions
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Subscription'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.read
      summary: List all Subscriptions
      tags:
      - Subscription
  /api/v1/users/{userId}/subscriptions/{notificationType}:
    get:
      description: Lists all the subscriptions of a User with a specific notification
        type. Only gets subscriptions for current user. An AccessDeniedException message
        is sent if requests are made from other users.
      operationId: listUserSubscriptionsByNotificationType
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: notificationType
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.read
      summary: List all Subscriptions by type
      tags:
      - Subscription
  /api/v1/users/{userId}/subscriptions/{notificationType}/subscribe:
    post:
      description: Subscribes a User to a specific notification type. Only the current
        User can subscribe to a specific notification type. An AccessDeniedException
        message is sent if requests are made from other users.
      operationId: subscribeUserSubscriptionByNotificationType
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: notificationType
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.manage
      summary: Subscribe to a specific notification type
      tags:
      - Subscription
  /api/v1/users/{userId}/subscriptions/{notificationType}/unsubscribe:
    post:
      description: Unsubscribes a User from a specific notification type. Only the
        current User can unsubscribe from a specific notification type. An AccessDeniedException
        message is sent if requests are made from other users.
      operationId: unsubscribeUserSubscriptionByNotificationType
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: notificationType
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.users.manage
      summary: Unsubscribe from a specific notification type
      tags:
      - Subscription
  /api/v1/zones:
    get:
      description: "Lists all network zones with pagination. A subset of zones can\
        \ be returned that match a supported filter expression or query.\n\nThis operation\
        \ requires URL encoding. For example, `filter=(id eq \"nzoul0wf9jyb8xwZm0g3\"\
        \ or id eq \"nzoul1MxmGN18NDQT0g3\")` is encoded as `filter=%28id+eq+%22nzoul0wf9jyb8xwZm0g3%22+or+id+eq+%22nzoul1MxmGN18NDQT0g3%22%29`.\n\
        \nOkta supports filtering on the `id` and `usage` properties. See [Filtering](https://developer.okta.com/docs/reference/core-okta-api/#filter)\
        \ for more information on the expressions that are used in filtering."
      operationId: listNetworkZones
      parameters:
      - description: Specifies the pagination cursor for the next page of network
          zones
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - description: Specifies the number of results for a page
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: -1
          format: int32
          type: integer
        style: form
      - description: Filters zones by usage or id expression
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/NetworkZone'
                type: array
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.networkZones.read
      summary: List all Network Zones
      tags:
      - NetworkZone
    post:
      description: "Creates a new network zone.\n* At least one of either the `gateways`\
        \ attribute or `proxies` attribute must be defined when creating a Network\
        \ Zone.\n* At least one of the following attributes must be defined: `proxyType`,\
        \ `locations`, or `asns`."
      operationId: createNetworkZone
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NetworkZone'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkZone'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.networkZones.manage
      summary: Create a Network Zone
      tags:
      - NetworkZone
      x-codegen-request-body-name: zone
  /api/v1/zones/{zoneId}:
    delete:
      description: Deletes network zone by `zoneId`
      operationId: deleteNetworkZone
      parameters:
      - explode: false
        in: path
        name: zoneId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.networkZones.manage
      summary: Delete a Network Zone
      tags:
      - NetworkZone
    get:
      description: Retrieves a network zone by `zoneId`
      operationId: getNetworkZone
      parameters:
      - explode: false
        in: path
        name: zoneId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkZone'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.networkZones.read
      summary: Retrieve a Network Zone
      tags:
      - NetworkZone
    put:
      description: "Replaces a network zone by `zoneId`. The replaced network zone\
        \ type must be the same as the existing type.\nYou may replace the usage (`POLICY`,\
        \ `BLOCKLIST`) of a network zone by updating the `usage` attribute."
      operationId: replaceNetworkZone
      parameters:
      - explode: false
        in: path
        name: zoneId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NetworkZone'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkZone'
          description: Success
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.networkZones.manage
      summary: Replace a Network Zone
      tags:
      - NetworkZone
      x-codegen-request-body-name: zone
  /api/v1/zones/{zoneId}/lifecycle/activate:
    post:
      description: Activates a network zone by `zoneId`
      operationId: activateNetworkZone
      parameters:
      - explode: false
        in: path
        name: zoneId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkZone'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.networkZones.manage
      summary: Activate a Network Zone
      tags:
      - NetworkZone
  /api/v1/zones/{zoneId}/lifecycle/deactivate:
    post:
      description: Deactivates a network zone by `zoneId`
      operationId: deactivateNetworkZone
      parameters:
      - explode: false
        in: path
        name: zoneId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkZone'
          description: Success
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.networkZones.manage
      summary: Deactivate a Network Zone
      tags:
      - NetworkZone
  /attack-protection/api/v1/user-lockout-settings:
    get:
      description: Retrieves the User Lockout Settings for an org
      operationId: getUserLockoutSettings
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserLockoutSettings'
                type: array
          description: OK
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.orgs.read
      summary: Retrieve the User Lockout Settings
      tags:
      - AttackProtection
    put:
      description: Replaces the User Lockout Settings for an org
      operationId: replaceUserLockoutSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLockoutSettings'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLockoutSettings'
          description: OK
        "400":
          content:
            application/json:
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Access Denied:
                  $ref: '#/components/examples/ErrorAccessDenied'
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorTooManyRequests'
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
      security:
      - apiToken: []
      - oauth2:
        - okta.orgs.manage
      summary: Replace the User Lockout Settings
      tags:
      - AttackProtection
      x-codegen-request-body-name: lockoutSettings
components:
  examples:
    ApiTokenListMetadataResponse:
      value:
      - name: My API Token
        userId: 00uabcdefg1234567890
        tokenWindow: P30D
        id: 00Tabcdefg1234567890
        clientName: Okta API
        expiresAt: 2021-12-11T20:38:10.000Z
        created: 2021-11-09T20:38:10.000Z
        lastUpdated: 2021-11-11T20:38:10.000Z
        _links:
          self:
            href: "https://{yourOktaDomain}/api/v1/api-tokens/00Tabcdefg1234567890"
            hints:
              allow:
              - GET
              - DELETE
          user:
            href: "https://{yourOktaDomain}/api/v1/users/00uabcdefg1234567890"
            hints:
              allow:
              - GET
      - name: Another API Token
        userId: 00uabcdefg1234567890
        tokenWindow: PT5M
        id: 00T1234567890abcdefg
        clientName: Okta API
        expiresAt: 2021-11-11T20:43:10.000Z
        created: 2021-11-09T20:38:10.000Z
        lastUpdated: 2021-11-11T20:38:10.000Z
        _links:
          self:
            href: "https://{yourOktaDomain}/api/v1/api-tokens/00T1234567890abcdefg"
            hints:
              allow:
              - GET
              - DELETE
          user:
            href: "https://{yourOktaDomain}/api/v1/users/00uabcdefg1234567890"
            hints:
              allow:
              - GET
    ApiTokenMetadataResponse:
      value:
        name: My API Token
        userId: 00uXXXXXXXXXXXXXXXXX
        tokenWindow: P30D
        id: 00Tabcdefg1234567890
        clientName: Okta API
        expiresAt: 2021-12-11T20:38:10.000Z
        created: 2021-11-09T20:38:10.000Z
        lastUpdated: 2021-11-11T20:38:10.000Z
        _links:
          self:
            href: "https://{yourOktaDomain}/api/v1/api-tokens/00Tabcdefg1234567890"
            hints:
              allow:
              - GET
              - DELETE
          user:
            href: "https://{yourOktaDomain}/api/v1/users/00uXXXXXXXXXXXXXXXXX"
            hints:
              allow:
              - GET
    AppUserSchemaAddRequest:
      value:
        definitions:
          custom:
            id: '#custom'
            type: object
            properties:
              twitterUserName:
                title: Twitter username
                description: User's username for twitter.com
                type: string
                required: false
                minLength: 1
                maxLength: 20
            required: []
    AppUserSchemaResponse:
      value:
        id: "https://{yourOktaDomain}/meta/schemas/apps/0oa25gejWwdXNnFH90g4/default"
        $schema: http://json-schema.org/draft-04/schema#
        name: Example App
        title: Example App User
        lastUpdated: 2017-07-18T23:18:43.000Z
        created: 2017-07-18T22:35:30.000Z
        definitions:
          base:
            id: '#base'
            type: object
            properties:
              userName:
                title: Username
                type: string
                required: true
                scope: NONE
                maxLength: 100
            required:
            - userName
          custom:
            id: '#custom'
            type: object
            properties:
              twitterUserName:
                title: Twitter username
                description: User's username for twitter.com
                type: string
                scope: NONE
                minLength: 1
                maxLength: 20
            required: []
        type: object
        properties:
          profile:
            allOf:
            - $ref: '#/definitions/base'
            - $ref: '#/definitions/custom'
    AuthenticatorRequestDuo:
      value:
        key: duo
        name: Duo Security
        provider:
          type: DUO
          configuration:
            userNameTemplate:
              template: oktaId
            integrationKey: testIntegrationKey
            secretKey: testSecretKey
            host: https://api-xxxxxxxx.duosecurity.com
    AuthenticatorResponseDuo:
      value:
        type: app
        id: aut9gnvcjUHIWb37J0g4
        key: duo
        status: ACTIVE
        name: Duo Security
        created: 2022-07-15T21:14:02.000Z
        lastUpdated: 2022-07-15T21:14:02.000Z
        settings: {}
        provider:
          type: DUO
          configuration:
            host: https://api-xxxxxxxx.duosecurity.com
            userNameTemplate:
              template: oktaId
        _links:
          self:
            href: "https://{yourOktaDomain}/api/v1/authenticators/aut5gnvcjUHIWb25J0g4"
            hints:
              allow:
              - GET
              - PUT
          deactivate:
            href: "https://{yourOktaDomain}/api/v1/authenticators/aut5gnvcjUHIWb25J0g4/lifecycle/deactivate"
            hints:
              allow:
              - POST
          methods:
            href: "https://{yourOktaDomain}/api/v1/authenticators/aut5gnvcjUHIWb25J0g4/methods"
            hints:
              allow:
              - GET
    AuthenticatorResponseEmail:
      value:
        type: email
        id: aut1nbsPHh7jNjjyP0g4
        key: okta_email
        status: ACTIVE
        name: Email
        created: 2020-07-26T21:05:23.000Z
        lastUpdated: 2020-07-28T21:45:52.000Z
        settings:
          allowedFor: any
          tokenLifetimeInMinutes: 5
        _links:
          self:
            href: "https://{yourOktaDomain}/api/v1/authenticators/aut1nbsPHh7jNjjyP0g4"
            hints:
              allow:
              - GET
              - PUT
          methods:
            href: "https://{yourOktaDomain}/api/v1/authenticators/aut1nbsPHh7jNjjyP0g4/methods"
            hints:
              allow:
              - GET
          deactivate:
            href: "https://{yourOktaDomain}/api/v1/authenticators/aut1nbsPHh7jNjjyP0g4/lifecycle/deactivate"
            hints:
              allow:
              - POST
    AuthenticatorResponsePassword:
      value:
        type: password
        id: aut1nbtrJKKA9m45a0g4
        key: okta_password
        status: ACTIVE
        name: Password
        created: 2020-07-26T21:05:23.000Z
        lastUpdated: 2020-07-26T21:05:23.000Z
        _links:
          self:
            href: "https://{yourOktaDomain}/api/v1/authenticators/aut1nbtrJKKA9m45a0g4"
            hints:
              allow:
              - GET
              - PUT
          methods:
            href: "https://{yourOktaDomain}/api/v1/authenticators/aut1nbtrJKKA9m45a0g4/methods"
            hints:
              allow:
              - GET
    AuthenticatorResponsePhone:
      value:
        type: phone
        id: aut1nbuyD8m1ckAYc0g4
        key: phone_number
        status: INACTIVE
        name: Phone
        created: 2020-07-26T21:05:23.000Z
        lastUpdated: 2020-07-29T00:21:29.000Z
        settings:
          allowedFor: none
        _links:
          self:
            href: "https://{yourOktaDomain}/api/v1/authenticators/aut1nbuyD8m1ckAYc0g4"
            hints:
              allow:
              - GET
              - PUT
          methods:
            href: "https://{yourOktaDomain}/api/v1/authenticators/aut1nbuyD8m1ckAYc0g4/methods"
            hints:
              allow:
              - GET
          activate:
            href: "https://{yourOktaDomain}/api/v1/authenticators/aut1nbuyD8m1ckAYc0g4/lifecycle/activate"
            hints:
              allow:
              - POST
    AuthenticatorResponseSecurityQuestion:
      value:
        type: security_question
        id: aut1nbvIgEenhwE6c0g4
        key: security_question
        status: ACTIVE
        name: Security Question
        created: 2020-07-26T21:05:23.000Z
        lastUpdated: 2020-07-26T21:05:23.000Z
        _links:
          self:
            href: "https://{yourOktaDomain}/api/v1/authenticators/aut1nbvIgEenhwE6c0g4"
            hints:
              allow:
              - GET
          methods:
            href: "https://{yourOktaDomain}/api/v1/authenticators/aut1nbvIgEenhwE6c0g4/methods"
            hints:
              allow:
              - GET
          deactivate:
            href: "https://{yourOktaDomain}/api/v1/authenticators/aut1nbvIgEenhwE6c0g4/lifecycle/deactivate"
            hints:
              allow:
              - POST
    AuthenticatorResponseWebAuthn:
      value:
        type: security_key
        id: aut1nd8PQhGcQtSxB0g4
        key: webauthn
        status: ACTIVE
        name: Security Key or Biometric
        created: 2020-07-26T21:16:37.000Z
        lastUpdated: 2020-07-27T18:59:30.000Z
        _links:
          self:
            href: "https://{yourOktaDomain}/api/v1/authenticators/aut1nd8PQhGcQtSxB0g4"
            hints:
              allow:
              - GET
              - PUT
          methods:
            href: "https://{yourOktaDomain}/api/v1/authenticators/aut1nd8PQhGcQtSxB0g4/methods"
            hints:
              allow:
              - GET
          deactivate:
            href: "https://{yourOktaDomain}/api/v1/authenticators/aut1nd8PQhGcQtSxB0g4/lifecycle/deactivate"
            hints:
              allow:
              - POST
    AuthenticatorsResponse:
      value:
      - value:
          type: email
          id: aut1nbsPHh7jNjjyP0g4
          key: okta_email
          status: ACTIVE
          name: Email
          created: 2020-07-26T21:05:23.000Z
          lastUpdated: 2020-07-28T21:45:52.000Z
          settings:
            allowedFor: any
            tokenLifetimeInMinutes: 5
          _links:
            self:
              href: "https://{yourOktaDomain}/api/v1/authenticators/aut1nbsPHh7jNjjyP0g4"
              hints:
                allow:
                - GET
                - PUT
            methods:
              href: "https://{yourOktaDomain}/api/v1/authenticators/aut1nbsPHh7jNjjyP0g4/methods"
              hints:
                allow:
                - GET
            deactivate:
              href: "https://{yourOktaDomain}/api/v1/authenticators/aut1nbsPHh7jNjjyP0g4/lifecycle/deactivate"
              hints:
                allow:
                - POST
      - value:
          type: password
          id: aut1nbtrJKKA9m45a0g4
          key: okta_password
          status: ACTIVE
          name: Password
          created: 2020-07-26T21:05:23.000Z
          lastUpdated: 2020-07-26T21:05:23.000Z
          _links:
            self:
              href: "https://{yourOktaDomain}/api/v1/authenticators/aut1nbtrJKKA9m45a0g4"
              hints:
                allow:
                - GET
                - PUT
            methods:
              href: "https://{yourOktaDomain}/api/v1/authenticators/aut1nbtrJKKA9m45a0g4/methods"
              hints:
                allow:
                - GET
      - value:
          type: phone
          id: aut1nbuyD8m1ckAYc0g4
          key: phone_number
          status: INACTIVE
          name: Phone
          created: 2020-07-26T21:05:23.000Z
          lastUpdated: 2020-07-29T00:21:29.000Z
          settings:
            allowedFor: none
          _links:
            self:
              href: "https://{yourOktaDomain}/api/v1/authenticators/aut1nbuyD8m1ckAYc0g4"
              hints:
                allow:
                - GET
                - PUT
            methods:
              href: "https://{yourOktaDomain}/api/v1/authenticators/aut1nbuyD8m1ckAYc0g4/methods"
              hints:
                allow:
                - GET
            activate:
              href: "https://{yourOktaDomain}/api/v1/authenticators/aut1nbuyD8m1ckAYc0g4/lifecycle/activate"
              hints:
                allow:
                - POST
      - value:
          type: security_key
          id: aut1nd8PQhGcQtSxB0g4
          key: webauthn
          status: ACTIVE
          name: Security Key or Biometric
          created: 2020-07-26T21:16:37.000Z
          lastUpdated: 2020-07-27T18:59:30.000Z
          _links:
            self:
              href: "https://{yourOktaDomain}/api/v1/authenticators/aut1nd8PQhGcQtSxB0g4"
              hints:
                allow:
                - GET
                - PUT
            methods:
              href: "https://{yourOktaDomain}/api/v1/authenticators/aut1nd8PQhGcQtSxB0g4/methods"
              hints:
                allow:
                - GET
            deactivate:
              href: "https://{yourOktaDomain}/api/v1/authenticators/aut1nd8PQhGcQtSxB0g4/lifecycle/deactivate"
              hints:
                allow:
                - POST
    BehaviorRuleRequest:
      value:
        name: My Behavior Rule
        type: VELOCITY
    BehaviorRuleResponse:
      value:
        id: abcd1234
        name: My Behavior Rule
        type: VELOCITY
        settings:
          velocityKph: 805
        status: ACTIVE
        created: 2021-11-09T20:38:10.000Z
        lastUpdated: 2021-11-11T20:38:10.000Z
        _link:
          self:
            href: https://your-subdomain.okta.com/api/v1/behaviors/abcd1234
            hints:
              allow:
              - GET
              - POST
              - PUT
              - DELETE
    CAPTCHAInstanceRequestHCaptcha:
      value:
        name: myHCaptcha
        secretKey: xxxxxxxxxxx
        siteKey: xxxxxxxxxxx
        type: HCAPTCHA
    CAPTCHAInstanceRequestReCaptcha:
      value:
        name: myReCaptcha
        secretKey: xxxxxxxxxxx
        siteKey: yyyyyyyyyyyyyyy
        type: RECAPTCHA_V2
    CAPTCHAInstanceResponseHCaptcha:
      value:
        id: abcd1234
        name: myHCaptcha
        siteKey: xxxxxxxxxxx
        type: HCAPTCHA
        _links:
          self:
            href: https://your-subdomain.okta.com/api/v1/captchas/abcd1234
            hints:
              allow:
              - GET
              - POST
              - PUT
              - DELETE
    CAPTCHAInstanceResponseReCaptcha:
      value:
        id: abcd4567
        name: myReCaptcha
        siteKey: yyyyyyyyyyyyyyy
        type: RECAPTCHA_V2
        _links:
          self:
            href: https://your-subdomain.okta.com/api/v1/captchas/abcd4567
            hints:
              allow:
              - GET
              - POST
              - PUT
              - DELETE
    CreateBrandDomainRequest:
      value:
        domainId: OcD11vyscTlIkpC7i0g4
    CreateBrandRequest:
      value:
        name: My Awesome Brand
    CreateBrandResponse:
      value:
        id: bnd114iNkrcN6aR680g5
        removePoweredByOkta: false
        customPrivacyPolicyUrl: null
        name: My Awesome Brand
        isDefault: false
        _links:
          self:
            href: "https://{yourOktaDomain}/api/v1/brands/bnd114iNkrcN6aR680g5"
            hints:
              allow:
              - GET
              - PUT
              - DELETE
          themes:
            href: "https://{yourOktaDomain}/api/v1/brands/bnd114iNkrcN6aR680g5/themes"
            hints:
              allow:
              - GET
    CreateUpdateEmailCustomizationRequest:
      value:
        language: fr
        subject: "Bienvenue dans ${org.name}!"
        body: "<!DOCTYPE html><html><body><p>Bonjour ${user.profile.firstName}. <a\
          \ href=\"${activationLink}\">Activer le compte</a></p></body></html>"
        isDefault: false
    CreateUpdateEmailCustomizationResponse:
      value:
        language: fr
        subject: "Bienvenue dans ${org.name}!"
        body: "<!DOCTYPE html><html><body><p>Bonjour ${user.profile.firstName}. <a\
          \ href=\"${activationLink}\">Activer le compte</a></p></body></html>"
        isDefault: false
        id: oel11u6DqUiMbQkpl0g4
        created: 2021-11-09T20:38:10.000Z
        lastUpdated: 2021-11-11T20:38:10.000Z
        _links:
          self:
            href: "https://{yourOktaDomain}/api/v1/brands/{brandId}/templates/email/UserActivation/customizations/oel11u6DqUiMbQkpl0g4"
            hints:
              allow:
              - GET
              - PUT
              - DELETE
          template:
            href: "https://{yourOktaDomain}/api/v1/brands/{brandId}/templates/email/UserActivation"
            hints:
              allow:
              - GET
          preview:
            href: "https://{yourOktaDomain}/api/v1/brands/{brandId}/templates/email/UserActivation/customizations/oel11u6DqUiMbQkpl0g4/preview"
            hints:
              allow:
              - GET
          test:
            href: "https://{yourOktaDomain}/api/v1/brands/{brandId}/templates/email/UserActivation/test"
            hints:
              allow:
              - POST
    DeviceAssuranceAndroidRequest:
      value:
        name: Device Assurance Android
        osVersion:
          minimum: 12.4.5
        diskEncryptionType:
          include:
          - USER
          - FULL
        jailbreak: false
        platform: ANDROID
        screenLockType:
          include:
          - BIOMETRIC
        secureHardwarePresent: true
    DeviceAssuranceIosRequest:
      value:
        name: Device Assurance IOS
        osVersion:
          minimum: 12.4.5
        jailbreak: false
        platform: IOS
        screenLockType:
          include:
          - BIOMETRIC
    DeviceAssuranceMacOSRequest:
      value:
        name: Device Assurance macOS
        osVersion:
          minimum: 12.4.5
        diskEncryptionType:
          include:
          - ALL_INTERNAL_VOLUMES
        platform: MACOS
        screenLockType:
          include:
          - PASSCODE
          - BIOMETRIC
        secureHardwarePresent: true
    DeviceAssuranceResponse:
      value:
        id: dae3m8o4rWhwReDeM1c5
        name: Device Assurance Example
        lastUpdate: 2022-01-01T00:00:00.000Z
        createdUpdate: 2022-01-01T00:00:00.000Z
        lastUpdatedBy: 00u217pyf72CdUrBt1c5
        createdBy: 00u217pyf72CdUrBt1c5
        osVersion:
          minimum: 12.4.5.9
        diskEncryptionType:
          include:
          - ALL_INTERNAL_VOLUMES
        platform: WINDOWS
        screenLockType:
          include:
          - PASSCODE
          - BIOMETRIC
        secureHardwarePresent: true
        _links:
          self:
            href: https://your-subdomain.okta.com/api/v1/device-assurances/dae3m8o4rWhwReDeM1c5
            hints:
              allow:
              - DELETE
              - GET
              - PUT
    DeviceAssuranceWindowsRequest:
      value:
        name: Device Assurance Windows
        osVersion:
          minimum: 12.4.5.9
        diskEncryptionType:
          include:
          - ALL_INTERNAL_VOLUMES
        platform: WINDOWS
        screenLockType:
          include:
          - PASSCODE
          - BIOMETRIC
        secureHardwarePresent: true
    DeviceResponse:
      value:
        id: guo8jx5vVoxfvJeLb0w4
        status: ACTIVE
        created: 2020-11-03T21:47:01.000Z
        lastUpdated: 2020-11-03T23:46:27.000Z
        profile:
          displayName: DESKTOP-EHAD3IE
          platform: WINDOWS
          manufacturer: International Corp
          model: "VMware7,1"
          osVersion: 10.0.18362
          serialNumber: 56 4d 4f 95 74 c5 d3 e7-fc 3a 57 9c c2 f8 5d ce
          udid: 954F4D56-C574-E7D3-FC3A-579CC2F85DCE
          sid: S-1-5-21-3992267483-1860856704-2413701314-500
          registered: true
          secureHardwarePresent: false
        resourceId: guo8jx5vVoxfvJeLb0w4
        resourceDisplayName:
          value: DESKTOP-EHAD3IE
          sensitive: false
        resourceType: UDDevice
        resourceAlternateId: null
        _links:
          suspend:
            href: "https://{yourOktaDomain}/api/v1/devices/guo8jx5vVoxfvJeLb0w4/lifecycle/suspend"
            hints:
              allow:
              - POST
          self:
            href: "https://{yourOktaDomain}/api/v1/devices/guo8jx5vVoxfvJeLb0w4"
            hints:
              allow:
              - GET
              - PATCH
              - PUT
          users:
            href: "https://{yourOktaDomain}/api/v1/devices/guo8jx5vVoxfvJeLb0w4/users"
            hints:
              allow:
              - GET
          deactivate:
            href: "https://{yourOktaDomain}/api/v1/devices/guo8jx5vVoxfvJeLb0w4/lifecycle/deactivate"
            hints:
              allow:
              - POST
    EmailCustomizationResponse:
      value:
        language: en
        isDefault: true
        subject: "Welcome to ${org.name}!"
        body: "<!DOCTYPE html><html><body><p>Hello, ${user.profile.firstName}. Click\
          \ <a href=\"${activationLink}\">here</a> to activate your account.</body></html>"
        id: oel11u6DqUiMbQkpl0g4
        created: 2021-11-09T20:38:10.000Z
        lastUpdated: 2021-11-11T20:38:10.000Z
        _links:
          self:
            href: "https://{yourOktaDomain}/api/v1/brands/{brandId}/templates/email/UserActivation/customizations/oel11u6DqUiMbQkpl0g4"
            hints:
              allow:
              - GET
              - PUT
              - DELETE
          template:
            href: "https://{yourOktaDomain}/api/v1/brands/{brandId}/templates/email/UserActivation"
            hints:
              allow:
              - GET
          preview:
            href: "https://{yourOktaDomain}/api/v1/brands/{brandId}/templates/email/UserActivation/customizations/oel11u6DqUiMbQkpl0g4/preview"
            hints:
              allow:
              - GET
          test:
            href: "https://{yourOktaDomain}/api/v1/brands/{brandId}/templates/email/UserActivation/test"
            hints:
              allow:
              - POST
    EmailSettingsResponse:
      value:
        recipients: ALL_USERS
        _links:
          self:
            href: "https://{yourOktaDomain}/api/v1/brands/{brandId}/templates/email/UserActivation/settings"
            hints:
              allow:
              - GET
              - PUT
          template:
            href: "https://{yourOktaDomain}/api/v1/brands/{brandId}/templates/email/UserActivation"
            hints:
              allow:
              - GET
    EmailTemplateDefaultContentResponse:
      value:
        subject: "Welcome to ${org.name}!"
        body: "<!DOCTYPE html><html><body><p>Hello, ${user.profile.firstName}. Click\
          \ <a href=\"${activationLink}\">here</a> to activate your account.</body></html>"
        _links:
          self:
            href: "https://{yourOktaDomain}/api/v1/brands/{brandId}/templates/email/UserActivation/default-content"
            hints:
              allow:
              - GET
          template:
            href: "https://{yourOktaDomain}/api/v1/brands/{brandId}/templates/email/UserActivation"
            hints:
              allow:
              - GET
          preview:
            href: "https://{yourOktaDomain}/api/v1/brands/{brandId}/templates/email/UserActivation/default-content/preview"
            hints:
              allow:
              - GET
    ErrorAccessDenied:
      value:
        errorCode: E0000006
        errorSummary: You do not have permission to perform the requested action
        errorLink: E0000006
        errorId: sampleNUSD_8fdkFd8fs8SDBK
        errorCauses: []
    ErrorApiValidationFailed:
      value:
        errorCode: E0000001
        errorSummary: "Api validation failed: {0}"
        errorLink: E0000001
        errorId: sampleiCF-8D5rLW6myqiPItW
        errorCauses: []
    ErrorCAPTCHALimitOfOne:
      value:
        errorCode: E0000165
        errorSummary: CAPTCHA count limit reached. At most one CAPTCHA instance is
          allowed per Org.
        errorLink: E0000165
        errorId: oaejrB1fWL1S7mc-2KcG-SOtw
        errorCauses: []
    ErrorCAPTCHAOrgWideSetting:
      value:
        errorCode: E0000149
        errorSummary: "Current CAPTCHA is associated with org-wide settings, cannot\
          \ be removed."
        errorLink: E0000149
        errorId: samplezsusshPdiTWiITwqBt8
        errorCauses: []
    ErrorCreateUserWithExpiredPasswordWithNullPassword:
      value:
        errorCode: E0000124
        errorSummary: "Could not create user. To create a user and expire their password\
          \ immediately, a password must be specified"
        errorLink: E0000124
        errorId: oaeXxuZgXBySvqi1FvtkwoYCA
        errorCauses:
        - errorSummary: "Could not create user. To create a user and expire their\
            \ password immediately, a password must be specified"
    ErrorCreateUserWithExpiredPasswordWithoutActivation:
      value:
        errorCode: E0000125
        errorSummary: "Could not create user. To create a user and expire their password\
          \ immediately, \"activate\" must be true"
        errorLink: E0000125
        errorId: oaeDd77L9R-TJaD7j_rXsQ31w
        errorCauses:
        - errorSummary: "Could not create user. To create a user and expire their\
            \ password immediately, \"activate\" must be true"
    ErrorCreateUserWithTooManyManyGroupsResponse:
      value:
        errorCode: E0000093
        errorSummary: Target count limit exceeded
        errorLink: E0000093
        errorId: oaePVSLIYnIQsC0B-ptBIllVA
        errorCauses:
        - errorSummary: The number of group targets is too large.
    ErrorDeleteBrandAssociatedWithDomain:
      value:
        errorCode: E0000201
        errorSummary: A brand associated with a domain cannot be deleted
        errorLink: E0000201
        errorId: oaeAdRqprFuTyKokyYPbURJkA
        errorCauses: []
    ErrorDeleteDefaultBrand:
      value:
        errorCode: E0000200
        errorSummary: A default brand cannot be deleted
        errorLink: E0000200
        errorId: oaeAdRqprFuTyKokyYPbURJkA
        errorCauses: []
    ErrorDeviceAssuranceInUse:
      value:
        errorSummary: Device assurance is in use and cannot be deleted.
        errorId: oaenwA1ra80S9W-pvbh4m6haA
        errorCauses: []
    ErrorEmailCustomizationCannotClearDefault:
      value:
        errorCode: E0000185
        errorSummary: The isDefault parameter of the default email template customization
          can't be set to false.
        errorLink: E0000185
        errorId: oaejrB1fWL1S7mc-2KcG-SOtw
        errorCauses: []
    ErrorEmailCustomizationCannotDeleteDefault:
      value:
        errorCode: E0000184
        errorSummary: A default email template customization can't be deleted.
        errorLink: E0000184
        errorId: oaeAdRqprFuTyKokyYPbURJkA
        errorCauses: []
    ErrorEmailCustomizationDefaultAlreadyExists:
      value:
        errorCode: E0000182
        errorSummary: A default email template customization already exists.
        errorLink: E0000182
        errorId: oaeXYwTiMvASsC3O4HCzjFaCA
        errorCauses: []
    ErrorEmailCustomizationLanguageAlreadyExists:
      value:
        errorCode: E0000183
        errorSummary: An email template customization for that language already exists.
        errorLink: E0000183
        errorId: oaeUcGELffqRay0u1OPdnPypw
        errorCauses: []
    ErrorInvalidEmailTemplateRecipients:
      value:
        errorCode: E0000189
        errorSummary: This template does not support the recipients value.
        errorLink: E0000189
        errorId: oae8L1-UkcNTeGi5xVQ28_lww
        errorCauses: []
    ErrorLinkDefaultBrand:
      value:
        errorCode: E0000203
        errorSummary: Failed to associate this domain with the given brandId
        errorLink: E0000203
        errorId: oaeAdRqprFuTyKokyYPbURJkA
        errorCauses:
        - errorSummary: The default brand cannot be mapped to a domain
    ErrorPushProviderUsedByCustomAppAuthenticator:
      value:
        errorCode: E0000187
        errorSummary: Cannot delete push provider because it is being used by a custom
          app authenticator.
        errorLink: E0000187
        errorId: oaenwA1ra80S9W-pvbh4m6haA
        errorCauses: []
    ErrorResourceNotFound:
      value:
        errorCode: E0000007
        errorSummary: "Not found: {0}"
        errorLink: E0000007
        errorId: sampleMlLvGUj_YD5v16vkYWY
        errorCauses: []
    ErrorTooManyRequests:
      value:
        errorCode: E0000047
        errorSummary: You exceeded the maximum number of requests. Try again in a
          while.
        errorLink: E0000047
        errorId: sampleQPivGUj_ND5v78vbYWW
        errorCauses: []
    GetBrandResponse:
      value:
        id: bnd114iNkrcN6aR680g4
        removePoweredByOkta: false
        customPrivacyPolicyUrl: null
        name: Okta Default
        isDefault: true
        _links:
          self:
            href: "https://{yourOktaDomain}/api/v1/brands/bnd114iNkrcN6aR680g4"
            hints:
              allow:
              - GET
              - PUT
              - DELETE
          themes:
            href: "https://{yourOktaDomain}/api/v1/brands/bnd114iNkrcN6aR680g4/themes"
            hints:
              allow:
              - GET
    GetEmailTemplateResponse:
      value:
        name: UserActivation
        _links:
          self:
            href: "https://{yourOktaDomain}/api/v1/brands/{brandId}/templates/email/UserActivation"
            hints:
              allow:
              - GET
          settings:
            href: "https://{yourOktaDomain}/api/v1/brands/{brandId}/templates/email/UserActivation/settings"
            hints:
              allow:
              - GET
              - PUT
          defaultContent:
            href: "https://{yourOktaDomain}/api/v1/brands/{brandId}/templates/email/UserActivation/default-content"
            hints:
              allow:
              - GET
          customizations:
            href: "https://{yourOktaDomain}/api/v1/brands/{brandId}/templates/email/UserActivation/customizations"
            hints:
              allow:
              - GET
              - POST
              - DELETE
          test:
            href: "https://{yourOktaDomain}/api/v1/brands/{brandId}/templates/email/UserActivation/test"
            hints:
              allow:
              - POST
    GroupSchemaAddRequest:
      value:
        definitions:
          custom:
            id: '#custom'
            type: object
            properties:
              groupContact:
                title: Group administrative contact
                description: Group administrative contact
                type: string
                required: false
                minLength: 1
                maxLength: 20
                permissions:
                - principal: SELF
                  action: READ_WRITE
            required: []
    GroupSchemaResponse:
      value:
        $schema: http://json-schema.org/draft-04/schema#
        _links:
          self:
            href: "https://{yourOktaDomain}/api/v1/meta/schemas/group/default"
            method: GET
            rel: self
        created: 2021-01-30T00:18:24.000Z
        definitions:
          base:
            id: '#base'
            properties: {}
            required:
            - name
            type: object
          custom:
            id: '#custom'
            properties:
              groupContact:
                description: Group administrative contact
                master:
                  type: PROFILE_MASTER
                mutability: READ_WRITE
                permissions:
                - action: READ_WRITE
                  principal: SELF
                scope: NONE
                title: Group administrative contact
                type: string
            required: []
            type: object
        description: Okta group profile template
        id: "https://{yourOktaDomain}/meta/schemas/group/default"
        lastUpdated: 2021-02-25T23:05:31.000Z
        name: group
        properties:
          profile:
            allOf:
            - $ref: '#/definitions/custom'
            - $ref: '#/definitions/base'
        title: Okta group
        type: object
    LinkBrandDomain:
      value:
        domainId: OcD11vyscTlIkpC7i0g4
        _links:
          self:
            href: "https://{yourOktaDomain}/api/v1/brands/bnd114iNkrcN6aR680g4/domains/OcD11vyscTlIkpC7i0g4"
            hints:
              allow:
              - PUT
              - DELETE
          brand:
            href: "https://{yourOktaDomain}/api/v1/brands/bnd114iNkrcN6aR680g4"
            hints:
              allow:
              - GET
              - PUT
              - DELETE
          domain:
            href: "https://{yourOktaDomain}/api/v1/domains/OcD11vyscTlIkpC7i0g4"
            hints:
              allow:
              - GET
              - PUT
              - DELETE
    ListBrandsResponse:
      value:
      - id: bnd114iNkrcN6aR680g4
        name: Okta Default
        isDefault: true
        removePoweredByOkta: false
        customPrivacyPolicyUrl: null
        _links:
          self:
            href: "https://{yourOktaDomain}/api/v1/brands/bnd114iNkrcN6aR680g4"
            hints:
              allow:
              - GET
              - PUT
              - DELETE
          themes:
            href: "https://{yourOktaDomain}/api/v1/brands/bnd114iNkrcN6aR680g4/themes"
            hints:
              allow:
              - GET
    ListEmailCustomizationResponse:
      value:
      - language: en
        isDefault: true
        subject: "Welcome to ${org.name}!"
        body: "<!DOCTYPE html><html><body><p>Hello, ${user.profile.firstName}. Click\
          \ <a href=\"${activationLink}\">here</a> to activate your account.</body></html>"
        id: oel11u6DqUiMbQkpl0g4
        created: 2021-11-09T20:38:10.000Z
        lastUpdated: 2021-11-11T20:38:10.000Z
        _links:
          self:
            href: "https://{yourOktaDomain}/api/v1/brands/{brandId}/templates/email/UserActivation/customizations/oel11u6DqUiMbQkpl0g4"
            hints:
              allow:
              - GET
              - PUT
              - DELETE
          template:
            href: "https://{yourOktaDomain}/api/v1/brands/{brandId}/templates/email/UserActivation"
            hints:
              allow:
              - GET
          preview:
            href: "https://{yourOktaDomain}/api/v1/brands/{brandId}/templates/email/UserActivation/customizations/oel11u6DqUiMbQkpl0g4/preview"
            hints:
              allow:
              - GET
          test:
            href: "https://{yourOktaDomain}/api/v1/brands/{brandId}/templates/email/UserActivation/test"
            hints:
              allow:
              - POST
    ListEmailTemplateResponse:
      value:
      - name: UserActivation
        _links:
          self:
            href: "https://{yourOktaDomain}/api/v1/brands/{brandId}/templates/email/UserActivation"
            hints:
              allow:
              - GET
          settings:
            href: "https://{yourOktaDomain}/api/v1/brands/{brandId}/templates/email/UserActivation/settings"
            hints:
              allow:
              - GET
              - PUT
          defaultContent:
            href: "https://{yourOktaDomain}/api/v1/brands/{brandId}/templates/email/UserActivation/default-content"
            hints:
              allow:
              - GET
          customizations:
            href: "https://{yourOktaDomain}/api/v1/brands/{brandId}/templates/email/UserActivation/customizations"
            hints:
              allow:
              - GET
              - POST
              - DELETE
          test:
            href: "https://{yourOktaDomain}/api/v1/brands/{brandId}/templates/email/UserActivation/test"
            hints:
              allow:
              - POST
    ListSessionsResponse:
      value:
      - id: uij4ri8ZLk0ywyqxB0g4
        identitySourceId: 0oa3l6l6WK6h0R0QW0g4
        status: CREATED
        importType: INCREMENTAL
    ListUserBlocksAnyDevicesResponse:
      value:
      - type: DEVICE_BASED
        appliesTo: ANY_DEVICES
    ListUserBlocksUnknownDevicesResponse:
      value:
      - type: DEVICE_BASED
        appliesTo: UNKNOWN_DEVICES
    ListUsersResponse:
      value:
      - id: 00u118oQYT4TBGuay0g4
        status: ACTIVE
        created: 2022-04-04T15:56:05.000Z
        activated: null
        statusChanged: null
        lastLogin: 2022-05-04T19:50:52.000Z
        lastUpdated: 2022-05-05T18:15:44.000Z
        passwordChanged: 2022-04-04T16:00:22.000Z
        type:
          id: oty1162QAr8hJjTaq0g4
        profile:
          firstName: Alice
          lastName: Smith
          mobilePhone: null
          secondEmail: null
          login: alice.smith@example.com
          email: alice.smith@example.com
        credentials:
          password: {}
          provider:
            type: OKTA
            name: OKTA
        _links:
          self:
            href: http://your-subdomain.okta.com/api/v1/users/00u118oQYT4TBGuay0g4
    LogStreamRequest:
      value:
        type: aws_eventbridge
        name: Example AWS EventBridge
        settings:
          eventSourceName: your-event-source-name
          accountId: "123456789012"
          region: us-east-2
    LogStreamResponse:
      value:
        id: 0oa1orqUGCIoCGNxf0g4
        type: aws_eventbridge
        name: Example AWS EventBridge
        lastUpdated: 2021-10-21T16:55:30.000Z
        created: 2021-10-21T16:55:29.000Z
        status: ACTIVE
        settings:
          accountId: "123456789012"
          eventSourceName: your-event-source-name
          region: us-east-2
        _links:
          self:
            href: "http://{yourOktaDomain}/api/v1/logStreams/0oa1orqUGCIoCGNxf0g4"
            method: GET
          deactivate:
            href: "http://{yourOktaDomain}/api/v1/logStreams/0oa1orqUGCIoCGNxf0g4/lifecycle/deactivate"
            method: POST
    LogStreamSchemaAws:
      value:
        $schema: https://json-schema.org/draft/2020-12/schema
        $id: "http://{yourOktaDomain}/api/v1/meta/schemas/logStream/aws_eventbridge"
        title: AWS EventBridge
        type: object
        properties:
          settings:
            description: Configuration properties specific to AWS EventBridge
            type: object
            properties:
              accountId:
                title: AWS Account ID
                description: Your Amazon AWS Account ID.
                type: string
                writeOnce: true
                pattern: "^\\d{12}$"
              eventSourceName:
                title: AWS Event Source Name
                description: An alphanumeric name (no spaces) to identify this event
                  source in AWS EventBridge.
                type: string
                writeOnce: true
                pattern: "^[\\.\\-_A-Za-z0-9]{1,75}$"
              region:
                title: AWS Region
                description: The destination AWS region for your system log events.
                type: string
                writeOnce: true
                oneOf:
                - title: US East (Ohio)
                  const: us-east-2
                - title: US East (N. Virginia)
                  const: us-east-1
                - title: US West (N. California)
                  const: us-west-1
                - title: US West (Oregon)
                  const: us-west-2
                - title: Canada (Central)
                  const: ca-central-1
                - title: Europe (Frankfurt)
                  const: eu-central-1
                - title: Europe (Ireland)
                  const: eu-west-1
                - title: Europe (London)
                  const: eu-west-2
                - title: Europe (Paris)
                  const: eu-west-3
                - title: Europe (Milan)
                  const: eu-south-1
                - title: Europe (Stockholm)
                  const: eu-north-1
            required:
            - eventSourceName
            - accountId
            - region
            errorMessage:
              properties:
                accountId: Account number must be 12 digits.
                eventSourceName: "Event source name can use numbers, letters, the\
                  \ symbols \".\", \"-\" or \"_\". It must use fewer than 76 characters."
          name:
            title: Name
            description: A name for this log stream in Okta
            type: string
            writeOnce: false
            pattern: "^.{1,100}$"
        required:
        - name
        - settings
        errorMessage:
          properties:
            name: Name can't exceed 100 characters.
    LogStreamSchemaList:
      value:
      - $schema: https://json-schema.org/draft/2020-12/schema
        $id: "http://{yourOktaDomain}/api/v1/meta/schemas/logStream/aws_eventbridge"
        title: AWS EventBridge
        type: object
        properties:
          settings:
            description: Configuration properties specific to AWS EventBridge
            type: object
            properties:
              accountId:
                title: AWS Account ID
                description: Your Amazon AWS Account ID.
                type: string
                writeOnce: true
                pattern: "^\\d{12}$"
              eventSourceName:
                title: AWS Event Source Name
                description: An alphanumeric name (no spaces) to identify this event
                  source in AWS EventBridge.
                type: string
                writeOnce: true
                pattern: "^[\\.\\-_A-Za-z0-9]{1,75}$"
              region:
                title: AWS Region
                description: The destination AWS region for your system log events.
                type: string
                writeOnce: true
                oneOf:
                - title: US East (Ohio)
                  const: us-east-2
                - title: US East (N. Virginia)
                  const: us-east-1
                - title: US West (N. California)
                  const: us-west-1
                - title: US West (Oregon)
                  const: us-west-2
                - title: Canada (Central)
                  const: ca-central-1
                - title: Europe (Frankfurt)
                  const: eu-central-1
                - title: Europe (Ireland)
                  const: eu-west-1
                - title: Europe (London)
                  const: eu-west-2
                - title: Europe (Paris)
                  const: eu-west-3
                - title: Europe (Milan)
                  const: eu-south-1
                - title: Europe (Stockholm)
                  const: eu-north-1
            required:
            - eventSourceName
            - accountId
            - region
            errorMessage:
              properties:
                accountId: Account number must be 12 digits.
                eventSourceName: "Event source name can use numbers, letters, the\
                  \ symbols \".\", \"-\" or \"_\". It must use fewer than 76 characters."
          name:
            title: Name
            description: A name for this log stream in Okta
            type: string
            writeOnce: false
            pattern: "^.{1,100}$"
        required:
        - name
        - settings
        errorMessage:
          properties:
            name: Name can't exceed 100 characters.
      - $schema: https://json-schema.org/draft/2020-12/schema
        $id: "http://{yourOktaDomain}/api/v1/meta/schemas/logStream/splunk_cloud_logstreaming"
        title: Splunk Cloud
        type: object
        properties:
          settings:
            description: Configuration properties specific to Splunk Cloud
            type: object
            properties:
              host:
                title: Host
                description: "The domain for your Splunk Cloud instance without http\
                  \ or https. For example: acme.splunkcloud.com"
                type: string
                writeOnce: false
                pattern: "^([a-z0-9]+(-[a-z0-9]+)*){1,100}\\.splunkcloud(gc|fed)?\\\
                  .com$"
              token:
                title: HEC Token
                description: The token from your Splunk Cloud HTTP Event Collector
                  (HEC).
                type: string
                writeOnce: false
                pattern: "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
            required:
            - host
            - token
            errorMessage:
              properties:
                host: "Host should be a domain without http or https. For example:\
                  \ acme.splunkcloud.com"
          name:
            title: Name
            description: A name for this log stream in Okta
            type: string
            writeOnce: false
            pattern: "^.{1,100}$"
        required:
        - name
        - settings
        errorMessage:
          properties:
            name: Name can't exceed 100 characters.
    LogStreamSchemaSplunk:
      value:
        $schema: https://json-schema.org/draft/2020-12/schema
        $id: "http://{yourOktaDomain}/api/v1/meta/schemas/logStream/splunk_cloud_logstreaming"
        title: Splunk Cloud
        type: object
        properties:
          settings:
            description: Configuration properties specific to Splunk Cloud
            type: object
            properties:
              host:
                title: Host
                description: "The domain for your Splunk Cloud instance without http\
                  \ or https. For example: acme.splunkcloud.com"
                type: string
                writeOnce: false
                pattern: "^([a-z0-9]+(-[a-z0-9]+)*){1,100}\\.splunkcloud(gc|fed)?\\\
                  .com$"
              token:
                title: HEC Token
                description: The token from your Splunk Cloud HTTP Event Collector
                  (HEC).
                type: string
                writeOnce: false
                pattern: "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
            required:
            - host
            - token
            errorMessage:
              properties:
                host: "Host should be a domain without http or https. For example:\
                  \ acme.splunkcloud.com"
          name:
            title: Name
            description: A name for this log stream in Okta
            type: string
            writeOnce: false
            pattern: "^.{1,100}$"
        required:
        - name
        - settings
        errorMessage:
          properties:
            name: Name can't exceed 100 characters.
    PerClientRateLimitSettingsEnforceDefault:
      value:
        defaultMode: ENFORCE
    PerClientRateLimitSettingsEnforceDefaultWithOverrides:
      value:
        defaultMode: ENFORCE
        useCaseModeOverrides:
          OAUTH2_AUTHORIZE: PREVIEW
          OIE_APP_INTENT: DISABLE
    PerClientRateLimitSettingsPreviewDefaultWithOverrides:
      value:
        defaultMode: PREVIEW
        useCaseModeOverrides:
          LOGIN_PAGE: ENFORCE
    PermissionResponse:
      value:
        label: okta.users.manage
        created: 2021-02-06T16:20:57.000Z
        lastUpdated: 2021-02-06T16:20:57.000Z
        _links:
          role:
            href: "https://{yourOktaDomain}/api/v1/iam/roles/cr0Yq6IJxGIr0ouum0g3"
          self:
            href: "https://{yourOktaDomain}/api/v1/iam/roles/cr0Yq6IJxGIr0ouum0g3/permissions/okta.users.manage"
    PermissionsResponse:
      value:
        permissions:
        - label: okta.users.create
          created: 2021-02-06T16:20:57.000Z
          lastUpdated: 2021-02-06T16:20:57.000Z
          _links:
            role:
              href: "https://{yourOktaDomain}/api/v1/iam/roles/cr0Yq6IJxGIr0ouum0g3"
            self:
              href: "https://{yourOktaDomain}/api/v1/iam/roles/cr0Yq6IJxGIr0ouum0g3/permissions/okta.users.create"
        - label: okta.users.read
          created: 2021-02-06T16:20:57.000Z
          lastUpdated: 2021-02-06T16:20:57.000Z
          _links:
            role:
              href: "https://{yourOktaDomain}/api/v1/iam/roles/cr0Yq6IJxGIr0ouum0g3"
            self:
              href: "https://{yourOktaDomain}/api/v1/iam/roles/cr0Yq6IJxGIr0ouum0g3/permissions/okta.users.read"
        - label: okta.groups.read
          created: 2021-02-06T16:20:57.000Z
          lastUpdated: 2021-02-06T16:20:57.000Z
          _links:
            role:
              href: "https://{yourOktaDomain}/api/v1/iam/roles/cr0Yq6IJxGIr0ouum0g3"
            self:
              href: "https://{yourOktaDomain}/api/v1/iam/roles/cr0Yq6IJxGIr0ouum0g3/permissions/okta.groups.read"
        - label: okta.users.userprofile.manage
          created: 2021-02-06T16:20:57.000Z
          lastUpdated: 2021-02-06T16:20:57.000Z
          _links:
            role:
              href: "https://{yourOktaDomain}/api/v1/iam/roles/cr0Yq6IJxGIr0ouum0g3"
            self:
              href: "https://{yourOktaDomain}/api/v1/iam/roles/cr0Yq6IJxGIr0ouum0g3/permissions/okta.users.userprofile.manage"
    PreviewEmailCustomizationResponse:
      value:
        subject: Welcome to Okta!
        body: "<!DOCTYPE html><html><body><p>Hello, John. Click <a href=\"https://{yourOktaDomain}/...\"\
          >here</a> to activate your account.</body></html>"
        _links:
          self:
            href: "https://{yourOktaDomain}/api/v1/brands/{brandId}/templates/email/UserActivation/customizations/oel2kk1zYJBJbeaGo0g4/preview"
            hints:
              allow:
              - GET
          template:
            href: "https://{yourOktaDomain}/api/v1/brands/{brandId}/templates/email/UserActivation"
            hints:
              allow:
              - GET
          test:
            href: "https://{yourOktaDomain}/api/v1/brands/{brandId}/templates/email/UserActivation/test"
            hints:
              allow:
              - POST
    PreviewEmailTemplateDefaultContentResponse:
      value:
        subject: Welcome to Okta!
        body: "<!DOCTYPE html><html><body><p>Hello, John. Click <a href=\"https://{yourOktaDomain}/...\"\
          >here</a> to activate your account.</body></html>"
        _links:
          self:
            href: "https://{yourOktaDomain}/api/v1/brands/{brandId}/templates/email/UserActivation/default-content/preview"
            hints:
              allow:
              - GET
          template:
            href: "https://{yourOktaDomain}/api/v1/brands/{brandId}/templates/email/UserActivation"
            hints:
              allow:
              - GET
          defaultContent:
            href: "https://{yourOktaDomain}/api/v1/brands/{brandId}/templates/email/UserActivation/test/default-content"
            hints:
              allow:
              - POST
    PrincipalRateLimitEntityRequestEmptyPercentages:
      value:
        principalId: token1234
        principalType: SSWS_TOKEN
    PrincipalRateLimitEntityRequestSSWSToken:
      value:
        principalId: token1234
        principalType: SSWS_TOKEN
        defaultPercentage: 50
        defaultConcurrencyPercentage: 75
    PrincipalRateLimitEntityResponseSSWSToken:
      value:
        id: abcd1234
        orgId: org1234
        principalId: token1234
        principalType: SSWS_TOKEN
        defaultPercentage: 50
        defaultConcurrencyPercentage: 75
        createdDate: 2022-05-19T20:05:32.720Z
        createdBy: user1234
        lastUpdate: 2022-05-20T21:13:07.410Z
        lastUpdatedBy: user4321
    PushProviderAPNsRequest:
      value:
        name: APNs Example
        providerType: APNS
        configuration:
          keyId: KEY_ID
          teamId: TEAM_ID
          tokenSigningKey: '-----BEGIN PRIVATE KEY-----\nPRIVATE_KEY\n-----END PRIVATE
            KEY-----\n'
          fileName: fileName.p8
    PushProviderAPNsResponse:
      value:
        id: ppctekcmngGaqeiBxB0g4
        name: APNs Example
        providerType: APNS
        lastUpdatedDate: 2022-01-01T00:00:00.000Z
        configuration:
          keyId: KEY_ID
          teamId: TEAM_ID
          fileName: fileName.p8
        _links:
          self:
            href: https://your-subdomain.okta.com/api/v1/push-providers/ppctekcmngGaqeiBxB0g4
            hints:
              allow:
              - DELETE
              - GET
              - PUT
    PushProviderFCMRequest:
      value:
        name: FCM Example
        providerType: FCM
        configuration:
          serviceAccountJson:
            type: service_account
            project_id: PROJECT_ID
            private_key_id: KEY_ID
            private_key: '-----BEGIN PRIVATE KEY-----\nPRIVATE_KEY\n-----END PRIVATE
              KEY-----\n'
            client_email: SERVICE_ACCOUNT_EMAIL
            client_id: CLIENT_ID
            auth_uri: https://accounts.google.com/o/oauth2/auth
            token_uri: https://accounts.google.com/o/oauth2/token
            auth_provider_x509_cert_url: https://www.googleapis.com/oauth2/v1/certs
            client_x509_cert_url: https://www.googleapis.com/robot/v1/metadata/x509/SERVICE_ACCOUNT_EMAIL
          fileName: fileName.json
    PushProviderFCMResponse:
      value:
        id: ppctekcmngGaqeiBxB0g4
        name: FCM Example
        providerType: FCM
        lastUpdatedDate: 2022-01-01T00:00:00.000Z
        configuration:
          projectId: PROJECT_ID
          fileName: fileName.p8
        _links:
          self:
            href: https://your-subdomain.okta.com/api/v1/push-providers/ppctekcmngGaqeiBxB0g4
            hints:
              allow:
              - DELETE
              - GET
              - PUT
    RateLimitAdminNotificationsDisabled:
      value:
        notificationsEnabled: false
    RateLimitAdminNotificationsEnabled:
      value:
        notificationsEnabled: true
    ResourceSetBindingAddMembersRequestExample:
      value:
        additions:
        - "https://{yourOktaDomain}/api/v1/groups/00guaxWZ0AOa5NFAj0g3"
        - "https://{yourOktaDomain}/api/v1/users/00u67DU2qNCjNZYO0g3"
    ResourceSetBindingCreateRequestExample:
      value:
        role: cr0Yq6IJxGIr0ouum0g3
        members:
        - "https://{yourOktaDomain}/api/v1/groups/00guaxWZ0AOa5NFAj0g3"
    ResourceSetBindingMemberResponse:
      value:
        id: irb1qe6PGuMc7Oh8N0g4
        created: 2021-02-06T16:20:57.000Z
        lastUpdated: 2021-02-06T16:20:57.000Z
        _links:
          self:
            href: "https://{yourOktaDomain}/api/v1/users/00uuk41Hjga5qGfQ30g3"
    ResourceSetBindingMembersResponse:
      value:
        members:
        - id: irb1qe6PGuMc7Oh8N0g4
          created: 2021-02-06T16:20:57.000Z
          lastUpdated: 2021-02-06T16:20:57.000Z
          _links:
            self:
              href: "https://{yourOktaDomain}/api/v1/users/00uuk41Hjga5qGfQ30g3"
        - id: irb1q92TFAHzySt3x0g4
          created: 2021-02-06T16:20:57.000Z
          lastUpdated: 2021-02-06T16:20:57.000Z
          _links:
            self:
              href: "https://{yourOktaDomain}/api/v1/groups/00guaxWZ0AOa5NFAj0g3"
        _links:
          binding:
            href: "https://{yourOktaDomain}/api/v1/iam/resource-sets/iamoJDFKaJxGIr0oamd9g/bindings/cr0Yq6IJxGIr0ouum0g3"
          next:
            href: "https://{yourOktaDomain}/api/v1/iam/resource-sets/iamoJDFKaJxGIr0oamd9g/bindings/cr0Yq6IJxGIr0ouum0g3/members?after=0ouRq6IJmGIr3ouum0g3"
    ResourceSetBindingResponseExample:
      value:
        _links:
          self:
            href: "https://{yourOktaDomain}/api/v1/iam/resource-sets/iamoJDFKaJxGIr0oamd9g/bindings/cr0Yq6IJxGIr0ouum0g3"
          bindings:
            href: "https://{yourOktaDomain}/api/v1/iam/resource-sets/iamoJDFKaJxGIr0oamd9g/bindings"
          resource-set:
            href: "https://{yourOktaDomain}/api/v1/iam/resource-sets/iamoJDFKaJxGIr0oamd9g"
    ResourceSetBindingResponseWithIdExample:
      value:
        id: cr0Yq6IJxGIr0ouum0g3
        _links:
          self:
            href: "https://{yourOktaDomain}/api/v1/iam/resource-sets/iamoJDFKaJxGIr0oamd9g/bindings/cr0Yq6IJxGIr0ouum0g3"
          bindings:
            href: "https://{yourOktaDomain}/api/v1/iam/resource-sets/iamoJDFKaJxGIr0oamd9g/bindings"
          resource-set:
            href: "https://{yourOktaDomain}/api/v1/iam/resource-sets/iamoJDFKaJxGIr0oamd9g"
    ResourceSetBindingsResponse:
      value:
        roles:
        - id: cr0WxyzJxGIr0ouum0g4
          _links:
            self:
              href: "https://{yourOktaDomain}/api/v1/iam/roles/cr0WxyzJxGIr0ouum0g4"
            members:
              href: "https://{yourOktaDomain}/api/v1/iam/resource-sets/iamoJDFKaJxGIr0oamd9g/bindings/cr0WxyzJxGIr0ouum0g4/members"
        _links:
          self:
            href: "https://{yourOktaDomain}/api/v1/iam/resource-sets/iamoJDFKaJxGIr0oamd9g/bindings"
          resource-set:
            href: "https://{yourOktaDomain}/api/v1/iam/resource-sets/iamoJDFKaJxGIr0oamd9g"
          next:
            href: "https://{yourOktaDomain}/api/v1/iam/resource-sets/iamoJDFKaJxGIr0oamd9g/bindings?after=cr0WxyzJxGIr0ouum0g4"
    ResourceSetRequest:
      value:
        label: SF-IT-People
        description: People in the IT department of San Francisco
        resources:
        - "https://{yourOktaDomain}/api/v1/groups/00guaxWZ0AOa5NFAj0g3"
        - "https://{yourOktaDomain}/api/v1/groups/00gu67DU2qNCjNZYO0g3/users"
        - "https://{yourOktaDomain}/api/v1/users"
    ResourceSetResourcePatchRequestExample:
      value:
        additions:
        - "https://{yourOktaDomain}/api/v1/groups/00guaxWZ0AOa5NFAj0g3"
        - "https://{yourOktaDomain}/api/v1/groups/00gu67DU2qNCjNZYO0g3/users"
    ResourceSetResourcesResponse:
      value:
        resources:
        - id: ire106sQKoHoXXsAe0g4
          created: 2021-02-06T16:20:57.000Z
          lastUpdated: 2021-02-06T16:20:57.000Z
          _links:
            self:
              href: "https://{yourOktaDomain}/api/v1/groups/00guaxWZ0AOa5NFAj0g3"
        - id: ire106riDrTYl4qA70g4
          created: 2021-02-06T16:20:57.000Z
          lastUpdated: 2021-02-06T16:20:57.000Z
          _links:
            self:
              href: "https://{yourOktaDomain}/api/v1/groups/00gu67DU2qNCjNZYO0g3/users"
        - id: irezvo4AwE2ngpMw40g3
          created: 2021-02-06T16:20:57.000Z
          lastUpdated: 2021-02-06T16:20:57.000Z
          _links:
            users:
              href: "https://{yourOktaDomain}/api/v1/users"
            groups:
              href: "https://{yourOktaDomain}/api/v1/groups"
        _links:
          next:
            href: "https://{yourOktaDomain}/api/v1/iam/resource-sets/iamoJDFKaJxGIr0oamd9g/resources?after=irezvn1ZZxLSIBM2J0g3"
          resource-set:
            href: "https://{yourOktaDomain}/api/v1/iam/resource-sets/iamoJDFKaJxGIr0oamd9g"
    ResourceSetResponse:
      value:
        id: iamoJDFKaJxGIr0oamd9g
        label: SF-IT-People
        description: People in the IT department of San Francisco
        created: 2021-02-06T16:20:57.000Z
        lastUpdated: 2021-02-06T16:20:57.000Z
        _links:
          self:
            href: "https://{yourOktaDomain}/api/v1/iam/resource-sets/iamoJDFKaJxGIr0oamd9g"
          resources:
            href: "https://{yourOktaDomain}/api/v1/iam/resource-sets/iamoJDFKaJxGIr0oamd9g/resources"
          bindings:
            href: "https://{yourOktaDomain}/api/v1/iam/resource-sets/iamoJDFKaJxGIr0oamd9g/bindings"
    ResourceSetsResponse:
      value:
        resource-sets:
        - id: iamoJDFKaJxGIr0oamd9g
          label: SF-IT-1
          description: First San Francisco IT Resource Set
          created: 2021-02-06T16:20:57.000Z
          lastUpdated: 2021-02-06T16:20:57.000Z
          _links:
            self:
              href: "https://{yourOktaDomain}/api/v1/iam/resource-sets/iamoJDFKaJxGIr0oamd9g"
            resources:
              href: "https://{yourOktaDomain}/api/v1/iam/resource-sets/iamoJDFKaJxGIr0oamd9g/resources"
            bindings:
              href: "https://{yourOktaDomain}/api/v1/iam/resource-sets/iamoJDFKaJxGIr0oamd9g/bindings"
        - id: iamoJDFKaJxGIr0oamd0q
          label: SF-IT-2
          description: Second San Francisco IT Resource Set
          created: 2021-02-06T16:20:57.000Z
          lastUpdated: 2021-02-06T16:20:57.000Z
          _links:
            self:
              href: "https://{yourOktaDomain}/api/v1/iam/resource-sets/iamoJDFKaJxGIr0oamd0q"
            resources:
              href: "https://{yourOktaDomain}/api/v1/iam/resource-sets/iamoJDFKaJxGIr0oamd0q/resources"
            bindings:
              href: "https://{yourOktaDomain}/api/v1/iam/resource-sets/iamoJDFKaJxGIr0oamd0q/bindings"
        _links:
          next:
            href: "https://{yourOktaDomain}/api/v1/iam/resource-sets?after=iamoJDFKaJxGIr0oamd0q"
    RiskEventsRequest:
      value:
      - timestamp: 2021-01-20T00:00:00.001Z
        subjects:
        - ip: 6.7.6.7
          riskLevel: MEDIUM
        - ip: 1.1.1.1
          riskLevel: HIGH
          message: Detected Attack tooling and suspicious activity
      - timestamp: 2021-01-20T01:00:00.001Z
        subjects:
        - ip: 6.7.6.7
          riskLevel: LOW
        - ip: 2.2.2.2
          riskLevel: HIGH
    RiskProviderRequest:
      value:
        name: Risk-Partner-X
        action: log_only
        clientId: 00ckjsfgjkdkjdkkljjsd
    RiskProviderResponse:
      value:
        id: 00rp12r4skkjkjgsn
        action: log_only
        name: Risk-Partner-X
        clientId: 00ckjsfgjkdkjdkkljjsd
        created: 2021-01-05 22:18:30
        lastUpdated: 2021-01-05 21:23:10
        _links:
          self:
            href: "https://{yourOktaDomain}/api/v1/risk/providers/00rp12r4skkjkjgsn"
            hints:
              allow:
              - GET
              - PUT
    RoleRequest:
      value:
        label: UserCreator
        description: Create users
        permissions:
        - okta.users.create
        - okta.users.read
        - okta.groups.read
        - okta.users.userprofile.manage
    RoleResponse:
      value:
        id: cr0Yq6IJxGIr0ouum0g3
        label: UserCreator
        description: Create users
        created: 2021-02-06T16:20:57.000Z
        lastUpdated: 2021-02-06T16:20:57.000Z
        _links:
          permissions:
            href: "https://{yourOktaDomain}/api/v1/iam/roles/cr0Yq6IJxGIr0ouum0g3/permissions"
          self:
            href: "https://{yourOktaDomain}/api/v1/iam/roles/cr0Yq6IJxGIr0ouum0g3"
    RolesResponse:
      value:
        roles:
        - id: cr0Yq6IJxGIr0ouum0g3
          label: UserCreator
          description: Create users
          created: 2021-02-06T16:20:57.000Z
          lastUpdated: 2021-02-06T16:20:57.000Z
          _links:
            permissions:
              href: "https://{yourOktaDomain}/api/v1/iam/roles/cr0Yq6IJxGIr0ouum0g3/permissions"
            self:
              href: "https://{yourOktaDomain}/api/v1/iam/roles/cr0Yq6IJxGIr0ouum0g3"
        - id: cr0Fw7HKcWIroo88m3r1
          label: GroupMembershipManager
          description: Manage group membership
          created: 2021-02-06T16:20:57.000Z
          lastUpdated: 2021-02-06T16:20:57.000Z
          _links:
            permissions:
              href: "https://{yourOktaDomain}/api/v1/iam/roles/cr0Fw7HKcWIroo88m3r1/permissions"
            self:
              href: "https://{yourOktaDomain}/api/v1/iam/roles/cr0Fw7HKcWIroo88m3r1"
        _links:
          next:
            href: "https://{yourOktaDomain}/api/v1/iam/roles?after=cr0Fw7HKcWIroo88m3r1"
    TriggerSessionResponse:
      value:
      - id: uij4ri8ZLk0ywyqxB0g4
        identitySourceId: 0oa3l6l6WK6h0R0QW0g4
        status: TRIGGERED
        importType: INCREMENTAL
    UpdateBrandRequest:
      value:
        customPrivacyPolicyUrl: https://www.someHost.com/privacy-policy
        agreeToCustomPrivacyPolicy: true
        removePoweredByOkta: true
        name: New Name For Brand
    UpdateBrandResponse:
      value:
        id: bnd114iNkrcN6aR680g4
        removePoweredByOkta: true
        agreeToCustomPrivacyPolicy: true
        name: New Name For Brand
        isDefault: true
        customPrivacyPolicyUrl: https://www.someHost.com/privacy-policy
        _links:
          self:
            href: "https://{yourOktaDomain}/api/v1/brands/bnd114iNkrcN6aR680g4"
            hints:
              allow:
              - GET
              - PUT
              - DELETE
          themes:
            href: "https://{yourOktaDomain}/api/v1/brands/bnd114iNkrcN6aR680g4/themes"
            hints:
              allow:
              - GET
    UserSchemaAddRequest:
      value:
        definitions:
          custom:
            id: '#custom'
            type: object
            properties:
              twitterUserName:
                title: Twitter username
                description: Twitter Username
                type: string
                required: false
                minLength: 1
                maxLength: 20
                permissions:
                - principal: SELF
                  action: READ_WRITE
            required: []
    UserSchemaResponse:
      value:
        id: "https://{yourOktaDomain}/meta/schemas/user/default"
        $schema: http://json-schema.org/draft-04/schema#
        name: user
        title: Default Okta User
        lastUpdated: 2015-09-05T10:40:45.000Z
        created: 2015-02-02T10:27:36.000Z
        definitions:
          base:
            id: '#base'
            type: object
            properties:
              login:
                title: Username
                type: string
                required: true
                minLength: 5
                maxLength: 100
                permissions:
                - principal: SELF
                  action: READ_WRITE
              firstName:
                title: First name
                type: string
                required: true
                minLength: 1
                maxLength: 50
                permissions:
                - principal: SELF
                  action: READ_WRITE
              lastName:
                title: Last name
                type: string
                required: true
                minLength: 1
                maxLength: 50
                permissions:
                - principal: SELF
                  action: READ_WRITE
              email:
                title: Primary email
                type: string
                required: true
                format: email
                permissions:
                - principal: SELF
                  action: READ_WRITE
            required:
            - login
            - firstName
            - lastName
            - email
          custom:
            id: '#custom'
            type: object
            properties:
              twitterUserName:
                title: Twitter username
                description: User's username for twitter.com
                type: string
                required: false
                minLength: 1
                maxLength: 20
                permissions:
                - principal: SELF
                  action: READ_WRITE
            required: []
        type: object
        properties:
          profile:
            allOf:
            - $ref: '#/definitions/base'
            - $ref: '#/definitions/custom'
    WellKnownOrgMetadataResponseClassic:
      value:
        id: 00o5rb5mt2H3d1TJd0h7
        _links:
          organization:
            href: "https://{{yourOktaDomain}}"
        pipeline: v1
        settings:
          analyticsCollectionEnabled: false
          bugReportingEnabled: true
          omEnabled: true
    WellKnownOrgMetadataResponseCustomUrlOie:
      value:
        id: 00o47wwoytgsDqEtz0g7
        _links:
          organization:
            href: "https://{{yourSubdomain}}.okta.com"
          alternate:
            href: "https://{{yourCustomDomain}}"
        pipeline: idx
        settings:
          analyticsCollectionEnabled: false
          bugReportingEnabled: true
          omEnabled: false
  parameters:
    pathApiTokenId:
      description: id of the API Token
      explode: false
      in: path
      name: apiTokenId
      required: true
      schema:
        example: 00Tabcdefg1234567890
        type: string
      style: simple
    pathBehaviorId:
      description: id of the Behavior Detection Rule
      explode: false
      in: path
      name: behaviorId
      required: true
      schema:
        example: abcd1234
        type: string
      style: simple
    pathBrandId:
      description: The ID of the brand.
      explode: false
      in: path
      name: brandId
      required: true
      schema:
        type: string
      style: simple
    pathCaptchaId:
      description: id of the CAPTCHA
      explode: false
      in: path
      name: captchaId
      required: true
      schema:
        example: abcd1234
        type: string
      style: simple
    pathCustomizationId:
      description: The ID of the email customization.
      explode: false
      in: path
      name: customizationId
      required: true
      schema:
        type: string
      style: simple
    pathDeviceAssuranceId:
      description: Id of the Device Assurance Policy
      explode: false
      in: path
      name: deviceAssuranceId
      required: true
      schema:
        type: string
      style: simple
    pathDeviceId:
      description: '`id` of the device'
      explode: false
      in: path
      name: deviceId
      required: true
      schema:
        example: guo4a5u7JHHhjXrMK0g4
        type: string
      style: simple
    pathDomainId:
      description: The ID of the domain.
      explode: false
      in: path
      name: domainId
      required: true
      schema:
        type: string
      style: simple
    pathEmailDomainId:
      explode: false
      in: path
      name: emailDomainId
      required: true
      schema:
        description: The ID of the email domain.
        type: string
      style: simple
    pathIdentitySourceId:
      explode: false
      in: path
      name: identitySourceId
      required: true
      schema:
        type: string
      style: simple
    pathLogStreamId:
      description: id of the log stream
      explode: false
      in: path
      name: logStreamId
      required: true
      schema:
        example: abcd1234
        type: string
      style: simple
    pathMemberId:
      description: '`id` of a member'
      explode: false
      in: path
      name: memberId
      required: true
      schema:
        example: irb1qe6PGuMc7Oh8N0g4
        type: string
      style: simple
    pathPermissionType:
      description: An okta permission type
      explode: false
      in: path
      name: permissionType
      required: true
      schema:
        example: okta.users.manage
        type: string
      style: simple
    pathPoolId:
      description: Id of the agent pool for which the settings will apply
      explode: false
      in: path
      name: poolId
      required: true
      schema:
        type: string
      style: simple
    pathPrincipalRateLimitId:
      description: id of the Principal Rate Limit
      explode: false
      in: path
      name: principalRateLimitId
      required: true
      schema:
        example: abcd1234
        type: string
      style: simple
    pathPushProviderId:
      description: Id of the push provider
      explode: false
      in: path
      name: pushProviderId
      required: true
      schema:
        type: string
      style: simple
    pathResourceId:
      description: '`id` of a resource'
      explode: false
      in: path
      name: resourceId
      required: true
      schema:
        example: ire106sQKoHoXXsAe0g4
        type: string
      style: simple
    pathResourceSetId:
      description: '`id` of a resource set'
      explode: false
      in: path
      name: resourceSetId
      required: true
      schema:
        example: iamoJDFKaJxGIr0oamd9g
        type: string
      style: simple
    pathRiskProviderId:
      description: '`id` of the risk provider'
      explode: false
      in: path
      name: riskProviderId
      required: true
      schema:
        example: 00rp12r4skkjkjgsn
        type: string
      style: simple
    pathRoleIdOrLabel:
      description: '`id` or `label` of the role'
      explode: false
      in: path
      name: roleIdOrLabel
      required: true
      schema:
        example: cr0Yq6IJxGIr0ouum0g3
        type: string
      style: simple
    pathSessionId:
      explode: false
      in: path
      name: sessionId
      required: true
      schema:
        type: string
      style: simple
    pathTemplateName:
      description: The name of the email template.
      explode: false
      in: path
      name: templateName
      required: true
      schema:
        type: string
      style: simple
    pathThemeId:
      description: The ID of the theme.
      explode: false
      in: path
      name: themeId
      required: true
      schema:
        type: string
      style: simple
    pathUpdateId:
      description: Id of the update
      explode: false
      in: path
      name: updateId
      required: true
      schema:
        type: string
      style: simple
    pathUserId:
      explode: false
      in: path
      name: userId
      required: true
      schema:
        type: string
      style: simple
    queryAfter:
      description: "The cursor to use for pagination. It is an opaque string that\
        \ specifies your current location in the list and is obtained from the `Link`\
        \ response header. See [Pagination](/#pagination) for more information."
      explode: true
      in: query
      name: after
      required: false
      schema:
        type: string
      style: form
    queryExpandEmailTemplate:
      description: Specifies additional metadata to be included in the response.
      explode: false
      in: query
      name: expand
      required: false
      schema:
        items:
          enum:
          - settings
          - customizationCount
          type: string
        type: array
      style: form
    queryExpandPageRoot:
      description: Specifies additional metadata to be included in the response.
      explode: false
      in: query
      name: expand
      required: false
      schema:
        items:
          enum:
          - default
          - customized
          - customizedUrl
          - preview
          - previewUrl
          type: string
        type: array
      style: form
    queryLanguage:
      description: The language to use for the email. Defaults to the current user's
        language if unspecified.
      explode: true
      in: query
      name: language
      required: false
      schema:
        $ref: '#/components/schemas/Language'
      style: form
    queryLimit:
      description: A limit on the number of objects to return.
      explode: true
      in: query
      name: limit
      required: false
      schema:
        default: 20
        maximum: 200
        minimum: 1
        type: integer
      style: form
    queryLimitPerPoolType:
      description: Maximum number of AgentPools being returned
      explode: true
      in: query
      name: limitPerPoolType
      required: false
      schema:
        default: 5
        type: integer
      style: form
    queryPoolType:
      description: Agent type to search for
      explode: true
      in: query
      name: poolType
      required: false
      schema:
        $ref: '#/components/schemas/AgentType'
      style: form
    queryScheduled:
      description: Scope the list only to scheduled or ad-hoc updates. If the parameter
        is not provided we will return the whole list of updates.
      explode: true
      in: query
      name: scheduled
      required: false
      schema:
        type: boolean
      style: form
  requestBodies:
    AuthenticatorRequestBody:
      content:
        application/json:
          examples:
            Duo:
              $ref: '#/components/examples/AuthenticatorRequestDuo'
          schema:
            $ref: '#/components/schemas/Authenticator'
      required: true
  responses:
    ErrorApiValidationFailed400:
      content:
        application/json:
          examples:
            API Validation Failed:
              $ref: '#/components/examples/ErrorApiValidationFailed'
          schema:
            $ref: '#/components/schemas/Error'
      description: Bad Request
    ErrorAccessDenied403:
      content:
        application/json:
          examples:
            Access Denied:
              $ref: '#/components/examples/ErrorAccessDenied'
          schema:
            $ref: '#/components/schemas/Error'
      description: Forbidden
    ErrorResourceNotFound404:
      content:
        application/json:
          examples:
            Resource Not Found:
              $ref: '#/components/examples/ErrorResourceNotFound'
          schema:
            $ref: '#/components/schemas/Error'
      description: Not Found
    ErrorTooManyRequests429:
      content:
        application/json:
          examples:
            Resource Not Found:
              $ref: '#/components/examples/ErrorTooManyRequests'
          schema:
            $ref: '#/components/schemas/Error'
      description: Too Many Requests
    AuthenticatorResponse:
      content:
        application/json:
          examples:
            Duo:
              $ref: '#/components/examples/AuthenticatorResponseDuo'
            Email:
              $ref: '#/components/examples/AuthenticatorResponseEmail'
            Password:
              $ref: '#/components/examples/AuthenticatorResponsePassword'
            Phone:
              $ref: '#/components/examples/AuthenticatorResponsePhone'
            WebAuthn:
              $ref: '#/components/examples/AuthenticatorResponseWebAuthn'
            Security Question:
              $ref: '#/components/examples/AuthenticatorResponseSecurityQuestion'
          schema:
            $ref: '#/components/schemas/Authenticator'
      description: OK
  schemas:
    APNSConfiguration:
      properties:
        fileName:
          description: (Optional) File name for Admin Console display
          type: string
        keyId:
          description: 10-character Key ID obtained from the Apple developer account
          type: string
        teamId:
          description: 10-character Team ID used to develop the iOS app
          type: string
        tokenSigningKey:
          description: APNs private authentication token signing key
          type: string
          writeOnly: true
    APNSPushProvider:
      allOf:
      - $ref: '#/components/schemas/PushProvider'
      - $ref: '#/components/schemas/APNSPushProvider_allOf'
    AccessPolicy:
      allOf:
      - $ref: '#/components/schemas/Policy'
      - $ref: '#/components/schemas/AccessPolicy_allOf'
    AccessPolicyConstraint:
      properties:
        methods:
          items:
            type: string
          type: array
        reauthenticateIn:
          type: string
        types:
          items:
            type: string
          type: array
      type: object
    AccessPolicyConstraints:
      properties:
        knowledge:
          $ref: '#/components/schemas/KnowledgeConstraint'
        possession:
          $ref: '#/components/schemas/PossessionConstraint'
      type: object
    AccessPolicyRule:
      allOf:
      - $ref: '#/components/schemas/PolicyRule'
      - $ref: '#/components/schemas/AccessPolicyRule_allOf'
    AccessPolicyRuleActions:
      allOf:
      - $ref: '#/components/schemas/PolicyRuleActions'
      - $ref: '#/components/schemas/AccessPolicyRuleActions_allOf'
    AccessPolicyRuleApplicationSignOn:
      properties:
        access:
          type: string
        verificationMethod:
          $ref: '#/components/schemas/VerificationMethod'
      type: object
    AccessPolicyRuleConditions:
      allOf:
      - $ref: '#/components/schemas/PolicyRuleConditions'
      - $ref: '#/components/schemas/AccessPolicyRuleConditions_allOf'
    AccessPolicyRuleCustomCondition:
      properties:
        condition:
          type: string
    AcsEndpoint:
      properties:
        index:
          type: integer
        url:
          type: string
      type: object
    ActivateFactorRequest:
      example:
        attestation: attestation
        stateToken: stateToken
        clientData: clientData
        passCode: passCode
        registrationData: registrationData
      properties:
        attestation:
          type: string
        clientData:
          type: string
        passCode:
          type: string
        registrationData:
          type: string
        stateToken:
          type: string
      type: object
    Agent:
      description: Agent details
      example:
        operationalStatus: null
        isLatestGAedVersion: true
        _links:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
        updateStatus: null
        name: name
        poolId: poolId
        id: id
        type: null
        version: version
        updateMessage: updateMessage
        isHidden: true
        lastConnection: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          readOnly: true
          type: string
        isHidden:
          type: boolean
        isLatestGAedVersion:
          type: boolean
        lastConnection:
          format: date-time
          type: string
        name:
          type: string
        operationalStatus:
          $ref: '#/components/schemas/OperationalStatus'
        poolId:
          type: string
        type:
          $ref: '#/components/schemas/AgentType'
        updateMessage:
          type: string
        updateStatus:
          $ref: '#/components/schemas/AgentUpdateInstanceStatus'
        version:
          type: string
        _links:
          $ref: '#/components/schemas/HrefObject'
      type: object
    AgentPool:
      description: "An AgentPool is a collection of agents that serve a common purpose.\
        \ An AgentPool has a unique ID within an org, and contains a collection of\
        \ agents disjoint to every other AgentPool (i.e. no two AgentPools share an\
        \ Agent)."
      example:
        operationalStatus: null
        name: name
        id: id
        type: null
        agents:
        - operationalStatus: null
          isLatestGAedVersion: true
          _links:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          updateStatus: null
          name: name
          poolId: poolId
          id: id
          type: null
          version: version
          updateMessage: updateMessage
          isHidden: true
          lastConnection: 2000-01-23T04:56:07.000+00:00
        - operationalStatus: null
          isLatestGAedVersion: true
          _links:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          updateStatus: null
          name: name
          poolId: poolId
          id: id
          type: null
          version: version
          updateMessage: updateMessage
          isHidden: true
          lastConnection: 2000-01-23T04:56:07.000+00:00
      properties:
        agents:
          items:
            $ref: '#/components/schemas/Agent'
          type: array
        id:
          readOnly: true
          type: string
        name:
          type: string
        operationalStatus:
          $ref: '#/components/schemas/OperationalStatus'
        type:
          $ref: '#/components/schemas/AgentType'
      type: object
    AgentPoolUpdate:
      description: Various information about agent auto update configuration
      example:
        reason: reason
        schedule:
          cron: cron
          duration: 6
          lastUpdated: 2000-01-23T04:56:07.000+00:00
          delay: 0
          timezone: timezone
        agentType: null
        notifyAdmin: true
        _links:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
        sortOrder: 1
        name: name
        id: id
        enabled: true
        agents:
        - operationalStatus: null
          isLatestGAedVersion: true
          _links:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          updateStatus: null
          name: name
          poolId: poolId
          id: id
          type: null
          version: version
          updateMessage: updateMessage
          isHidden: true
          lastConnection: 2000-01-23T04:56:07.000+00:00
        - operationalStatus: null
          isLatestGAedVersion: true
          _links:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          updateStatus: null
          name: name
          poolId: poolId
          id: id
          type: null
          version: version
          updateMessage: updateMessage
          isHidden: true
          lastConnection: 2000-01-23T04:56:07.000+00:00
        status: null
        targetVersion: targetVersion
      properties:
        agents:
          items:
            $ref: '#/components/schemas/Agent'
          type: array
        agentType:
          $ref: '#/components/schemas/AgentType'
        enabled:
          type: boolean
        id:
          readOnly: true
          type: string
        name:
          type: string
        notifyAdmin:
          type: boolean
        reason:
          type: string
        schedule:
          $ref: '#/components/schemas/AutoUpdateSchedule'
        sortOrder:
          type: integer
        status:
          $ref: '#/components/schemas/AgentUpdateJobStatus'
        targetVersion:
          type: string
        _links:
          $ref: '#/components/schemas/HrefObject'
      type: object
    AgentPoolUpdateSetting:
      description: Setting for auto-update
      example:
        releaseChannel: null
        agentType: null
        latestVersion: latestVersion
        poolId: poolId
        continueOnError: true
        minimalSupportedVersion: minimalSupportedVersion
        poolName: poolName
      properties:
        agentType:
          $ref: '#/components/schemas/AgentType'
        continueOnError:
          type: boolean
        latestVersion:
          type: string
        minimalSupportedVersion:
          type: string
        poolId:
          readOnly: true
          type: string
        poolName:
          type: string
        releaseChannel:
          $ref: '#/components/schemas/ReleaseChannel'
      type: object
    AgentType:
      description: Agent types that are being monitored
      enum:
      - AD
      - IWA
      - LDAP
      - MFA
      - OPP
      - RUM
      - Radius
      type: string
    AgentUpdateInstanceStatus:
      description: Status for one agent regarding the status to auto-update that agent
      enum:
      - Cancelled
      - Failed
      - InProgress
      - PendingCompletion
      - Scheduled
      - Success
      type: string
    AgentUpdateJobStatus:
      description: Overall state for the auto-update job from admin perspective
      enum:
      - Cancelled
      - Failed
      - InProgress
      - Paused
      - Scheduled
      - Success
      type: string
    AllowedForEnum:
      enum:
      - any
      - none
      - recovery
      - sso
      type: string
    ApiToken:
      description: An API token for an Okta User. This token is NOT scoped any further
        and can be used for any API the user has permissions to call.
      example:
        lastUpdated: 2000-01-23T04:56:07.000+00:00
        tokenWindow: tokenWindow
        _link:
          self:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
        clientName: clientName
        created: 2000-01-23T04:56:07.000+00:00
        name: name
        id: id
        userId: userId
        expiresAt: 2000-01-23T04:56:07.000+00:00
      properties:
        clientName:
          readOnly: true
          type: string
        created:
          format: date-time
          readOnly: true
          type: string
        expiresAt:
          format: date-time
          readOnly: true
          type: string
        id:
          readOnly: true
          type: string
        lastUpdated:
          format: date-time
          readOnly: true
          type: string
        name:
          type: string
        tokenWindow:
          description: "A time duration specified as an [ISO-8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations)."
          pattern: ^P(?!$)(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d)(\d+H)?(\d+M)?(\d+S)?)?$
          type: string
        userId:
          type: string
        _link:
          $ref: '#/components/schemas/ApiToken__link'
      required:
      - name
      title: API Token
      type: object
    AppAndInstanceConditionEvaluatorAppOrInstance:
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string
        type:
          $ref: '#/components/schemas/AppAndInstanceType'
      type: object
    AppAndInstancePolicyRuleCondition:
      properties:
        exclude:
          items:
            $ref: '#/components/schemas/AppAndInstanceConditionEvaluatorAppOrInstance'
          type: array
        include:
          items:
            $ref: '#/components/schemas/AppAndInstanceConditionEvaluatorAppOrInstance'
          type: array
      type: object
    AppAndInstanceType:
      enum:
      - APP
      - APP_TYPE
      type: string
    AppInstancePolicyRuleCondition:
      properties:
        exclude:
          items:
            type: string
          type: array
        include:
          items:
            type: string
          type: array
      type: object
    AppLink:
      example:
        appInstanceId: appInstanceId
        credentialsSetup: true
        hidden: true
        appName: appName
        appAssignmentId: appAssignmentId
        sortOrder: 0
        linkUrl: linkUrl
        id: id
        label: label
        logoUrl: logoUrl
      properties:
        appAssignmentId:
          readOnly: true
          type: string
        appInstanceId:
          readOnly: true
          type: string
        appName:
          readOnly: true
          type: string
        credentialsSetup:
          readOnly: true
          type: boolean
        hidden:
          readOnly: true
          type: boolean
        id:
          readOnly: true
          type: string
        label:
          readOnly: true
          type: string
        linkUrl:
          readOnly: true
          type: string
        logoUrl:
          readOnly: true
          type: string
        sortOrder:
          readOnly: true
          type: integer
      type: object
    AppUser:
      example:
        credentials:
          password:
            value: value
          userName: userName
        _links:
          key: "{}"
        created: 2000-01-23T04:56:07.000+00:00
        profile:
          key: "{}"
        syncState: syncState
        externalId: externalId
        lastUpdated: 2000-01-23T04:56:07.000+00:00
        passwordChanged: 2000-01-23T04:56:07.000+00:00
        lastSync: 2000-01-23T04:56:07.000+00:00
        _embedded:
          key: "{}"
        scope: scope
        statusChanged: 2000-01-23T04:56:07.000+00:00
        id: id
        status: status
      properties:
        created:
          format: date-time
          readOnly: true
          type: string
        credentials:
          $ref: '#/components/schemas/AppUserCredentials'
        externalId:
          readOnly: true
          type: string
        id:
          readOnly: false
          type: string
        lastSync:
          format: date-time
          readOnly: true
          type: string
        lastUpdated:
          format: date-time
          readOnly: true
          type: string
        passwordChanged:
          format: date-time
          readOnly: true
          type: string
        profile:
          additionalProperties:
            properties: {}
            type: object
          type: object
        scope:
          type: string
        status:
          readOnly: true
          type: string
        statusChanged:
          format: date-time
          readOnly: true
          type: string
        syncState:
          readOnly: true
          type: string
        _embedded:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
        _links:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
      type: object
    AppUserCredentials:
      example:
        password:
          value: value
        userName: userName
      properties:
        password:
          $ref: '#/components/schemas/AppUserPasswordCredential'
        userName:
          type: string
      type: object
    AppUserPasswordCredential:
      example:
        value: value
      properties:
        value:
          format: password
          type: string
      type: object
    Application:
      discriminator:
        mapping:
          AUTO_LOGIN: '#/components/schemas/AutoLoginApplication'
          BASIC_AUTH: '#/components/schemas/BasicAuthApplication'
          BOOKMARK: '#/components/schemas/BookmarkApplication'
          BROWSER_PLUGIN: '#/components/schemas/BrowserPluginApplication'
          OPENID_CONNECT: '#/components/schemas/OpenIdConnectApplication'
          SAML_1_1: '#/components/schemas/SamlApplication'
          SAML_2_0: '#/components/schemas/SamlApplication'
          SECURE_PASSWORD_STORE: '#/components/schemas/SecurePasswordStoreApplication'
          WS_FEDERATION: '#/components/schemas/WsFederationApplication'
        propertyName: signOnMode
      properties:
        accessibility:
          $ref: '#/components/schemas/ApplicationAccessibility'
        created:
          format: date-time
          readOnly: true
          type: string
        features:
          items:
            type: string
          type: array
        id:
          readOnly: true
          type: string
        label:
          type: string
        lastUpdated:
          format: date-time
          readOnly: true
          type: string
        licensing:
          $ref: '#/components/schemas/ApplicationLicensing'
        profile:
          additionalProperties:
            properties: {}
            type: object
          type: object
        signOnMode:
          $ref: '#/components/schemas/ApplicationSignOnMode'
        status:
          $ref: '#/components/schemas/ApplicationLifecycleStatus'
        visibility:
          $ref: '#/components/schemas/ApplicationVisibility'
        _embedded:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
        _links:
          $ref: '#/components/schemas/ApplicationLinks'
      type: object
    ApplicationAccessibility:
      properties:
        errorRedirectUrl:
          type: string
        loginRedirectUrl:
          type: string
        selfService:
          type: boolean
      type: object
    ApplicationCredentials:
      properties:
        signing:
          $ref: '#/components/schemas/ApplicationCredentialsSigning'
        userNameTemplate:
          $ref: '#/components/schemas/ApplicationCredentialsUsernameTemplate'
      type: object
    ApplicationCredentialsOAuthClient:
      properties:
        autoKeyRotation:
          type: boolean
        client_id:
          type: string
        client_secret:
          type: string
        token_endpoint_auth_method:
          $ref: '#/components/schemas/OAuthEndpointAuthenticationMethod'
      type: object
    ApplicationCredentialsScheme:
      enum:
      - ADMIN_SETS_CREDENTIALS
      - EDIT_PASSWORD_ONLY
      - EDIT_USERNAME_AND_PASSWORD
      - EXTERNAL_PASSWORD_SYNC
      - SHARED_USERNAME_AND_PASSWORD
      type: string
    ApplicationCredentialsSigning:
      properties:
        kid:
          type: string
        lastRotated:
          format: date-time
          readOnly: true
          type: string
        nextRotation:
          format: date-time
          readOnly: true
          type: string
        rotationMode:
          type: string
        use:
          $ref: '#/components/schemas/ApplicationCredentialsSigningUse'
      type: object
    ApplicationCredentialsSigningUse:
      enum:
      - sig
      type: string
    ApplicationCredentialsUsernameTemplate:
      properties:
        pushStatus:
          type: string
        template:
          type: string
        type:
          type: string
        userSuffix:
          type: string
      type: object
    ApplicationFeature:
      example:
        capabilities:
          create:
            lifecycleCreate:
              status: null
          update:
            password:
              seed: null
              change: null
              status: null
            profile:
              status: null
            lifecycleDeactivate:
              status: null
        _links:
          key: "{}"
        name: name
        description: description
        status: null
      properties:
        capabilities:
          $ref: '#/components/schemas/CapabilitiesObject'
        description:
          type: string
        name:
          type: string
        status:
          $ref: '#/components/schemas/EnabledStatus'
        _links:
          additionalProperties:
            type: object
          readOnly: true
          type: object
      type: object
    ApplicationGroupAssignment:
      example:
        lastUpdated: 2000-01-23T04:56:07.000+00:00
        _embedded:
          key: "{}"
        _links:
          key: "{}"
        profile:
          key: "{}"
        id: id
        priority: 0
      properties:
        id:
          readOnly: true
          type: string
        lastUpdated:
          format: date-time
          readOnly: true
          type: string
        priority:
          type: integer
        profile:
          additionalProperties:
            properties: {}
            type: object
          type: object
        _embedded:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
        _links:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
      type: object
    ApplicationLabel:
      type: string
    ApplicationLayout:
      example:
        elements:
        - key: ""
        - key: ""
        scope: scope
        options:
          key: ""
        rule:
          condition:
            schema:
              key: ""
            scope: scope
          effect: effect
        label: label
        type: type
      properties:
        elements:
          items:
            additionalProperties: true
            type: object
          type: array
        label:
          type: string
        options:
          additionalProperties: {}
          type: object
        rule:
          $ref: '#/components/schemas/ApplicationLayout_rule'
        scope:
          type: string
        type:
          type: string
      type: object
    ApplicationLayoutRuleCondition:
      example:
        schema:
          key: ""
        scope: scope
      properties:
        schema:
          additionalProperties: {}
          type: object
        scope:
          type: string
      type: object
    ApplicationLicensing:
      properties:
        seatCount:
          type: integer
      type: object
    ApplicationLifecycleStatus:
      enum:
      - ACTIVE
      - DELETED
      - INACTIVE
      readOnly: true
      type: string
    ApplicationLinks:
      additionalProperties: true
      properties:
        accessPolicy:
          $ref: '#/components/schemas/HrefObject'
        activate:
          $ref: '#/components/schemas/HrefObject'
        deactivate:
          $ref: '#/components/schemas/HrefObject'
        groups:
          $ref: '#/components/schemas/HrefObject'
        logo:
          items:
            $ref: '#/components/schemas/HrefObject'
          type: array
        metadata:
          $ref: '#/components/schemas/HrefObject'
        self:
          $ref: '#/components/schemas/HrefObject'
        users:
          $ref: '#/components/schemas/HrefObject'
      readOnly: true
      type: object
    ApplicationSettings:
      properties:
        identityStoreId:
          type: string
        implicitAssignment:
          type: boolean
        inlineHookId:
          type: string
        notes:
          $ref: '#/components/schemas/ApplicationSettingsNotes'
        notifications:
          $ref: '#/components/schemas/ApplicationSettingsNotifications'
      type: object
    ApplicationSettingsNotes:
      properties:
        admin:
          type: string
        enduser:
          type: string
      type: object
    ApplicationSettingsNotifications:
      properties:
        vpn:
          $ref: '#/components/schemas/ApplicationSettingsNotificationsVpn'
      type: object
    ApplicationSettingsNotificationsVpn:
      properties:
        helpUrl:
          type: string
        message:
          type: string
        network:
          $ref: '#/components/schemas/ApplicationSettingsNotificationsVpnNetwork'
      type: object
    ApplicationSettingsNotificationsVpnNetwork:
      properties:
        connection:
          type: string
        exclude:
          items:
            type: string
          type: array
        include:
          items:
            type: string
          type: array
      type: object
    ApplicationSignOnMode:
      enum:
      - AUTO_LOGIN
      - BASIC_AUTH
      - BOOKMARK
      - BROWSER_PLUGIN
      - OPENID_CONNECT
      - SAML_1_1
      - SAML_2_0
      - SECURE_PASSWORD_STORE
      - WS_FEDERATION
      type: string
    ApplicationVisibility:
      properties:
        appLinks:
          additionalProperties:
            type: boolean
          type: object
        autoLaunch:
          type: boolean
        autoSubmitToolbar:
          type: boolean
        hide:
          $ref: '#/components/schemas/ApplicationVisibilityHide'
      type: object
    ApplicationVisibilityHide:
      properties:
        iOS:
          type: boolean
        web:
          type: boolean
      type: object
    AssignRoleRequest:
      example:
        type: null
      properties:
        type:
          $ref: '#/components/schemas/RoleType'
      type: object
    AuthenticationProvider:
      example:
        name: name
        type: null
      properties:
        name:
          type: string
        type:
          $ref: '#/components/schemas/AuthenticationProviderType'
      type: object
    AuthenticationProviderType:
      enum:
      - ACTIVE_DIRECTORY
      - FEDERATION
      - IMPORT
      - LDAP
      - OKTA
      - SOCIAL
      type: string
    Authenticator:
      example:
        lastUpdated: 2000-01-23T04:56:07.000+00:00
        settings:
          appInstanceId: appInstanceId
          allowedFor: null
          userVerification: null
          channelBinding:
            style: style
            required: null
          compliance:
            fips: null
          tokenLifetimeInMinutes: 6
        provider:
          configuration:
            hostName: hostName
            instanceId: instanceId
            authPort: 0
            userNameTemplate:
              template: template
            sharedSecret: sharedSecret
          type: type
        _links:
          key: "{}"
        created: 2000-01-23T04:56:07.000+00:00
        name: name
        id: id
        type: null
        key: key
        status: null
      properties:
        created:
          format: date-time
          readOnly: true
          type: string
        id:
          readOnly: true
          type: string
        key:
          type: string
        lastUpdated:
          format: date-time
          readOnly: true
          type: string
        name:
          type: string
        provider:
          $ref: '#/components/schemas/AuthenticatorProvider'
        settings:
          $ref: '#/components/schemas/AuthenticatorSettings'
        status:
          $ref: '#/components/schemas/AuthenticatorStatus'
        type:
          $ref: '#/components/schemas/AuthenticatorType'
        _links:
          additionalProperties:
            type: object
          readOnly: true
          type: object
      type: object
    AuthenticatorProvider:
      example:
        configuration:
          hostName: hostName
          instanceId: instanceId
          authPort: 0
          userNameTemplate:
            template: template
          sharedSecret: sharedSecret
        type: type
      properties:
        configuration:
          $ref: '#/components/schemas/AuthenticatorProviderConfiguration'
        type:
          type: string
    AuthenticatorProviderConfiguration:
      example:
        hostName: hostName
        instanceId: instanceId
        authPort: 0
        userNameTemplate:
          template: template
        sharedSecret: sharedSecret
      properties:
        authPort:
          type: integer
        hostName:
          type: string
        instanceId:
          type: string
        sharedSecret:
          type: string
        userNameTemplate:
          $ref: '#/components/schemas/AuthenticatorProviderConfigurationUserNameTemplate'
    AuthenticatorProviderConfigurationUserNameTemplate:
      example:
        template: template
      properties:
        template:
          type: string
    AuthenticatorSettings:
      example:
        appInstanceId: appInstanceId
        allowedFor: null
        userVerification: null
        channelBinding:
          style: style
          required: null
        compliance:
          fips: null
        tokenLifetimeInMinutes: 6
      properties:
        allowedFor:
          $ref: '#/components/schemas/AllowedForEnum'
        appInstanceId:
          type: string
        channelBinding:
          $ref: '#/components/schemas/ChannelBinding'
        compliance:
          $ref: '#/components/schemas/Compliance'
        tokenLifetimeInMinutes:
          type: integer
        userVerification:
          $ref: '#/components/schemas/UserVerificationEnum'
      type: object
    AuthenticatorStatus:
      enum:
      - ACTIVE
      - INACTIVE
      type: string
    AuthenticatorType:
      enum:
      - app
      - email
      - federated
      - password
      - phone
      - security_key
      - security_question
      type: string
    AuthorizationServer:
      example:
        lastUpdated: 2000-01-23T04:56:07.000+00:00
        credentials:
          signing:
            nextRotation: 2000-01-23T04:56:07.000+00:00
            use: null
            kid: kid
            rotationMode: null
            lastRotated: 2000-01-23T04:56:07.000+00:00
        _links:
          key: "{}"
        created: 2000-01-23T04:56:07.000+00:00
        name: name
        audiences:
        - audiences
        - audiences
        description: description
        id: id
        issuer: issuer
        issuerMode: null
        status: null
      properties:
        audiences:
          items:
            type: string
          type: array
        created:
          format: date-time
          readOnly: true
          type: string
        credentials:
          $ref: '#/components/schemas/AuthorizationServerCredentials'
        description:
          type: string
        id:
          readOnly: true
          type: string
        issuer:
          type: string
        issuerMode:
          $ref: '#/components/schemas/IssuerMode'
        lastUpdated:
          format: date-time
          readOnly: true
          type: string
        name:
          type: string
        status:
          $ref: '#/components/schemas/LifecycleStatus'
        _links:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
      type: object
    AuthorizationServerCredentials:
      example:
        signing:
          nextRotation: 2000-01-23T04:56:07.000+00:00
          use: null
          kid: kid
          rotationMode: null
          lastRotated: 2000-01-23T04:56:07.000+00:00
      properties:
        signing:
          $ref: '#/components/schemas/AuthorizationServerCredentialsSigningConfig'
      type: object
    AuthorizationServerCredentialsRotationMode:
      enum:
      - AUTO
      - MANUAL
      type: string
    AuthorizationServerCredentialsSigningConfig:
      example:
        nextRotation: 2000-01-23T04:56:07.000+00:00
        use: null
        kid: kid
        rotationMode: null
        lastRotated: 2000-01-23T04:56:07.000+00:00
      properties:
        kid:
          type: string
        lastRotated:
          format: date-time
          readOnly: true
          type: string
        nextRotation:
          format: date-time
          readOnly: true
          type: string
        rotationMode:
          $ref: '#/components/schemas/AuthorizationServerCredentialsRotationMode'
        use:
          $ref: '#/components/schemas/AuthorizationServerCredentialsUse'
      type: object
    AuthorizationServerCredentialsUse:
      enum:
      - sig
      type: string
    AuthorizationServerPolicy:
      allOf:
      - $ref: '#/components/schemas/Policy'
      - $ref: '#/components/schemas/AccessPolicy_allOf'
    AuthorizationServerPolicyRule:
      allOf:
      - $ref: '#/components/schemas/PolicyRule'
      - $ref: '#/components/schemas/AuthorizationServerPolicyRule_allOf'
    AuthorizationServerPolicyRuleActions:
      allOf:
      - $ref: '#/components/schemas/PolicyRuleActions'
      - $ref: '#/components/schemas/AuthorizationServerPolicyRuleActions_allOf'
    AuthorizationServerPolicyRuleConditions:
      allOf:
      - $ref: '#/components/schemas/PolicyRuleConditions'
      - $ref: '#/components/schemas/AuthorizationServerPolicyRuleConditions_allOf'
    AutoLoginApplication:
      allOf:
      - $ref: '#/components/schemas/Application'
      - $ref: '#/components/schemas/AutoLoginApplication_allOf'
    AutoLoginApplicationSettings:
      allOf:
      - $ref: '#/components/schemas/ApplicationSettings'
      - $ref: '#/components/schemas/AutoLoginApplicationSettings_allOf'
    AutoLoginApplicationSettingsSignOn:
      properties:
        loginUrl:
          type: string
        redirectUrl:
          type: string
      type: object
    AutoUpdateSchedule:
      description: The schedule of auto-update configured by admin.
      example:
        cron: cron
        duration: 6
        lastUpdated: 2000-01-23T04:56:07.000+00:00
        delay: 0
        timezone: timezone
      properties:
        cron:
          type: string
        delay:
          description: delay in days
          type: integer
        duration:
          description: duration in minutes
          type: integer
        lastUpdated:
          description: "last time when the updated finished (success or failed, exclude\
            \ cancelled), null if job haven't finished once yet."
          format: date-time
          type: string
        timezone:
          type: string
      type: object
    AwsRegion:
      description: An AWS region
      enum:
      - ca-central-1
      - eu-central-1
      - eu-north-1
      - eu-south-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      type: string
    BaseEmailDomain:
      properties:
        displayName:
          type: string
        userName:
          type: string
      required:
      - displayName
      - userName
      type: object
    BasicApplicationSettings:
      allOf:
      - $ref: '#/components/schemas/ApplicationSettings'
      - $ref: '#/components/schemas/BasicApplicationSettings_allOf'
    BasicApplicationSettingsApplication:
      properties:
        authURL:
          type: string
        url:
          type: string
      type: object
    BasicAuthApplication:
      allOf:
      - $ref: '#/components/schemas/Application'
      - $ref: '#/components/schemas/BasicAuthApplication_allOf'
      x-okta-defined-as:
        name: template_basic_auth
    BeforeScheduledActionPolicyRuleCondition:
      properties:
        duration:
          $ref: '#/components/schemas/Duration'
        lifecycleAction:
          $ref: '#/components/schemas/ScheduledUserLifecycleAction'
      type: object
    BehaviorRule:
      discriminator:
        mapping:
          ANOMALOUS_LOCATION: '#/components/schemas/BehaviorRuleAnomalousLocation'
          ANOMALOUS_IP: '#/components/schemas/BehaviorRuleAnomalousIP'
          ANOMALOUS_DEVICE: '#/components/schemas/BehaviorRuleAnomalousDevice'
          VELOCITY: '#/components/schemas/BehaviorRuleVelocity'
        propertyName: type
      example:
        lastUpdated: 2000-01-23T04:56:07.000+00:00
        _link:
          self:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
        created: 2000-01-23T04:56:07.000+00:00
        name: name
        id: id
        type: null
        status: null
      properties:
        created:
          format: date-time
          readOnly: true
          type: string
        id:
          readOnly: true
          type: string
        lastUpdated:
          format: date-time
          readOnly: true
          type: string
        name:
          maxLength: 128
          type: string
        status:
          $ref: '#/components/schemas/LifecycleStatus'
        type:
          $ref: '#/components/schemas/BehaviorRuleType'
        _link:
          $ref: '#/components/schemas/ApiToken__link'
      required:
      - name
      - type
      title: Behavior Detection Rule
      type: object
    BehaviorRuleAnomalousDevice:
      allOf:
      - $ref: '#/components/schemas/BehaviorRule'
      - $ref: '#/components/schemas/BehaviorRuleAnomalousDevice_allOf'
    BehaviorRuleAnomalousIP:
      allOf:
      - $ref: '#/components/schemas/BehaviorRule'
      - $ref: '#/components/schemas/BehaviorRuleAnomalousIP_allOf'
    BehaviorRuleAnomalousLocation:
      allOf:
      - $ref: '#/components/schemas/BehaviorRule'
      - $ref: '#/components/schemas/BehaviorRuleAnomalousLocation_allOf'
    BehaviorRuleSettings:
      title: Behavior Detection Rule Settings
      type: object
    BehaviorRuleSettingsAnomalousDevice:
      allOf:
      - $ref: '#/components/schemas/BehaviorRuleSettingsHistoryBased'
    BehaviorRuleSettingsAnomalousIP:
      allOf:
      - $ref: '#/components/schemas/BehaviorRuleSettingsHistoryBased'
      - $ref: '#/components/schemas/BehaviorRuleSettingsAnomalousIP_allOf'
    BehaviorRuleSettingsAnomalousLocation:
      allOf:
      - $ref: '#/components/schemas/BehaviorRuleSettingsHistoryBased'
      - $ref: '#/components/schemas/BehaviorRuleSettingsAnomalousLocation_allOf'
    BehaviorRuleSettingsHistoryBased:
      allOf:
      - $ref: '#/components/schemas/BehaviorRuleSettings'
      - $ref: '#/components/schemas/Behavior_Detection_Rule_Settings_based_on_Event_History'
    BehaviorRuleSettingsVelocity:
      allOf:
      - $ref: '#/components/schemas/BehaviorRuleSettings'
      - $ref: '#/components/schemas/Behavior_Detection_Rule_Settings_based_on_device_velocity_in_kilometers_per_hour_'
    BehaviorRuleType:
      enum:
      - ANOMALOUS_DEVICE
      - ANOMALOUS_IP
      - ANOMALOUS_LOCATION
      - VELOCITY
      type: string
    BehaviorRuleVelocity:
      allOf:
      - $ref: '#/components/schemas/BehaviorRule'
      - $ref: '#/components/schemas/BehaviorRuleVelocity_allOf'
    BookmarkApplication:
      allOf:
      - $ref: '#/components/schemas/Application'
      - $ref: '#/components/schemas/BookmarkApplication_allOf'
      x-okta-defined-as:
        name: bookmark
    BookmarkApplicationSettings:
      allOf:
      - $ref: '#/components/schemas/ApplicationSettings'
      - $ref: '#/components/schemas/BookmarkApplicationSettings_allOf'
    BookmarkApplicationSettingsApplication:
      properties:
        requestIntegration:
          type: boolean
        url:
          type: string
      type: object
    BouncesRemoveListError:
      example:
        reason: reason
        emailAddress: emailAddress
      properties:
        emailAddress:
          type: string
        reason:
          type: string
      type: object
    BouncesRemoveListObj:
      example:
        emailAddresses:
        - emailAddresses
        - emailAddresses
      properties:
        emailAddresses:
          items:
            type: string
          type: array
      type: object
    BouncesRemoveListResult:
      example:
        errors:
        - reason: reason
          emailAddress: emailAddress
        - reason: reason
          emailAddress: emailAddress
      properties:
        errors:
          items:
            $ref: '#/components/schemas/BouncesRemoveListError'
          type: array
      type: object
    Brand:
      example:
        agreeToCustomPrivacyPolicy: true
        defaultApp:
          appInstanceId: appInstanceId
          appLinkName: appLinkName
        isDefault: true
        removePoweredByOkta: true
        _links:
          themes:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          self:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
        name: name
        id: id
        locale: locale
        customPrivacyPolicyUrl: customPrivacyPolicyUrl
      properties:
        agreeToCustomPrivacyPolicy:
          type: boolean
        customPrivacyPolicyUrl:
          type: string
        defaultApp:
          $ref: '#/components/schemas/Brand_defaultApp'
        id:
          readOnly: true
          type: string
        isDefault:
          readOnly: true
          type: boolean
        locale:
          description: "The language specified as an [IETF BCP 47 language tag](https://datatracker.ietf.org/doc/html/rfc5646)."
          type: string
        name:
          type: string
        removePoweredByOkta:
          type: boolean
        _links:
          $ref: '#/components/schemas/Brand__links'
      type: object
    BrandDomain:
      example:
        _links:
          domain:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          self:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          brand:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
        domainId: domainId
      properties:
        domainId:
          readOnly: true
          type: string
        _links:
          $ref: '#/components/schemas/BrandDomain__links'
      type: object
    BrandDomains:
      items:
        $ref: '#/components/schemas/DomainResponse'
      title: BrandDomains
      type: array
    BrandRequest:
      example:
        agreeToCustomPrivacyPolicy: true
        removePoweredByOkta: true
        name: name
        customPrivacyPolicyUrl: customPrivacyPolicyUrl
      properties:
        agreeToCustomPrivacyPolicy:
          type: boolean
        customPrivacyPolicyUrl:
          type: string
        name:
          type: string
        removePoweredByOkta:
          type: boolean
      type: object
    BrowserPluginApplication:
      allOf:
      - $ref: '#/components/schemas/Application'
      - $ref: '#/components/schemas/BrowserPluginApplication_allOf'
    BulkDeleteRequestBody:
      example:
        entityType: USERS
        profiles:
        - externalId: externalId
        - externalId: externalId
      properties:
        entityType:
          enum:
          - USERS
          type: string
        profiles:
          items:
            $ref: '#/components/schemas/IdentitySourceUserProfileForDelete'
          type: array
      type: object
    BulkUpsertRequestBody:
      example:
        entityType: USERS
        profiles:
        - firstName: firstName
          lastName: lastName
          mobilePhone: mobilePhone
          secondEmail: secondEmail
          userName: userName
          email: email
          homeAddress: homeAddress
        - firstName: firstName
          lastName: lastName
          mobilePhone: mobilePhone
          secondEmail: secondEmail
          userName: userName
          email: email
          homeAddress: homeAddress
      properties:
        entityType:
          enum:
          - USERS
          type: string
        profiles:
          items:
            $ref: '#/components/schemas/IdentitySourceUserProfileForUpsert'
          type: array
      type: object
    CAPTCHAInstance:
      description: ""
      example:
        siteKey: siteKey
        secretKey: secretKey
        _links:
          self:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
        name: name
        id: id
        type: null
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string
        secretKey:
          type: string
          writeOnly: true
        siteKey:
          type: string
        type:
          $ref: '#/components/schemas/CAPTCHAType'
        _links:
          $ref: '#/components/schemas/ApiToken__link'
      title: CAPTCHAInstance
      type: object
    CAPTCHAType:
      enum:
      - HCAPTCHA
      - RECAPTCHA_V2
      type: string
    CallUserFactor:
      allOf:
      - $ref: '#/components/schemas/UserFactor'
      - $ref: '#/components/schemas/CallUserFactor_allOf'
    CallUserFactorProfile:
      properties:
        phoneExtension:
          type: string
        phoneNumber:
          type: string
      type: object
    CapabilitiesCreateObject:
      example:
        lifecycleCreate:
          status: null
      properties:
        lifecycleCreate:
          $ref: '#/components/schemas/LifecycleCreateSettingObject'
      type: object
    CapabilitiesObject:
      example:
        create:
          lifecycleCreate:
            status: null
        update:
          password:
            seed: null
            change: null
            status: null
          profile:
            status: null
          lifecycleDeactivate:
            status: null
      properties:
        create:
          $ref: '#/components/schemas/CapabilitiesCreateObject'
        update:
          $ref: '#/components/schemas/CapabilitiesUpdateObject'
      type: object
    CapabilitiesUpdateObject:
      example:
        password:
          seed: null
          change: null
          status: null
        profile:
          status: null
        lifecycleDeactivate:
          status: null
      properties:
        lifecycleDeactivate:
          $ref: '#/components/schemas/LifecycleDeactivateSettingObject'
        password:
          $ref: '#/components/schemas/PasswordSettingObject'
        profile:
          $ref: '#/components/schemas/ProfileSettingObject'
      type: object
    CatalogApplication:
      example:
        features:
        - features
        - features
        lastUpdated: 2000-01-23T04:56:07.000+00:00
        website: website
        verificationStatus: verificationStatus
        _links:
          key: "{}"
        displayName: displayName
        name: name
        description: description
        id: id
        category: category
        signOnModes:
        - signOnModes
        - signOnModes
        status: null
      properties:
        category:
          type: string
        description:
          type: string
        displayName:
          type: string
        features:
          items:
            type: string
          type: array
        id:
          readOnly: true
          type: string
        lastUpdated:
          format: date-time
          readOnly: true
          type: string
        name:
          type: string
        signOnModes:
          items:
            type: string
          type: array
        status:
          $ref: '#/components/schemas/CatalogApplicationStatus'
        verificationStatus:
          type: string
        website:
          type: string
        _links:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
      type: object
    CatalogApplicationStatus:
      enum:
      - ACTIVE
      - INACTIVE
      type: string
    ChangeEnum:
      enum:
      - CHANGE
      - KEEP_EXISTING
      type: string
    ChangePasswordRequest:
      example:
        oldPassword:
          hook:
            type: type
          value: value
          hash:
            salt: salt
            saltOrder: saltOrder
            workFactor: 0
            value: value
            algorithm: null
        newPassword:
          hook:
            type: type
          value: value
          hash:
            salt: salt
            saltOrder: saltOrder
            workFactor: 0
            value: value
            algorithm: null
      properties:
        newPassword:
          $ref: '#/components/schemas/PasswordCredential'
        oldPassword:
          $ref: '#/components/schemas/PasswordCredential'
      type: object
    ChannelBinding:
      example:
        style: style
        required: null
      properties:
        required:
          $ref: '#/components/schemas/RequiredEnum'
        style:
          type: string
      type: object
    ClientPolicyCondition:
      properties:
        include:
          items:
            type: string
          type: array
      type: object
    Compliance:
      example:
        fips: null
      properties:
        fips:
          $ref: '#/components/schemas/FipsEnum'
      type: object
    ContextPolicyRuleCondition:
      allOf:
      - $ref: '#/components/schemas/DevicePolicyRuleCondition'
      - $ref: '#/components/schemas/ContextPolicyRuleCondition_allOf'
    CreateBrandDomainRequest:
      example:
        domainId: domainId
      properties:
        domainId:
          type: string
      title: CreateBrandDomainRequest
      type: object
    CreateBrandRequest:
      example:
        name: name
      properties:
        name:
          type: string
      title: CreateBrandRequest
      type: object
    CreateSessionRequest:
      example:
        sessionToken: sessionToken
      properties:
        sessionToken:
          type: string
      type: object
    CreateUserRequest:
      example:
        credentials:
          password:
            hook:
              type: type
            value: value
            hash:
              salt: salt
              saltOrder: saltOrder
              workFactor: 0
              value: value
              algorithm: null
          provider:
            name: name
            type: null
          recovery_question:
            answer: answer
            question: question
        groupIds:
        - groupIds
        - groupIds
        profile:
          profileUrl: profileUrl
          lastName: lastName
          zipCode: zipCode
          preferredLanguage: preferredLanguage
          city: city
          displayName: displayName
          timezone: timezone
          locale: locale
          login: login
          title: title
          employeeNumber: employeeNumber
          division: division
          honorificSuffix: honorificSuffix
          countryCode: countryCode
          state: state
          department: department
          email: email
          manager: manager
          costCenter: costCenter
          nickName: nickName
          secondEmail: secondEmail
          honorificPrefix: honorificPrefix
          managerId: managerId
          firstName: firstName
          primaryPhone: primaryPhone
          postalAddress: postalAddress
          mobilePhone: mobilePhone
          streetAddress: streetAddress
          organization: organization
          middleName: middleName
          userType: userType
        type:
          lastUpdated: 2000-01-23T04:56:07.000+00:00
          lastUpdatedBy: lastUpdatedBy
          default: true
          createdBy: createdBy
          _links:
            key: "{}"
          created: 2000-01-23T04:56:07.000+00:00
          displayName: displayName
          name: name
          description: description
          id: id
      properties:
        credentials:
          $ref: '#/components/schemas/UserCredentials'
        groupIds:
          items:
            type: string
          type: array
        profile:
          $ref: '#/components/schemas/UserProfile'
        type:
          $ref: '#/components/schemas/UserType'
      required:
      - profile
      type: object
    Csr:
      example:
        kty: kty
        csr: csr
        created: 2000-01-23T04:56:07.000+00:00
        id: id
      properties:
        created:
          format: date-time
          readOnly: true
          type: string
        csr:
          readOnly: true
          type: string
        id:
          readOnly: true
          type: string
        kty:
          readOnly: true
          type: string
      type: object
    CsrMetadata:
      example:
        subject:
          commonName: commonName
          localityName: localityName
          organizationName: organizationName
          organizationalUnitName: organizationalUnitName
          countryName: countryName
          stateOrProvinceName: stateOrProvinceName
        subjectAltNames:
          dnsNames:
          - dnsNames
          - dnsNames
      properties:
        subject:
          $ref: '#/components/schemas/CsrMetadataSubject'
        subjectAltNames:
          $ref: '#/components/schemas/CsrMetadataSubjectAltNames'
      type: object
    CsrMetadataSubject:
      example:
        commonName: commonName
        localityName: localityName
        organizationName: organizationName
        organizationalUnitName: organizationalUnitName
        countryName: countryName
        stateOrProvinceName: stateOrProvinceName
      properties:
        commonName:
          type: string
        countryName:
          type: string
        localityName:
          type: string
        organizationalUnitName:
          type: string
        organizationName:
          type: string
        stateOrProvinceName:
          type: string
      type: object
    CsrMetadataSubjectAltNames:
      example:
        dnsNames:
        - dnsNames
        - dnsNames
      properties:
        dnsNames:
          items:
            type: string
          type: array
      type: object
    CustomHotpUserFactor:
      allOf:
      - $ref: '#/components/schemas/UserFactor'
      - $ref: '#/components/schemas/CustomHotpUserFactor_allOf'
    CustomHotpUserFactorProfile:
      properties:
        sharedSecret:
          type: string
      type: object
    CustomizablePage:
      example:
        pageContent: pageContent
      properties:
        pageContent:
          type: string
      type: object
    DNSRecord:
      example:
        fqdn: fqdn
        recordType: null
        values:
        - values
        - values
        expiration: expiration
      properties:
        expiration:
          type: string
        fqdn:
          type: string
        recordType:
          $ref: '#/components/schemas/DNSRecordType'
        values:
          items:
            type: string
          type: array
      type: object
    DNSRecordType:
      enum:
      - CNAME
      - TXT
      type: string
    Device:
      example:
        resourceAlternateId: resourceAlternateId
        lastUpdated: 2000-01-23T04:56:07.000+00:00
        resourceDisplayName:
          sensitive: true
          value: value
        resourceId: resourceId
        _links:
          suspend:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          unsuspend:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          activate:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          self:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          users:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          deactivate:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
        created: 2000-01-23T04:56:07.000+00:00
        profile:
          meid: meid
          serialNumber: serialNumber
          displayName: displayName
          registered: true
          platform: null
          manufacturer: manufacturer
          sid: sid
          osVersion: osVersion
          imei: imei
          model: model
          udid: udid
          secureHardwarePresent: true
          tpmPublicKeyHash: tpmPublicKeyHash
        id: id
        resourceType: UDDevice
        status: null
      properties:
        created:
          description: Timestamp when the device was created
          format: date-time
          readOnly: true
          type: string
        id:
          description: Unique key for the device
          readOnly: true
          type: string
        lastUpdated:
          description: Timestamp when the device was last updated
          format: date-time
          readOnly: true
          type: string
        profile:
          $ref: '#/components/schemas/DeviceProfile'
        resourceAlternateId:
          readOnly: true
          type: string
        resourceDisplayName:
          $ref: '#/components/schemas/DeviceDisplayName'
        resourceId:
          description: Alternate key for the `id`
          readOnly: true
          type: string
        resourceType:
          default: UDDevice
          readOnly: true
          type: string
        status:
          $ref: '#/components/schemas/DeviceStatus'
        _links:
          $ref: '#/components/schemas/Device__links'
      type: object
    DeviceAccessPolicyRuleCondition:
      allOf:
      - $ref: '#/components/schemas/DevicePolicyRuleCondition'
      - $ref: '#/components/schemas/DeviceAccessPolicyRuleCondition_allOf'
    DeviceAssurance:
      example:
        lastUpdatedBy: lastUpdatedBy
        _links:
          self:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
        platform: null
        lastUpdatedDate: lastUpdatedDate
        createdDate: createdDate
        osVersion:
          minimum: minimum
        createdBy: createdBy
        name: name
        jailbreak: true
        diskEncryptionType:
          include:
          - null
          - null
        id: id
        screenLockType:
          include:
          - null
          - null
        secureHardwarePresent: true
      properties:
        createdBy:
          readOnly: true
          type: string
        createdDate:
          readOnly: true
          type: string
        diskEncryptionType:
          $ref: '#/components/schemas/DeviceAssurance_diskEncryptionType'
        id:
          readOnly: true
          type: string
        jailbreak:
          type: boolean
        lastUpdatedBy:
          readOnly: true
          type: string
        lastUpdatedDate:
          readOnly: true
          type: string
        name:
          description: Display name of the Device Assurance Policy
          type: string
        osVersion:
          $ref: '#/components/schemas/VersionObject'
        platform:
          $ref: '#/components/schemas/Platform'
        screenLockType:
          $ref: '#/components/schemas/DeviceAssurance_screenLockType'
        secureHardwarePresent:
          type: boolean
        _links:
          $ref: '#/components/schemas/ApiToken__link'
      title: DeviceAssurance
      type: object
    DeviceDisplayName:
      example:
        sensitive: true
        value: value
      properties:
        sensitive:
          type: boolean
        value:
          type: string
      type: object
    DevicePlatform:
      description: OS platform of the device
      enum:
      - ANDROID
      - IOS
      - MACOS
      - WINDOWS
      type: string
    DevicePolicyMDMFramework:
      enum:
      - AFW
      - NATIVE
      - SAFE
      type: string
    DevicePolicyPlatformType:
      enum:
      - ANDROID
      - IOS
      - OSX
      - WINDOWS
      type: string
    DevicePolicyRuleCondition:
      properties:
        migrated:
          type: boolean
        platform:
          $ref: '#/components/schemas/DevicePolicyRuleConditionPlatform'
        rooted:
          type: boolean
        trustLevel:
          $ref: '#/components/schemas/DevicePolicyTrustLevel'
      type: object
    DevicePolicyRuleConditionPlatform:
      properties:
        supportedMDMFrameworks:
          items:
            $ref: '#/components/schemas/DevicePolicyMDMFramework'
          type: array
        types:
          items:
            $ref: '#/components/schemas/DevicePolicyPlatformType'
          type: array
      type: object
    DevicePolicyTrustLevel:
      enum:
      - ANY
      - TRUSTED
      type: string
    DeviceProfile:
      example:
        meid: meid
        serialNumber: serialNumber
        displayName: displayName
        registered: true
        platform: null
        manufacturer: manufacturer
        sid: sid
        osVersion: osVersion
        imei: imei
        model: model
        udid: udid
        secureHardwarePresent: true
        tpmPublicKeyHash: tpmPublicKeyHash
      properties:
        displayName:
          description: Display name of the device
          maxLength: 255
          minLength: 1
          type: string
        imei:
          description: International Mobile Equipment Identity of the device
          maxLength: 17
          minLength: 14
          type: string
        manufacturer:
          description: Name of the manufacturer of the device
          maxLength: 127
          type: string
        meid:
          description: Mobile equipment identifier of the device
          maxLength: 14
          type: string
        model:
          description: Model of the device
          maxLength: 127
          type: string
        osVersion:
          description: Version of the device OS
          maxLength: 127
          type: string
        platform:
          $ref: '#/components/schemas/DevicePlatform'
        registered:
          description: Indicates if the device is registered at Okta
          type: boolean
        secureHardwarePresent:
          description: Indicates if the device constains a secure hardware functionality
          type: boolean
        serialNumber:
          description: Serial number of the device
          maxLength: 127
          type: string
        sid:
          description: Windows Security identifier of the device
          maxLength: 256
          type: string
        tpmPublicKeyHash:
          description: Windows Trsted Platform Module hash value
          type: string
        udid:
          description: macOS Unique Device identifier of the device
          maxLength: 47
          type: string
      required:
      - displayName
      - platform
      - registered
      type: object
    DeviceStatus:
      enum:
      - ACTIVE
      - CREATED
      - DEACTIVATED
      - SUSPENDED
      type: string
    DiskEncryptionType:
      enum:
      - ALL_INTERNAL_VOLUMES
      - FULL
      - USER
      type: string
    Domain:
      example:
        certificateSourceType: null
        brandId: brandId
        dnsRecords:
        - fqdn: fqdn
          recordType: null
          values:
          - values
          - values
          expiration: expiration
        - fqdn: fqdn
          recordType: null
          values:
          - values
          - values
          expiration: expiration
        domain: domain
        publicCertificate:
          subject: subject
          fingerprint: fingerprint
          expiration: expiration
        id: id
        validationStatus: null
      properties:
        brandId:
          type: string
        certificateSourceType:
          $ref: '#/components/schemas/DomainCertificateSourceType'
        dnsRecords:
          items:
            $ref: '#/components/schemas/DNSRecord'
          type: array
        domain:
          type: string
        id:
          type: string
        publicCertificate:
          $ref: '#/components/schemas/DomainCertificateMetadata'
        validationStatus:
          $ref: '#/components/schemas/DomainValidationStatus'
      type: object
    DomainCertificate:
      example:
        privateKey: privateKey
        certificateChain: certificateChain
        certificate: certificate
        type: null
      properties:
        certificate:
          type: string
        certificateChain:
          type: string
        privateKey:
          type: string
        type:
          $ref: '#/components/schemas/DomainCertificateType'
      type: object
    DomainCertificateMetadata:
      example:
        subject: subject
        fingerprint: fingerprint
        expiration: expiration
      properties:
        expiration:
          type: string
        fingerprint:
          type: string
        subject:
          type: string
      type: object
    DomainCertificateSourceType:
      enum:
      - MANUAL
      - OKTA_MANAGED
      type: string
    DomainCertificateType:
      enum:
      - PEM
      type: string
    DomainLinks:
      example:
        certificate:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
        self:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
        verify:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
        brand:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
      properties:
        brand:
          $ref: '#/components/schemas/HrefObject'
        certificate:
          $ref: '#/components/schemas/HrefObject'
        self:
          $ref: '#/components/schemas/HrefObject'
        verify:
          $ref: '#/components/schemas/HrefObject'
      type: object
    DomainListResponse:
      example:
        domains:
        - _links:
            certificate:
              hints:
                allow:
                - null
                - null
              name: name
              href: href
              type: type
            self:
              hints:
                allow:
                - null
                - null
              name: name
              href: href
              type: type
            verify:
              hints:
                allow:
                - null
                - null
              name: name
              href: href
              type: type
            brand:
              hints:
                allow:
                - null
                - null
              name: name
              href: href
              type: type
          certificateSourceType: null
          brandId: brandId
          dnsRecords:
          - fqdn: fqdn
            recordType: null
            values:
            - values
            - values
            expiration: expiration
          - fqdn: fqdn
            recordType: null
            values:
            - values
            - values
            expiration: expiration
          domain: domain
          publicCertificate:
            subject: subject
            fingerprint: fingerprint
            expiration: expiration
          id: id
          validationStatus: null
        - _links:
            certificate:
              hints:
                allow:
                - null
                - null
              name: name
              href: href
              type: type
            self:
              hints:
                allow:
                - null
                - null
              name: name
              href: href
              type: type
            verify:
              hints:
                allow:
                - null
                - null
              name: name
              href: href
              type: type
            brand:
              hints:
                allow:
                - null
                - null
              name: name
              href: href
              type: type
          certificateSourceType: null
          brandId: brandId
          dnsRecords:
          - fqdn: fqdn
            recordType: null
            values:
            - values
            - values
            expiration: expiration
          - fqdn: fqdn
            recordType: null
            values:
            - values
            - values
            expiration: expiration
          domain: domain
          publicCertificate:
            subject: subject
            fingerprint: fingerprint
            expiration: expiration
          id: id
          validationStatus: null
      properties:
        domains:
          items:
            $ref: '#/components/schemas/DomainResponse'
          type: array
      type: object
    DomainResponse:
      example:
        _links:
          certificate:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          self:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          verify:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          brand:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
        certificateSourceType: null
        brandId: brandId
        dnsRecords:
        - fqdn: fqdn
          recordType: null
          values:
          - values
          - values
          expiration: expiration
        - fqdn: fqdn
          recordType: null
          values:
          - values
          - values
          expiration: expiration
        domain: domain
        publicCertificate:
          subject: subject
          fingerprint: fingerprint
          expiration: expiration
        id: id
        validationStatus: null
      properties:
        brandId:
          type: string
        certificateSourceType:
          $ref: '#/components/schemas/DomainCertificateSourceType'
        dnsRecords:
          items:
            $ref: '#/components/schemas/DNSRecord'
          type: array
        domain:
          type: string
        id:
          type: string
        publicCertificate:
          $ref: '#/components/schemas/DomainCertificateMetadata'
        validationStatus:
          $ref: '#/components/schemas/DomainValidationStatus'
        _links:
          $ref: '#/components/schemas/DomainLinks'
      type: object
    DomainValidationStatus:
      enum:
      - COMPLETED
      - IN_PROGRESS
      - NOT_STARTED
      - VERIFIED
      type: string
    Duration:
      properties:
        number:
          type: integer
        unit:
          type: string
      type: object
    EmailContent:
      properties:
        body:
          description: "The email's HTML body. May contain [variable references](https://velocity.apache.org/engine/1.7/user-guide.html#references)."
          type: string
        subject:
          description: "The email's subject. May contain [variable references](https://velocity.apache.org/engine/1.7/user-guide.html#references)."
          type: string
      required:
      - body
      - subject
      type: object
    EmailCustomization:
      allOf:
      - $ref: '#/components/schemas/EmailContent'
      - $ref: '#/components/schemas/EmailCustomization_allOf'
    EmailDefaultContent:
      allOf:
      - $ref: '#/components/schemas/EmailContent'
      - $ref: '#/components/schemas/EmailDefaultContent_allOf'
    EmailDomain:
      allOf:
      - $ref: '#/components/schemas/BaseEmailDomain'
      example:
        domain: domain
      properties:
        domain:
          type: string
      required:
      - domain
      type: object
    EmailDomainListResponse:
      example:
        email-domains:
        - dnsValidationRecords:
          - fqdn: fqdn
            recordType: null
            values:
            - values
            - values
            expiration: expiration
          - fqdn: fqdn
            recordType: null
            values:
            - values
            - values
            expiration: expiration
          domain: domain
          id: id
          validationStatus: null
        - dnsValidationRecords:
          - fqdn: fqdn
            recordType: null
            values:
            - values
            - values
            expiration: expiration
          - fqdn: fqdn
            recordType: null
            values:
            - values
            - values
            expiration: expiration
          domain: domain
          id: id
          validationStatus: null
      properties:
        email-domains:
          items:
            $ref: '#/components/schemas/EmailDomainResponse'
          type: array
      type: object
    EmailDomainResponse:
      allOf:
      - $ref: '#/components/schemas/BaseEmailDomain'
      example:
        dnsValidationRecords:
        - fqdn: fqdn
          recordType: null
          values:
          - values
          - values
          expiration: expiration
        - fqdn: fqdn
          recordType: null
          values:
          - values
          - values
          expiration: expiration
        domain: domain
        id: id
        validationStatus: null
      properties:
        dnsValidationRecords:
          items:
            $ref: '#/components/schemas/DNSRecord'
          type: array
        domain:
          type: string
        id:
          type: string
        validationStatus:
          $ref: '#/components/schemas/EmailDomainStatus'
      type: object
    EmailDomainStatus:
      enum:
      - DELETED
      - ERROR
      - NOT_STARTED
      - POLLING
      - VERIFIED
      type: string
    EmailPreview:
      example:
        _links:
          template:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          contentSource:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          defaultContent:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          test:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          self:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
        subject: subject
        body: body
      properties:
        body:
          description: The email's HTML body.
          readOnly: true
          type: string
        subject:
          description: The email's subject.
          readOnly: true
          type: string
        _links:
          $ref: '#/components/schemas/EmailPreview__links'
      type: object
    EmailSettings:
      example:
        recipients: ALL_USERS
      properties:
        recipients:
          enum:
          - ALL_USERS
          - ADMINS_ONLY
          - NO_USERS
          type: string
      required:
      - recipients
      type: object
    EmailTemplate:
      example:
        _embedded:
          customizationCount: 0
          settings:
            recipients: ALL_USERS
        _links:
          settings:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          defaultContent:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          test:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          self:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          customizations:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
        name: name
      properties:
        name:
          description: The name of this email template.
          readOnly: true
          type: string
        _embedded:
          $ref: '#/components/schemas/EmailTemplate__embedded'
        _links:
          $ref: '#/components/schemas/EmailTemplate__links'
      type: object
    EmailTemplateTouchPointVariant:
      enum:
      - FULL_THEME
      - OKTA_DEFAULT
      type: string
    EmailUserFactor:
      allOf:
      - $ref: '#/components/schemas/UserFactor'
      - $ref: '#/components/schemas/EmailUserFactor_allOf'
    EmailUserFactorProfile:
      properties:
        email:
          type: string
      type: object
    EnabledStatus:
      enum:
      - DISABLED
      - ENABLED
      type: string
    EndUserDashboardTouchPointVariant:
      enum:
      - FULL_THEME
      - LOGO_ON_FULL_WHITE_BACKGROUND
      - OKTA_DEFAULT
      - WHITE_LOGO_BACKGROUND
      type: string
    Error:
      properties:
        errorCauses:
          items:
            $ref: '#/components/schemas/Error_errorCauses_inner'
          type: array
        errorCode:
          description: An Okta code for this type of error
          type: string
        errorId:
          description: A unique identifier for this error. This can be used by Okta
            Support to help with troubleshooting.
          type: string
        errorLink:
          description: An Okta code for this type of error
          type: string
        errorSummary:
          description: A short description of what caused this error. Sometimes this
            contains dynamically-generated information about your specific error.
          type: string
      title: Error
      type: object
    ErrorPageTouchPointVariant:
      enum:
      - BACKGROUND_IMAGE
      - BACKGROUND_SECONDARY_COLOR
      - OKTA_DEFAULT
      type: string
    EventHook:
      example:
        lastUpdated: 2000-01-23T04:56:07.000+00:00
        createdBy: createdBy
        verificationStatus: null
        _links:
          key: "{}"
        created: 2000-01-23T04:56:07.000+00:00
        channel:
          type: null
          config:
            headers:
            - value: value
              key: key
            - value: value
              key: key
            authScheme:
              type: null
              value: value
              key: key
            uri: uri
          version: version
        name: name
        id: id
        events:
          type: null
          items:
          - items
          - items
        status: null
      properties:
        channel:
          $ref: '#/components/schemas/EventHookChannel'
        created:
          format: date-time
          readOnly: true
          type: string
        createdBy:
          type: string
        events:
          $ref: '#/components/schemas/EventSubscriptions'
        id:
          readOnly: true
          type: string
        lastUpdated:
          format: date-time
          readOnly: true
          type: string
        name:
          type: string
        status:
          $ref: '#/components/schemas/LifecycleStatus'
        verificationStatus:
          $ref: '#/components/schemas/EventHookVerificationStatus'
        _links:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
      type: object
    EventHookChannel:
      example:
        type: null
        config:
          headers:
          - value: value
            key: key
          - value: value
            key: key
          authScheme:
            type: null
            value: value
            key: key
          uri: uri
        version: version
      properties:
        config:
          $ref: '#/components/schemas/EventHookChannelConfig'
        type:
          $ref: '#/components/schemas/EventHookChannelType'
        version:
          type: string
      type: object
    EventHookChannelConfig:
      example:
        headers:
        - value: value
          key: key
        - value: value
          key: key
        authScheme:
          type: null
          value: value
          key: key
        uri: uri
      properties:
        authScheme:
          $ref: '#/components/schemas/EventHookChannelConfigAuthScheme'
        headers:
          items:
            $ref: '#/components/schemas/EventHookChannelConfigHeader'
          type: array
        uri:
          type: string
      type: object
    EventHookChannelConfigAuthScheme:
      example:
        type: null
        value: value
        key: key
      properties:
        key:
          type: string
        type:
          $ref: '#/components/schemas/EventHookChannelConfigAuthSchemeType'
        value:
          type: string
      type: object
    EventHookChannelConfigAuthSchemeType:
      enum:
      - HEADER
      type: string
    EventHookChannelConfigHeader:
      example:
        value: value
        key: key
      properties:
        key:
          type: string
        value:
          type: string
      type: object
    EventHookChannelType:
      enum:
      - HTTP
      type: string
    EventHookVerificationStatus:
      enum:
      - UNVERIFIED
      - VERIFIED
      type: string
    EventSubscriptionType:
      enum:
      - EVENT_TYPE
      - FLOW_EVENT
      type: string
    EventSubscriptions:
      discriminator:
        propertyName: type
      example:
        type: null
        items:
        - items
        - items
      properties:
        items:
          items:
            type: string
          type: array
        type:
          $ref: '#/components/schemas/EventSubscriptionType'
      type: object
    FCMConfiguration:
      properties:
        fileName:
          description: (Optional) File name for Admin Console display
          type: string
        projectId:
          description: Project ID of FCM configuration
          readOnly: true
          type: string
        serviceAccountJson:
          description: "JSON containing the private service account key and service\
            \ account details. See [Creating and managing service account keys](https://cloud.google.com/iam/docs/creating-managing-service-account-keys)\
            \ for more information on creating service account keys in JSON."
          type: object
          writeOnly: true
    FCMPushProvider:
      allOf:
      - $ref: '#/components/schemas/PushProvider'
      - $ref: '#/components/schemas/FCMPushProvider_allOf'
    FactorProvider:
      enum:
      - CUSTOM
      - DUO
      - FIDO
      - GOOGLE
      - OKTA
      - RSA
      - SYMANTEC
      - YUBICO
      type: string
    FactorResultType:
      enum:
      - CANCELLED
      - CHALLENGE
      - ERROR
      - FAILED
      - PASSCODE_REPLAYED
      - REJECTED
      - SUCCESS
      - TIMEOUT
      - TIME_WINDOW_EXCEEDED
      - WAITING
      type: string
    FactorStatus:
      enum:
      - ACTIVE
      - DISABLED
      - ENROLLED
      - EXPIRED
      - INACTIVE
      - NOT_SETUP
      - PENDING_ACTIVATION
      type: string
    FactorType:
      enum:
      - call
      - email
      - hotp
      - push
      - question
      - sms
      - token
      - token:hardware
      - token:hotp
      - token:software:totp
      - u2f
      - web
      - webauthn
      type: string
    Feature:
      example:
        stage:
          state: null
          value: null
        _links:
          key: "{}"
        name: name
        description: description
        id: id
        type: null
        status: null
      properties:
        description:
          type: string
        id:
          readOnly: true
          type: string
        name:
          type: string
        stage:
          $ref: '#/components/schemas/FeatureStage'
        status:
          $ref: '#/components/schemas/EnabledStatus'
        type:
          $ref: '#/components/schemas/FeatureType'
        _links:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
      type: object
    FeatureStage:
      example:
        state: null
        value: null
      properties:
        state:
          $ref: '#/components/schemas/FeatureStageState'
        value:
          $ref: '#/components/schemas/FeatureStageValue'
      type: object
    FeatureStageState:
      enum:
      - CLOSED
      - OPEN
      type: string
    FeatureStageValue:
      enum:
      - BETA
      - EA
      type: string
    FeatureType:
      enum:
      - self-service
      type: string
    FipsEnum:
      enum:
      - OPTIONAL
      - REQUIRED
      type: string
    ForgotPasswordResponse:
      example:
        resetPasswordUrl: resetPasswordUrl
      properties:
        resetPasswordUrl:
          readOnly: true
          type: string
      type: object
    GrantOrTokenStatus:
      enum:
      - ACTIVE
      - REVOKED
      type: string
    GrantTypePolicyRuleCondition:
      properties:
        include:
          items:
            type: string
          type: array
      type: object
    Group:
      example:
        lastUpdated: 2000-01-23T04:56:07.000+00:00
        lastMembershipUpdated: 2000-01-23T04:56:07.000+00:00
        _embedded:
          key: "{}"
        _links:
          logo:
          - hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          - hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          self:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          source:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          users:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          apps:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
        created: 2000-01-23T04:56:07.000+00:00
        profile:
          name: name
          description: description
        objectClass:
        - objectClass
        - objectClass
        id: id
        type: null
      properties:
        created:
          format: date-time
          readOnly: true
          type: string
        id:
          readOnly: true
          type: string
        lastMembershipUpdated:
          format: date-time
          readOnly: true
          type: string
        lastUpdated:
          format: date-time
          readOnly: true
          type: string
        objectClass:
          items:
            type: string
          readOnly: true
          type: array
        profile:
          $ref: '#/components/schemas/GroupProfile'
        type:
          $ref: '#/components/schemas/GroupType'
        _embedded:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
        _links:
          $ref: '#/components/schemas/Group__links'
      type: object
    GroupCondition:
      properties:
        exclude:
          items:
            type: string
          type: array
        include:
          items:
            type: string
          type: array
      type: object
    GroupOwner:
      example:
        lastUpdated: 2000-01-23T04:56:07.000+00:00
        originType: null
        originId: originId
        displayName: displayName
        id: id
        type: null
        resolved: true
      properties:
        displayName:
          readOnly: true
          type: string
        id:
          readOnly: true
          type: string
        lastUpdated:
          format: date-time
          readOnly: true
          type: string
        originId:
          type: string
        originType:
          $ref: '#/components/schemas/GroupOwnerOriginType'
        resolved:
          type: boolean
        type:
          $ref: '#/components/schemas/GroupOwnerType'
      type: object
    GroupOwnerOriginType:
      enum:
      - APPLICATION
      - OKTA_DIRECTORY
      type: string
    GroupOwnerType:
      enum:
      - GROUP
      - UNKNOWN
      - USER
      type: string
    GroupPolicyRuleCondition:
      properties:
        exclude:
          items:
            type: string
          type: array
        include:
          items:
            type: string
          type: array
      type: object
    GroupProfile:
      example:
        name: name
        description: description
      properties:
        description:
          type: string
        name:
          type: string
      type: object
      x-okta-extensible: true
    GroupRule:
      example:
        lastUpdated: 2000-01-23T04:56:07.000+00:00
        created: 2000-01-23T04:56:07.000+00:00
        name: name
        id: id
        conditions:
          expression:
            type: type
            value: value
          people:
            groups:
              include:
              - include
              - include
              exclude:
              - exclude
              - exclude
            users:
              include:
              - include
              - include
              exclude:
              - exclude
              - exclude
        type: type
        actions:
          assignUserToGroups:
            groupIds:
            - groupIds
            - groupIds
        status: null
      properties:
        actions:
          $ref: '#/components/schemas/GroupRuleAction'
        conditions:
          $ref: '#/components/schemas/GroupRuleConditions'
        created:
          format: date-time
          readOnly: true
          type: string
        id:
          readOnly: true
          type: string
        lastUpdated:
          format: date-time
          readOnly: true
          type: string
        name:
          type: string
        status:
          $ref: '#/components/schemas/GroupRuleStatus'
        type:
          type: string
      type: object
    GroupRuleAction:
      example:
        assignUserToGroups:
          groupIds:
          - groupIds
          - groupIds
      properties:
        assignUserToGroups:
          $ref: '#/components/schemas/GroupRuleGroupAssignment'
      type: object
    GroupRuleConditions:
      example:
        expression:
          type: type
          value: value
        people:
          groups:
            include:
            - include
            - include
            exclude:
            - exclude
            - exclude
          users:
            include:
            - include
            - include
            exclude:
            - exclude
            - exclude
      properties:
        expression:
          $ref: '#/components/schemas/GroupRuleExpression'
        people:
          $ref: '#/components/schemas/GroupRulePeopleCondition'
      type: object
    GroupRuleExpression:
      example:
        type: type
        value: value
      properties:
        type:
          type: string
        value:
          type: string
      type: object
    GroupRuleGroupAssignment:
      example:
        groupIds:
        - groupIds
        - groupIds
      properties:
        groupIds:
          items:
            type: string
          type: array
      type: object
    GroupRuleGroupCondition:
      example:
        include:
        - include
        - include
        exclude:
        - exclude
        - exclude
      properties:
        exclude:
          items:
            type: string
          type: array
        include:
          items:
            type: string
          type: array
      type: object
    GroupRulePeopleCondition:
      example:
        groups:
          include:
          - include
          - include
          exclude:
          - exclude
          - exclude
        users:
          include:
          - include
          - include
          exclude:
          - exclude
          - exclude
      properties:
        groups:
          $ref: '#/components/schemas/GroupRuleGroupCondition'
        users:
          $ref: '#/components/schemas/GroupRuleUserCondition'
      type: object
    GroupRuleStatus:
      enum:
      - ACTIVE
      - INACTIVE
      - INVALID
      type: string
    GroupRuleUserCondition:
      example:
        include:
        - include
        - include
        exclude:
        - exclude
        - exclude
      properties:
        exclude:
          items:
            type: string
          type: array
        include:
          items:
            type: string
          type: array
      type: object
    GroupSchema:
      example:
        lastUpdated: lastUpdated
        $schema: $schema
        _links:
          key: "{}"
        created: created
        name: name
        description: description
        id: id
        title: title
        type: type
        definitions:
          custom:
            id: id
            type: type
            properties:
              key:
                minLength: 6
                externalNamespace: externalNamespace
                description: description
                union: null
                title: title
                type: null
                enum:
                - enum
                - enum
                required: true
                master:
                  priority:
                  - type: type
                    value: value
                  - type: type
                    value: value
                  type: null
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                permissions:
                - principal: principal
                  action: action
                - principal: principal
                  action: action
                externalName: externalName
                scope: null
                unique: unique
                mutability: mutability
                items:
                  oneOf:
                  - const: const
                    title: title
                  - const: const
                    title: title
                  type: type
                  enum:
                  - enum
                  - enum
                maxLength: 0
            required:
            - required
            - required
          base:
            id: id
            type: type
            properties:
              name:
                minLength: 6
                externalNamespace: externalNamespace
                description: description
                union: null
                title: title
                type: null
                enum:
                - enum
                - enum
                required: true
                master:
                  priority:
                  - type: type
                    value: value
                  - type: type
                    value: value
                  type: null
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                permissions:
                - principal: principal
                  action: action
                - principal: principal
                  action: action
                externalName: externalName
                scope: null
                unique: unique
                mutability: mutability
                items:
                  oneOf:
                  - const: const
                    title: title
                  - const: const
                    title: title
                  type: type
                  enum:
                  - enum
                  - enum
                maxLength: 0
              description:
                minLength: 6
                externalNamespace: externalNamespace
                description: description
                union: null
                title: title
                type: null
                enum:
                - enum
                - enum
                required: true
                master:
                  priority:
                  - type: type
                    value: value
                  - type: type
                    value: value
                  type: null
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                permissions:
                - principal: principal
                  action: action
                - principal: principal
                  action: action
                externalName: externalName
                scope: null
                unique: unique
                mutability: mutability
                items:
                  oneOf:
                  - const: const
                    title: title
                  - const: const
                    title: title
                  type: type
                  enum:
                  - enum
                  - enum
                maxLength: 0
            required:
            - required
            - required
        properties:
          profile:
            allOf:
            - $ref: $ref
            - $ref: $ref
      properties:
        $schema:
          readOnly: true
          type: string
        created:
          readOnly: true
          type: string
        definitions:
          $ref: '#/components/schemas/GroupSchemaDefinitions'
        description:
          type: string
        id:
          readOnly: true
          type: string
        lastUpdated:
          readOnly: true
          type: string
        name:
          readOnly: true
          type: string
        properties:
          $ref: '#/components/schemas/UserSchemaProperties'
        title:
          type: string
        type:
          readOnly: true
          type: string
        _links:
          additionalProperties:
            type: object
          readOnly: true
          type: object
      type: object
      x-okta-allow-null-property-value-for-updates: true
    GroupSchemaAttribute:
      example:
        minLength: 6
        externalNamespace: externalNamespace
        description: description
        union: null
        title: title
        type: null
        enum:
        - enum
        - enum
        required: true
        master:
          priority:
          - type: type
            value: value
          - type: type
            value: value
          type: null
        oneOf:
        - const: const
          title: title
        - const: const
          title: title
        permissions:
        - principal: principal
          action: action
        - principal: principal
          action: action
        externalName: externalName
        scope: null
        unique: unique
        mutability: mutability
        items:
          oneOf:
          - const: const
            title: title
          - const: const
            title: title
          type: type
          enum:
          - enum
          - enum
        maxLength: 0
      properties:
        description:
          type: string
        enum:
          items:
            type: string
          type: array
        externalName:
          type: string
        externalNamespace:
          type: string
        items:
          $ref: '#/components/schemas/UserSchemaAttributeItems'
        master:
          $ref: '#/components/schemas/UserSchemaAttributeMaster'
        maxLength:
          type: integer
        minLength:
          type: integer
        mutability:
          type: string
        oneOf:
          items:
            $ref: '#/components/schemas/UserSchemaAttributeEnum'
          type: array
        permissions:
          items:
            $ref: '#/components/schemas/UserSchemaAttributePermission'
          type: array
        required:
          type: boolean
        scope:
          $ref: '#/components/schemas/UserSchemaAttributeScope'
        title:
          type: string
        type:
          $ref: '#/components/schemas/UserSchemaAttributeType'
        union:
          $ref: '#/components/schemas/UserSchemaAttributeUnion'
        unique:
          type: string
      type: object
    GroupSchemaBase:
      example:
        id: id
        type: type
        properties:
          name:
            minLength: 6
            externalNamespace: externalNamespace
            description: description
            union: null
            title: title
            type: null
            enum:
            - enum
            - enum
            required: true
            master:
              priority:
              - type: type
                value: value
              - type: type
                value: value
              type: null
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            permissions:
            - principal: principal
              action: action
            - principal: principal
              action: action
            externalName: externalName
            scope: null
            unique: unique
            mutability: mutability
            items:
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              type: type
              enum:
              - enum
              - enum
            maxLength: 0
          description:
            minLength: 6
            externalNamespace: externalNamespace
            description: description
            union: null
            title: title
            type: null
            enum:
            - enum
            - enum
            required: true
            master:
              priority:
              - type: type
                value: value
              - type: type
                value: value
              type: null
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            permissions:
            - principal: principal
              action: action
            - principal: principal
              action: action
            externalName: externalName
            scope: null
            unique: unique
            mutability: mutability
            items:
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              type: type
              enum:
              - enum
              - enum
            maxLength: 0
        required:
        - required
        - required
      properties:
        id:
          readOnly: true
          type: string
        properties:
          $ref: '#/components/schemas/GroupSchemaBaseProperties'
        required:
          items:
            type: string
          type: array
        type:
          type: string
      type: object
    GroupSchemaBaseProperties:
      example:
        name:
          minLength: 6
          externalNamespace: externalNamespace
          description: description
          union: null
          title: title
          type: null
          enum:
          - enum
          - enum
          required: true
          master:
            priority:
            - type: type
              value: value
            - type: type
              value: value
            type: null
          oneOf:
          - const: const
            title: title
          - const: const
            title: title
          permissions:
          - principal: principal
            action: action
          - principal: principal
            action: action
          externalName: externalName
          scope: null
          unique: unique
          mutability: mutability
          items:
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            type: type
            enum:
            - enum
            - enum
          maxLength: 0
        description:
          minLength: 6
          externalNamespace: externalNamespace
          description: description
          union: null
          title: title
          type: null
          enum:
          - enum
          - enum
          required: true
          master:
            priority:
            - type: type
              value: value
            - type: type
              value: value
            type: null
          oneOf:
          - const: const
            title: title
          - const: const
            title: title
          permissions:
          - principal: principal
            action: action
          - principal: principal
            action: action
          externalName: externalName
          scope: null
          unique: unique
          mutability: mutability
          items:
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            type: type
            enum:
            - enum
            - enum
          maxLength: 0
      properties:
        description:
          $ref: '#/components/schemas/GroupSchemaAttribute'
        name:
          $ref: '#/components/schemas/GroupSchemaAttribute'
      type: object
    GroupSchemaCustom:
      example:
        id: id
        type: type
        properties:
          key:
            minLength: 6
            externalNamespace: externalNamespace
            description: description
            union: null
            title: title
            type: null
            enum:
            - enum
            - enum
            required: true
            master:
              priority:
              - type: type
                value: value
              - type: type
                value: value
              type: null
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            permissions:
            - principal: principal
              action: action
            - principal: principal
              action: action
            externalName: externalName
            scope: null
            unique: unique
            mutability: mutability
            items:
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              type: type
              enum:
              - enum
              - enum
            maxLength: 0
        required:
        - required
        - required
      properties:
        id:
          readOnly: true
          type: string
        properties:
          additionalProperties:
            $ref: '#/components/schemas/GroupSchemaAttribute'
          type: object
        required:
          items:
            type: string
          type: array
        type:
          type: string
      type: object
    GroupSchemaDefinitions:
      example:
        custom:
          id: id
          type: type
          properties:
            key:
              minLength: 6
              externalNamespace: externalNamespace
              description: description
              union: null
              title: title
              type: null
              enum:
              - enum
              - enum
              required: true
              master:
                priority:
                - type: type
                  value: value
                - type: type
                  value: value
                type: null
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              permissions:
              - principal: principal
                action: action
              - principal: principal
                action: action
              externalName: externalName
              scope: null
              unique: unique
              mutability: mutability
              items:
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                type: type
                enum:
                - enum
                - enum
              maxLength: 0
          required:
          - required
          - required
        base:
          id: id
          type: type
          properties:
            name:
              minLength: 6
              externalNamespace: externalNamespace
              description: description
              union: null
              title: title
              type: null
              enum:
              - enum
              - enum
              required: true
              master:
                priority:
                - type: type
                  value: value
                - type: type
                  value: value
                type: null
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              permissions:
              - principal: principal
                action: action
              - principal: principal
                action: action
              externalName: externalName
              scope: null
              unique: unique
              mutability: mutability
              items:
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                type: type
                enum:
                - enum
                - enum
              maxLength: 0
            description:
              minLength: 6
              externalNamespace: externalNamespace
              description: description
              union: null
              title: title
              type: null
              enum:
              - enum
              - enum
              required: true
              master:
                priority:
                - type: type
                  value: value
                - type: type
                  value: value
                type: null
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              permissions:
              - principal: principal
                action: action
              - principal: principal
                action: action
              externalName: externalName
              scope: null
              unique: unique
              mutability: mutability
              items:
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                type: type
                enum:
                - enum
                - enum
              maxLength: 0
          required:
          - required
          - required
      properties:
        base:
          $ref: '#/components/schemas/GroupSchemaBase'
        custom:
          $ref: '#/components/schemas/GroupSchemaCustom'
      type: object
    GroupType:
      enum:
      - APP_GROUP
      - BUILT_IN
      - OKTA_GROUP
      type: string
    HardwareUserFactor:
      allOf:
      - $ref: '#/components/schemas/UserFactor'
      - $ref: '#/components/schemas/HardwareUserFactor_allOf'
    HardwareUserFactorProfile:
      properties:
        credentialId:
          type: string
      type: object
    HookKey:
      example:
        lastUpdated: 2000-01-23T04:56:07.000+00:00
        _embedded:
          e: e
          _links:
            key: "{}"
          created: 2000-01-23T04:56:07.000+00:00
          use: use
          kid: kid
          x5c:
          - x5c
          - x5c
          expiresAt: 2000-01-23T04:56:07.000+00:00
          "n": "n"
          kty: kty
          lastUpdated: 2000-01-23T04:56:07.000+00:00
          x5t#S256: x5t#S256
          x5t: x5t
          key_ops:
          - key_ops
          - key_ops
          x5u: x5u
          alg: alg
          status: status
        created: 2000-01-23T04:56:07.000+00:00
        name: name
        keyId: keyId
        id: id
        isUsed: isUsed
      properties:
        created:
          format: date-time
          readOnly: true
          type: string
        id:
          readOnly: true
          type: string
        isUsed:
          format: boolean
          type: string
        keyId:
          readOnly: true
          type: string
        lastUpdated:
          format: date-time
          readOnly: true
          type: string
        name:
          readOnly: false
          type: string
        _embedded:
          $ref: '#/components/schemas/JsonWebKey'
      type: object
    HostedPage:
      example:
        type: null
        url: url
      properties:
        type:
          $ref: '#/components/schemas/HostedPageType'
        url:
          type: string
      required:
      - type
      type: object
    HostedPageType:
      enum:
      - EXTERNALLY_HOSTED
      - OKTA_DEFAULT
      type: string
    HrefObject:
      description: Singular link objected returned in HAL `_links` object.
      example:
        hints:
          allow:
          - null
          - null
        name: name
        href: href
        type: type
      properties:
        hints:
          $ref: '#/components/schemas/HrefObject_hints'
        href:
          type: string
        name:
          type: string
        type:
          description: "The media type of the link. If omitted, it is implicitly `application/json`."
          type: string
      required:
      - href
      title: Link Object
      type: object
    HttpMethod:
      enum:
      - DELETE
      - GET
      - POST
      - PUT
      type: string
    IamRole:
      example:
        lastUpdated: 2000-01-23T04:56:07.000+00:00
        _links:
          permissions:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          self:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
        created: 2000-01-23T04:56:07.000+00:00
        permissions:
        - null
        - null
        description: description
        id: id
        label: label
      properties:
        created:
          description: Timestamp when the role was created
          format: date-time
          readOnly: true
          type: string
        description:
          description: Description of the role
          type: string
        id:
          description: Unique key for the role
          readOnly: true
          type: string
        label:
          description: Unique label for the role
          type: string
        lastUpdated:
          description: Timestamp when the role was last updated
          format: date-time
          readOnly: true
          type: string
        permissions:
          description: "Array of permissions that the role will grant. See [Permission\
            \ Types](https://developer.okta.com/docs/concepts/role-assignment/#permission-types)."
          items:
            $ref: '#/components/schemas/RolePermissionType'
          type: array
        _links:
          $ref: '#/components/schemas/IamRole__links'
      required:
      - description
      - label
      - permissions
      type: object
    IamRoles:
      example:
        _links:
          next:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
        roles:
        - lastUpdated: 2000-01-23T04:56:07.000+00:00
          _links:
            permissions:
              hints:
                allow:
                - null
                - null
              name: name
              href: href
              type: type
            self:
              hints:
                allow:
                - null
                - null
              name: name
              href: href
              type: type
          created: 2000-01-23T04:56:07.000+00:00
          permissions:
          - null
          - null
          description: description
          id: id
          label: label
        - lastUpdated: 2000-01-23T04:56:07.000+00:00
          _links:
            permissions:
              hints:
                allow:
                - null
                - null
              name: name
              href: href
              type: type
            self:
              hints:
                allow:
                - null
                - null
              name: name
              href: href
              type: type
          created: 2000-01-23T04:56:07.000+00:00
          permissions:
          - null
          - null
          description: description
          id: id
          label: label
      properties:
        roles:
          items:
            $ref: '#/components/schemas/IamRole'
          type: array
        _links:
          $ref: '#/components/schemas/IamRoles__links'
      type: object
    IdentityProvider:
      example:
        lastUpdated: 2000-01-23T04:56:07.000+00:00
        protocol:
          algorithms:
            request:
              signature:
                scope: null
                algorithm: algorithm
            response:
              signature:
                scope: null
                algorithm: algorithm
          relayState:
            format: null
          settings:
            nameFormat: nameFormat
          endpoints:
            acs:
              destination: destination
              binding: null
              type: null
              url: url
            authorization:
              destination: destination
              binding: null
              type: null
              url: url
            userInfo:
              destination: destination
              binding: null
              type: null
              url: url
            metadata:
              destination: destination
              binding: null
              type: null
              url: url
            jwks:
              destination: destination
              binding: null
              type: null
              url: url
            slo:
              destination: destination
              binding: null
              type: null
              url: url
            sso:
              destination: destination
              binding: null
              type: null
              url: url
            token:
              destination: destination
              binding: null
              type: null
              url: url
          credentials:
            trust:
              revocation: null
              audience: audience
              revocationCacheLifetime: 0
              kid: kid
              issuer: issuer
            client:
              client_secret: client_secret
              client_id: client_id
            signing:
              kid: kid
          scopes:
          - scopes
          - scopes
          type: null
          issuer:
            destination: destination
            binding: null
            type: null
            url: url
        _links:
          key: "{}"
        created: 2000-01-23T04:56:07.000+00:00
        name: name
        id: id
        type: null
        issuerMode: null
        policy: null
        status: null
      properties:
        created:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        id:
          readOnly: true
          type: string
        issuerMode:
          $ref: '#/components/schemas/IssuerMode'
        lastUpdated:
          format: date-time
          readOnly: true
          type: string
        name:
          type: string
        policy:
          $ref: '#/components/schemas/IdentityProviderPolicy'
        protocol:
          $ref: '#/components/schemas/Protocol'
        status:
          $ref: '#/components/schemas/LifecycleStatus'
        type:
          $ref: '#/components/schemas/IdentityProviderType'
        _links:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
      type: object
    IdentityProviderApplicationUser:
      example:
        lastUpdated: lastUpdated
        _embedded:
          key: "{}"
        _links:
          key: "{}"
        created: created
        profile:
          key: "{}"
        externalId: externalId
        id: id
      properties:
        created:
          type: string
        externalId:
          type: string
        id:
          readOnly: true
          type: string
        lastUpdated:
          type: string
        profile:
          additionalProperties:
            properties: {}
            type: object
          type: object
        _embedded:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
        _links:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
      type: object
    IdentityProviderCredentials:
      example:
        trust:
          revocation: null
          audience: audience
          revocationCacheLifetime: 0
          kid: kid
          issuer: issuer
        client:
          client_secret: client_secret
          client_id: client_id
        signing:
          kid: kid
      properties:
        client:
          $ref: '#/components/schemas/IdentityProviderCredentialsClient'
        signing:
          $ref: '#/components/schemas/IdentityProviderCredentialsSigning'
        trust:
          $ref: '#/components/schemas/IdentityProviderCredentialsTrust'
      type: object
    IdentityProviderCredentialsClient:
      example:
        client_secret: client_secret
        client_id: client_id
      properties:
        client_id:
          type: string
        client_secret:
          type: string
      type: object
    IdentityProviderCredentialsSigning:
      example:
        kid: kid
      properties:
        kid:
          type: string
      type: object
    IdentityProviderCredentialsTrust:
      example:
        revocation: null
        audience: audience
        revocationCacheLifetime: 0
        kid: kid
        issuer: issuer
      properties:
        audience:
          type: string
        issuer:
          type: string
        kid:
          type: string
        revocation:
          $ref: '#/components/schemas/IdentityProviderCredentialsTrustRevocation'
        revocationCacheLifetime:
          type: integer
      type: object
    IdentityProviderCredentialsTrustRevocation:
      enum:
      - CRL
      - DELTA_CRL
      - OCSP
      type: string
    IdentityProviderPolicy:
      allOf:
      - $ref: '#/components/schemas/Policy'
      - $ref: '#/components/schemas/IdentityProviderPolicy_allOf'
    IdentityProviderPolicyProvider:
      enum:
      - ANY
      - OKTA
      - SPECIFIC_IDP
      type: string
    IdentityProviderPolicyRuleCondition:
      properties:
        idpIds:
          items:
            type: string
          type: array
        provider:
          $ref: '#/components/schemas/IdentityProviderPolicyProvider'
      type: object
    IdentityProviderType:
      enum:
      - AgentlessDSSO
      - FACEBOOK
      - GOOGLE
      - IWA
      - LINKEDIN
      - MICROSOFT
      - OIDC
      - OKTA
      - SAML2
      - X509
      type: string
    IdentitySourceSession:
      example:
        identitySourceId: identitySourceId
        importType: importType
        id: id
        status: null
      properties:
        id:
          readOnly: true
          type: string
        identitySourceId:
          readOnly: true
          type: string
        importType:
          readOnly: true
          type: string
        status:
          $ref: '#/components/schemas/IdentitySourceSessionStatus'
      type: object
    IdentitySourceSessionStatus:
      enum:
      - CLOSED
      - COMPLETED
      - CREATED
      - ERROR
      - EXPIRED
      - TRIGGERED
      type: string
    IdentitySourceUserProfileForDelete:
      example:
        externalId: externalId
      properties:
        externalId:
          maxLength: 512
          type: string
      type: object
    IdentitySourceUserProfileForUpsert:
      additionalProperties: true
      example:
        firstName: firstName
        lastName: lastName
        mobilePhone: mobilePhone
        secondEmail: secondEmail
        userName: userName
        email: email
        homeAddress: homeAddress
      properties:
        email:
          format: email
          maxLength: 100
          minLength: 5
          type: string
        firstName:
          maxLength: 50
          minLength: 1
          nullable: true
          type: string
        homeAddress:
          maxLength: 4096
          nullable: true
          type: string
        lastName:
          maxLength: 50
          minLength: 1
          nullable: true
          type: string
        mobilePhone:
          maxLength: 100
          nullable: true
          type: string
        secondEmail:
          format: email
          maxLength: 100
          minLength: 5
          type: string
        userName:
          maxLength: 100
          type: string
      type: object
    IdpPolicyRuleAction:
      properties:
        providers:
          items:
            $ref: '#/components/schemas/IdpPolicyRuleActionProvider'
          type: array
      type: object
    IdpPolicyRuleActionProvider:
      properties:
        id:
          readOnly: true
          type: string
        type:
          type: string
      type: object
    IframeEmbedScopeAllowedApps:
      enum:
      - OKTA_ENDUSER
      type: string
    ImageUploadResponse:
      example:
        url: url
      properties:
        url:
          readOnly: true
          type: string
      type: object
    InactivityPolicyRuleCondition:
      properties:
        number:
          type: integer
        unit:
          type: string
      type: object
    InlineHook:
      example:
        lastUpdated: 2000-01-23T04:56:07.000+00:00
        _links:
          key: "{}"
        created: 2000-01-23T04:56:07.000+00:00
        channel:
          type: null
          version: version
        name: name
        id: id
        type: null
        version: version
        status: null
      properties:
        channel:
          $ref: '#/components/schemas/InlineHookChannel'
        created:
          format: date-time
          readOnly: true
          type: string
        id:
          readOnly: true
          type: string
        lastUpdated:
          format: date-time
          readOnly: true
          type: string
        name:
          type: string
        status:
          $ref: '#/components/schemas/InlineHookStatus'
        type:
          $ref: '#/components/schemas/InlineHookType'
        version:
          type: string
        _links:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
      type: object
    InlineHookChannel:
      discriminator:
        mapping:
          HTTP: '#/components/schemas/InlineHookChannelHttp'
          OAUTH: '#/components/schemas/InlineHookChannelOAuth'
        propertyName: type
      example:
        type: null
        version: version
      properties:
        type:
          $ref: '#/components/schemas/InlineHookChannelType'
        version:
          type: string
      type: object
    InlineHookChannelConfig:
      properties:
        authScheme:
          $ref: '#/components/schemas/InlineHookChannelConfigAuthScheme'
        headers:
          items:
            $ref: '#/components/schemas/InlineHookChannelConfigHeaders'
          type: array
        method:
          type: string
        uri:
          type: string
      type: object
    InlineHookChannelConfigAuthScheme:
      properties:
        key:
          type: string
        type:
          type: string
        value:
          type: string
      type: object
    InlineHookChannelConfigHeaders:
      properties:
        key:
          type: string
        value:
          type: string
      type: object
    InlineHookChannelHttp:
      allOf:
      - $ref: '#/components/schemas/InlineHookChannel'
      - $ref: '#/components/schemas/InlineHookChannelHttp_allOf'
    InlineHookChannelOAuth:
      allOf:
      - $ref: '#/components/schemas/InlineHookChannel'
      - $ref: '#/components/schemas/InlineHookChannelOAuth_allOf'
    InlineHookChannelType:
      enum:
      - HTTP
      - OAUTH
      type: string
    InlineHookOAuthBasicConfig:
      allOf:
      - $ref: '#/components/schemas/InlineHookChannelConfig'
      properties:
        authType:
          type: string
        clientId:
          type: string
        scope:
          type: string
        tokenUrl:
          type: string
      type: object
    InlineHookOAuthChannelConfig:
      discriminator:
        mapping:
          client_secret_post: '#/components/schemas/InlineHookOAuthClientSecretConfig'
          private_key_jwt: '#/components/schemas/InlineHookOAuthPrivateKeyJwtConfig'
        propertyName: authType
      properties:
        authType:
          type: string
      type: object
    InlineHookOAuthClientSecretConfig:
      allOf:
      - $ref: '#/components/schemas/InlineHookOAuthBasicConfig'
      properties:
        clientSecret:
          type: string
      type: object
    InlineHookOAuthPrivateKeyJwtConfig:
      allOf:
      - $ref: '#/components/schemas/InlineHookOAuthBasicConfig'
      properties:
        hookKeyId:
          type: string
      type: object
    InlineHookPayload:
      type: object
      x-okta-extensible: true
    InlineHookResponse:
      example:
        commands:
        - type: type
          value:
          - op: op
            path: path
            value: value
          - op: op
            path: path
            value: value
        - type: type
          value:
          - op: op
            path: path
            value: value
          - op: op
            path: path
            value: value
      properties:
        commands:
          items:
            $ref: '#/components/schemas/InlineHookResponseCommands'
          type: array
      type: object
    InlineHookResponseCommandValue:
      example:
        op: op
        path: path
        value: value
      properties:
        op:
          type: string
        path:
          type: string
        value:
          type: string
      type: object
    InlineHookResponseCommands:
      example:
        type: type
        value:
        - op: op
          path: path
          value: value
        - op: op
          path: path
          value: value
      properties:
        type:
          type: string
        value:
          items:
            $ref: '#/components/schemas/InlineHookResponseCommandValue'
          type: array
      type: object
    InlineHookStatus:
      enum:
      - ACTIVE
      - INACTIVE
      type: string
    InlineHookType:
      enum:
      - com.okta.import.transform
      - com.okta.oauth2.tokens.transform
      - com.okta.saml.tokens.transform
      - com.okta.user.credential.password.import
      - com.okta.user.pre-registration
      type: string
    IssuerMode:
      enum:
      - CUSTOM_URL
      - DYNAMIC
      - ORG_URL
      type: string
    JsonWebKey:
      example:
        e: e
        _links:
          key: "{}"
        created: 2000-01-23T04:56:07.000+00:00
        use: use
        kid: kid
        x5c:
        - x5c
        - x5c
        expiresAt: 2000-01-23T04:56:07.000+00:00
        "n": "n"
        kty: kty
        lastUpdated: 2000-01-23T04:56:07.000+00:00
        x5t#S256: x5t#S256
        x5t: x5t
        key_ops:
        - key_ops
        - key_ops
        x5u: x5u
        alg: alg
        status: status
      properties:
        alg:
          type: string
        created:
          format: date-time
          type: string
        e:
          type: string
        expiresAt:
          format: date-time
          type: string
        key_ops:
          items:
            type: string
          type: array
        kid:
          type: string
        kty:
          type: string
        lastUpdated:
          format: date-time
          type: string
        "n":
          type: string
        status:
          type: string
        use:
          type: string
        x5c:
          items:
            type: string
          type: array
        x5t:
          type: string
        x5t#S256:
          type: string
        x5u:
          type: string
        _links:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
      type: object
    JwkUse:
      example:
        use: null
      properties:
        use:
          $ref: '#/components/schemas/JwkUseType'
      type: object
    JwkUseType:
      enum:
      - sig
      type: string
    KeyRequest:
      example:
        name: name
      properties:
        name:
          type: string
      type: object
    KnowledgeConstraint:
      allOf:
      - $ref: '#/components/schemas/AccessPolicyConstraint'
    Language:
      description: "The language specified as an [IETF BCP 47 language tag](https://datatracker.ietf.org/doc/html/rfc5646)."
      type: string
    LifecycleCreateSettingObject:
      example:
        status: null
      properties:
        status:
          $ref: '#/components/schemas/EnabledStatus'
      type: object
    LifecycleDeactivateSettingObject:
      example:
        status: null
      properties:
        status:
          $ref: '#/components/schemas/EnabledStatus'
      type: object
    LifecycleExpirationPolicyRuleCondition:
      properties:
        lifecycleStatus:
          type: string
        number:
          type: integer
        unit:
          type: string
      type: object
    LifecycleStatus:
      enum:
      - ACTIVE
      - INACTIVE
      type: string
    LinkedObject:
      example:
        _links:
          key: "{}"
        associated:
          name: name
          description: description
          title: title
          type: null
        primary:
          name: name
          description: description
          title: title
          type: null
      properties:
        associated:
          $ref: '#/components/schemas/LinkedObjectDetails'
        primary:
          $ref: '#/components/schemas/LinkedObjectDetails'
        _links:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
      type: object
    LinkedObjectDetails:
      example:
        name: name
        description: description
        title: title
        type: null
      properties:
        description:
          type: string
        name:
          type: string
        title:
          type: string
        type:
          $ref: '#/components/schemas/LinkedObjectDetailsType'
      type: object
    LinkedObjectDetailsType:
      enum:
      - USER
      type: string
    LoadingPageTouchPointVariant:
      enum:
      - NONE
      - OKTA_DEFAULT
      type: string
    LocationGranularity:
      enum:
      - CITY
      - COUNTRY
      - LAT_LONG
      - SUBDIVISION
      type: string
    LogActor:
      example:
        alternateId: alternateId
        displayName: displayName
        detail:
          key: "{}"
        id: id
        type: type
      properties:
        alternateId:
          readOnly: true
          type: string
        detail:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
        displayName:
          readOnly: true
          type: string
        id:
          readOnly: true
          type: string
        type:
          readOnly: true
          type: string
      type: object
    LogAuthenticationContext:
      example:
        credentialType: null
        authenticationProvider: null
        credentialProvider: null
        externalSessionId: externalSessionId
        interface: interface
        authenticationStep: 0
        issuer:
          id: id
          type: type
      properties:
        authenticationProvider:
          $ref: '#/components/schemas/LogAuthenticationProvider'
        authenticationStep:
          readOnly: true
          type: integer
        credentialProvider:
          $ref: '#/components/schemas/LogCredentialProvider'
        credentialType:
          $ref: '#/components/schemas/LogCredentialType'
        externalSessionId:
          readOnly: true
          type: string
        interface:
          readOnly: true
          type: string
        issuer:
          $ref: '#/components/schemas/LogIssuer'
      type: object
    LogAuthenticationProvider:
      enum:
      - ACTIVE_DIRECTORY
      - FACTOR_PROVIDER
      - FEDERATION
      - LDAP
      - OKTA_AUTHENTICATION_PROVIDER
      - SOCIAL
      type: string
    LogClient:
      example:
        zone: zone
        ipAddress: ipAddress
        userAgent:
          os: os
          browser: browser
          rawUserAgent: rawUserAgent
        id: id
        device: device
        geographicalContext:
          country: country
          city: city
          postalCode: postalCode
          state: state
          geolocation:
            lon: 1.4658129805029452
            lat: 6.027456183070403
      properties:
        device:
          readOnly: true
          type: string
        geographicalContext:
          $ref: '#/components/schemas/LogGeographicalContext'
        id:
          readOnly: true
          type: string
        ipAddress:
          readOnly: true
          type: string
        userAgent:
          $ref: '#/components/schemas/LogUserAgent'
        zone:
          readOnly: true
          type: string
      type: object
    LogCredentialProvider:
      enum:
      - DUO
      - GOOGLE
      - OKTA_AUTHENTICATION_PROVIDER
      - OKTA_CREDENTIAL_PROVIDER
      - RSA
      - SYMANTEC
      - YUBIKEY
      type: string
    LogCredentialType:
      enum:
      - ASSERTION
      - EMAIL
      - IWA
      - JWT
      - OAuth 2.0
      - OTP
      - PASSWORD
      - SMS
      type: string
    LogDebugContext:
      example:
        debugData:
          key: "{}"
      properties:
        debugData:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
      type: object
    LogEvent:
      example:
        severity: null
        request:
          ipChain:
          - ip: ip
            source: source
            geographicalContext:
              country: country
              city: city
              postalCode: postalCode
              state: state
              geolocation:
                lon: 1.4658129805029452
                lat: 6.027456183070403
            version: version
          - ip: ip
            source: source
            geographicalContext:
              country: country
              city: city
              postalCode: postalCode
              state: state
              geolocation:
                lon: 1.4658129805029452
                lat: 6.027456183070403
            version: version
        authenticationContext:
          credentialType: null
          authenticationProvider: null
          credentialProvider: null
          externalSessionId: externalSessionId
          interface: interface
          authenticationStep: 0
          issuer:
            id: id
            type: type
        eventType: eventType
        published: 2000-01-23T04:56:07.000+00:00
        securityContext:
          asNumber: 5
          domain: domain
          isp: isp
          isProxy: true
          asOrg: asOrg
        uuid: uuid
        version: version
        target:
        - alternateId: alternateId
          displayName: displayName
          id: id
          detailEntry:
            key: "{}"
          type: type
        - alternateId: alternateId
          displayName: displayName
          id: id
          detailEntry:
            key: "{}"
          type: type
        actor:
          alternateId: alternateId
          displayName: displayName
          detail:
            key: "{}"
          id: id
          type: type
        debugContext:
          debugData:
            key: "{}"
        displayMessage: displayMessage
        client:
          zone: zone
          ipAddress: ipAddress
          userAgent:
            os: os
            browser: browser
            rawUserAgent: rawUserAgent
          id: id
          device: device
          geographicalContext:
            country: country
            city: city
            postalCode: postalCode
            state: state
            geolocation:
              lon: 1.4658129805029452
              lat: 6.027456183070403
        legacyEventType: legacyEventType
        outcome:
          result: result
          reason: reason
        transaction:
          detail:
            key: "{}"
          id: id
          type: type
      properties:
        actor:
          $ref: '#/components/schemas/LogActor'
        authenticationContext:
          $ref: '#/components/schemas/LogAuthenticationContext'
        client:
          $ref: '#/components/schemas/LogClient'
        debugContext:
          $ref: '#/components/schemas/LogDebugContext'
        displayMessage:
          readOnly: true
          type: string
        eventType:
          readOnly: true
          type: string
        legacyEventType:
          readOnly: true
          type: string
        outcome:
          $ref: '#/components/schemas/LogOutcome'
        published:
          format: date-time
          readOnly: true
          type: string
        request:
          $ref: '#/components/schemas/LogRequest'
        securityContext:
          $ref: '#/components/schemas/LogSecurityContext'
        severity:
          $ref: '#/components/schemas/LogSeverity'
        target:
          items:
            $ref: '#/components/schemas/LogTarget'
          readOnly: true
          type: array
        transaction:
          $ref: '#/components/schemas/LogTransaction'
        uuid:
          readOnly: true
          type: string
        version:
          readOnly: true
          type: string
      type: object
    LogGeographicalContext:
      example:
        country: country
        city: city
        postalCode: postalCode
        state: state
        geolocation:
          lon: 1.4658129805029452
          lat: 6.027456183070403
      properties:
        city:
          readOnly: true
          type: string
        country:
          readOnly: true
          type: string
        geolocation:
          $ref: '#/components/schemas/LogGeolocation'
        postalCode:
          readOnly: true
          type: string
        state:
          readOnly: true
          type: string
      type: object
    LogGeolocation:
      example:
        lon: 1.4658129805029452
        lat: 6.027456183070403
      properties:
        lat:
          format: double
          readOnly: true
          type: number
        lon:
          format: double
          readOnly: true
          type: number
      type: object
    LogIpAddress:
      example:
        ip: ip
        source: source
        geographicalContext:
          country: country
          city: city
          postalCode: postalCode
          state: state
          geolocation:
            lon: 1.4658129805029452
            lat: 6.027456183070403
        version: version
      properties:
        geographicalContext:
          $ref: '#/components/schemas/LogGeographicalContext'
        ip:
          readOnly: true
          type: string
        source:
          readOnly: true
          type: string
        version:
          readOnly: true
          type: string
      type: object
    LogIssuer:
      example:
        id: id
        type: type
      properties:
        id:
          readOnly: true
          type: string
        type:
          readOnly: true
          type: string
      type: object
    LogOutcome:
      example:
        result: result
        reason: reason
      properties:
        reason:
          readOnly: true
          type: string
        result:
          readOnly: true
          type: string
      type: object
    LogRequest:
      example:
        ipChain:
        - ip: ip
          source: source
          geographicalContext:
            country: country
            city: city
            postalCode: postalCode
            state: state
            geolocation:
              lon: 1.4658129805029452
              lat: 6.027456183070403
          version: version
        - ip: ip
          source: source
          geographicalContext:
            country: country
            city: city
            postalCode: postalCode
            state: state
            geolocation:
              lon: 1.4658129805029452
              lat: 6.027456183070403
          version: version
      properties:
        ipChain:
          items:
            $ref: '#/components/schemas/LogIpAddress'
          readOnly: true
          type: array
      type: object
    LogSecurityContext:
      example:
        asNumber: 5
        domain: domain
        isp: isp
        isProxy: true
        asOrg: asOrg
      properties:
        asNumber:
          readOnly: true
          type: integer
        asOrg:
          readOnly: true
          type: string
        domain:
          readOnly: true
          type: string
        isp:
          readOnly: true
          type: string
        isProxy:
          readOnly: true
          type: boolean
      type: object
    LogSeverity:
      enum:
      - DEBUG
      - ERROR
      - INFO
      - WARN
      type: string
    LogStream:
      discriminator:
        mapping:
          aws_eventbridge: '#/components/schemas/LogStreamAws'
          splunk_cloud_logstreaming: '#/components/schemas/LogStreamSplunk'
        propertyName: type
      properties:
        created:
          description: Timestamp when the Log Stream was created
          format: date-time
          readOnly: true
          type: string
        id:
          description: Unique key for the Log Stream
          readOnly: true
          type: string
        lastUpdated:
          description: Timestamp when the Log Stream was last updated
          format: date-time
          readOnly: true
          type: string
        name:
          description: Unique name for the Log Stream
          type: string
        status:
          $ref: '#/components/schemas/LifecycleStatus'
        type:
          $ref: '#/components/schemas/LogStreamType'
        _links:
          $ref: '#/components/schemas/LogStream__links'
      type: object
    LogStreamAws:
      allOf:
      - $ref: '#/components/schemas/LogStream'
      - $ref: '#/components/schemas/LogStreamAws_allOf'
    LogStreamSchema:
      example:
        lastUpdated: lastUpdated
        $schema: $schema
        _links:
          key: "{}"
        created: created
        errorMessage: "{}"
        name: name
        id: id
        title: title
        type: type
        properties: "{}"
        required:
        - required
        - required
      properties:
        $schema:
          readOnly: true
          type: string
        created:
          readOnly: true
          type: string
        errorMessage:
          type: object
        id:
          readOnly: true
          type: string
        lastUpdated:
          readOnly: true
          type: string
        name:
          readOnly: true
          type: string
        properties:
          type: object
        required:
          items:
            type: string
          type: array
        title:
          type: string
        type:
          readOnly: true
          type: string
        _links:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
      type: object
    LogStreamSettings:
      type: object
    LogStreamSettingsAws:
      allOf:
      - $ref: '#/components/schemas/LogStreamSettings'
      - $ref: '#/components/schemas/LogStreamSettingsAws_allOf'
    LogStreamSettingsSplunk:
      allOf:
      - $ref: '#/components/schemas/LogStreamSettings'
      - $ref: '#/components/schemas/LogStreamSettingsSplunk_allOf'
    LogStreamSplunk:
      allOf:
      - $ref: '#/components/schemas/LogStream'
      - $ref: '#/components/schemas/LogStreamSplunk_allOf'
    LogStreamType:
      description: "The Log Stream type specifies the streaming provider used. Okta\
        \ supports [AWS EventBridge](https://aws.amazon.com/eventbridge/) and [Splunk\
        \ Cloud](https://www.splunk.com/en_us/software/splunk-cloud-platform.html)."
      enum:
      - aws_eventbridge
      - splunk_cloud_logstreaming
      type: string
    LogTarget:
      example:
        alternateId: alternateId
        displayName: displayName
        id: id
        detailEntry:
          key: "{}"
        type: type
      properties:
        alternateId:
          readOnly: true
          type: string
        detailEntry:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
        displayName:
          readOnly: true
          type: string
        id:
          readOnly: true
          type: string
        type:
          readOnly: true
          type: string
      type: object
    LogTransaction:
      example:
        detail:
          key: "{}"
        id: id
        type: type
      properties:
        detail:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
        id:
          readOnly: true
          type: string
        type:
          readOnly: true
          type: string
      type: object
    LogUserAgent:
      example:
        os: os
        browser: browser
        rawUserAgent: rawUserAgent
      properties:
        browser:
          readOnly: true
          type: string
        os:
          readOnly: true
          type: string
        rawUserAgent:
          readOnly: true
          type: string
      type: object
    MDMEnrollmentPolicyEnrollment:
      enum:
      - ANY_OR_NONE
      - OMM
      type: string
    MDMEnrollmentPolicyRuleCondition:
      properties:
        blockNonSafeAndroid:
          type: boolean
        enrollment:
          $ref: '#/components/schemas/MDMEnrollmentPolicyEnrollment'
      type: object
    MultifactorEnrollmentPolicy:
      allOf:
      - $ref: '#/components/schemas/Policy'
      - $ref: '#/components/schemas/MultifactorEnrollmentPolicy_allOf'
    MultifactorEnrollmentPolicyAuthenticatorSettings:
      properties:
        enroll:
          $ref: '#/components/schemas/MultifactorEnrollmentPolicyAuthenticatorSettings_enroll'
        key:
          $ref: '#/components/schemas/MultifactorEnrollmentPolicyAuthenticatorType'
      type: object
    MultifactorEnrollmentPolicyAuthenticatorStatus:
      enum:
      - NOT_ALLOWED
      - OPTIONAL
      - REQUIRED
      type: string
    MultifactorEnrollmentPolicyAuthenticatorType:
      enum:
      - custom_app
      - custom_otp
      - duo
      - external_idp
      - google_otp
      - okta_email
      - okta_password
      - okta_verify
      - onprem_mfa
      - phone_number
      - rsa_token
      - security_question
      - symantec_vip
      - webauthn
      - yubikey_token
      type: string
    MultifactorEnrollmentPolicySettings:
      properties:
        authenticators:
          items:
            $ref: '#/components/schemas/MultifactorEnrollmentPolicyAuthenticatorSettings'
          type: array
        type:
          $ref: '#/components/schemas/MultifactorEnrollmentPolicySettingsType'
      type: object
    MultifactorEnrollmentPolicySettingsType:
      enum:
      - AUTHENTICATORS
      type: string
    NetworkZone:
      example:
        gateways:
        - 1.2.3.4/24
        - 1.2.3.4/24
        _links:
          key: "{}"
        created: 2000-01-23T04:56:07.000+00:00
        usage: BLOCKLIST
        proxyType: ANY
        type: IP
        lastUpdated: 2000-01-23T04:56:07.000+00:00
        system: true
        name: newNetworkZone
        asns:
        - 23457
        locations:
        - country: US
          region: US-CA
        - country: US
          region: US-CA
        proxies:
        - 1.2.3.4/24
        - 1.2.3.4/24
        id: id
        status: ACTIVE
      properties:
        asns:
          description: "Format of each array value: a string representation of an\
            \ ASN numeric value"
          example:
          - 23457
          items:
            type: string
          maximum: 75
          type: array
        created:
          format: date-time
          readOnly: true
          type: string
        gateways:
          description: "IP addresses (range or CIDR form) of this Zone.\nThe maximum\
            \ array length is 150 entries for admin-created IP zones, 1000 entries\
            \ for IP blocklist zones, and 5000 entries for the default system IP Zone."
          items:
            $ref: '#/components/schemas/NetworkZoneAddress'
          type: array
        id:
          readOnly: true
          type: string
        lastUpdated:
          format: date-time
          readOnly: true
          type: string
        locations:
          description: The geolocations of this Zone
          items:
            $ref: '#/components/schemas/NetworkZoneLocation'
          maximum: 75
          type: array
        name:
          description: Unique name for this Zone. Maximum of 128 characters.
          example: newNetworkZone
          type: string
        proxies:
          description: "IP address (range or CIDR form) that are allowed to forward\
            \ a request from gateway addresses.\nThese proxies are automatically trusted\
            \ by Threat Insights, and used to identify the client IP of a request.\n\
            The maximum array length is 150 entries for admin-created zones and 5000\
            \ entries for the default system IP Zone."
          items:
            $ref: '#/components/schemas/NetworkZoneAddress'
          type: array
        proxyType:
          description: "One of: `\"\"` or `null` (when not specified), `Any` (meaning\
            \ any proxy), `Tor`, or `NotTorAnonymizer`"
          example: ANY
          type: string
        status:
          $ref: '#/components/schemas/NetworkZoneStatus'
        system:
          description: "Indicates if this is a system Network Zone. For admin-created\
            \ zones, this is always `false`.\nThe system IP Policy Network Zone (`LegacyIpZone`)\
            \ is included by default in your Okta org. Notice that `system=true` for\
            \ the `LegacyIpZone` object. Admin users can modify the name of this default\
            \ system Zone and can add up to 5000 gateway or proxy IP entries."
          type: boolean
        type:
          $ref: '#/components/schemas/NetworkZoneType'
        usage:
          $ref: '#/components/schemas/NetworkZoneUsage'
        _links:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
      type: object
    NetworkZoneAddress:
      description: Specifies the value of an IP address expressed using either `range`
        or `CIDR` form.
      example: 1.2.3.4/24
      properties:
        type:
          $ref: '#/components/schemas/NetworkZoneAddressType'
        value:
          type: string
      type: object
    NetworkZoneAddressType:
      enum:
      - CIDR
      - RANGE
      example: CIDR
      type: string
    NetworkZoneLocation:
      example:
        country: US
        region: US-CA
      properties:
        country:
          description: "Format of the country value: length 2 [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\
            \ country code.\nDo not use continent codes as they are treated as generic\
            \ codes for undesignated countries."
          example: US
          type: string
        region:
          description: "Format of the region value (optional): region code [ISO-3166-2](https://en.wikipedia.org/wiki/ISO_3166-2)\
            \ appended to country code (`countryCode-regionCode`), or `null` if empty.\n\
            Do not use continent codes as they are treated as generic codes for undesignated\
            \ regions."
          example: US-CA
          type: string
      type: object
    NetworkZoneStatus:
      enum:
      - ACTIVE
      - INACTIVE
      example: ACTIVE
      type: string
    NetworkZoneType:
      enum:
      - DYNAMIC
      - IP
      example: IP
      type: string
    NetworkZoneUsage:
      enum:
      - BLOCKLIST
      - POLICY
      example: BLOCKLIST
      type: string
    NotificationType:
      enum:
      - AD_AGENT
      - APP_IMPORT
      - CONNECTOR_AGENT
      - IWA_AGENT
      - LDAP_AGENT
      - OKTA_ANNOUNCEMENT
      - OKTA_ISSUE
      - OKTA_UPDATE
      - RATELIMIT_NOTIFICATION
      - REPORT_SUSPICIOUS_ACTIVITY
      - USER_DEPROVISION
      - USER_LOCKED_OUT
      - AGENT_AUTO_UPDATE_NOTIFICATION
      type: string
    OAuth2Actor:
      example:
        id: id
        type: type
      properties:
        id:
          readOnly: true
          type: string
        type:
          type: string
      type: object
    OAuth2Claim:
      example:
        group_filter_type: null
        claimType: null
        system: true
        alwaysIncludeInToken: true
        _links:
          key: "{}"
        valueType: null
        name: name
        id: id
        conditions:
          scopes:
          - scopes
          - scopes
        value: value
        status: null
      properties:
        alwaysIncludeInToken:
          type: boolean
        claimType:
          $ref: '#/components/schemas/OAuth2ClaimType'
        conditions:
          $ref: '#/components/schemas/OAuth2ClaimConditions'
        group_filter_type:
          $ref: '#/components/schemas/OAuth2ClaimGroupFilterType'
        id:
          readOnly: true
          type: string
        name:
          type: string
        status:
          $ref: '#/components/schemas/LifecycleStatus'
        system:
          type: boolean
        value:
          type: string
        valueType:
          $ref: '#/components/schemas/OAuth2ClaimValueType'
        _links:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
      type: object
    OAuth2ClaimConditions:
      example:
        scopes:
        - scopes
        - scopes
      properties:
        scopes:
          items:
            type: string
          type: array
      type: object
    OAuth2ClaimGroupFilterType:
      enum:
      - CONTAINS
      - EQUALS
      - REGEX
      - STARTS_WITH
      type: string
    OAuth2ClaimType:
      enum:
      - IDENTITY
      - RESOURCE
      type: string
    OAuth2ClaimValueType:
      enum:
      - EXPRESSION
      - GROUPS
      - SYSTEM
      type: string
    OAuth2Client:
      example:
        client_uri: client_uri
        _links:
          key: "{}"
        logo_uri: logo_uri
        client_name: client_name
        client_id: client_id
      properties:
        client_id:
          readOnly: true
          type: string
        client_name:
          readOnly: true
          type: string
        client_uri:
          readOnly: true
          type: string
        logo_uri:
          readOnly: true
          type: string
        _links:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
      type: object
    OAuth2RefreshToken:
      example:
        lastUpdated: 2000-01-23T04:56:07.000+00:00
        clientId: clientId
        createdBy:
          id: id
          type: type
        _embedded:
          key: "{}"
        _links:
          key: "{}"
        created: 2000-01-23T04:56:07.000+00:00
        id: id
        scopes:
        - scopes
        - scopes
        userId: userId
        expiresAt: 2000-01-23T04:56:07.000+00:00
        issuer: issuer
        status: null
      properties:
        clientId:
          type: string
        created:
          format: date-time
          readOnly: true
          type: string
        createdBy:
          $ref: '#/components/schemas/OAuth2Actor'
        expiresAt:
          format: date-time
          readOnly: true
          type: string
        id:
          readOnly: true
          type: string
        issuer:
          type: string
        lastUpdated:
          format: date-time
          readOnly: true
          type: string
        scopes:
          items:
            type: string
          type: array
        status:
          $ref: '#/components/schemas/GrantOrTokenStatus'
        userId:
          type: string
        _embedded:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
        _links:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
      type: object
    OAuth2Scope:
      example:
        default: true
        system: true
        displayName: displayName
        name: name
        description: description
        metadataPublish: null
        id: id
        consent: null
      properties:
        consent:
          $ref: '#/components/schemas/OAuth2ScopeConsentType'
        default:
          type: boolean
        description:
          type: string
        displayName:
          type: string
        id:
          readOnly: true
          type: string
        metadataPublish:
          $ref: '#/components/schemas/OAuth2ScopeMetadataPublish'
        name:
          type: string
        system:
          type: boolean
      type: object
    OAuth2ScopeConsentGrant:
      example:
        lastUpdated: 2000-01-23T04:56:07.000+00:00
        scopeId: scopeId
        clientId: clientId
        createdBy:
          id: id
          type: type
        _embedded:
          key: "{}"
        _links:
          key: "{}"
        created: 2000-01-23T04:56:07.000+00:00
        id: id
        source: null
        userId: userId
        issuer: issuer
        status: null
      properties:
        clientId:
          type: string
        created:
          format: date-time
          readOnly: true
          type: string
        createdBy:
          $ref: '#/components/schemas/OAuth2Actor'
        id:
          readOnly: true
          type: string
        issuer:
          type: string
        lastUpdated:
          format: date-time
          readOnly: true
          type: string
        scopeId:
          type: string
        source:
          $ref: '#/components/schemas/OAuth2ScopeConsentGrantSource'
        status:
          $ref: '#/components/schemas/GrantOrTokenStatus'
        userId:
          type: string
        _embedded:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
        _links:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
      type: object
    OAuth2ScopeConsentGrantSource:
      enum:
      - ADMIN
      - END_USER
      type: string
    OAuth2ScopeConsentType:
      enum:
      - ADMIN
      - IMPLICIT
      - REQUIRED
      type: string
    OAuth2ScopeMetadataPublish:
      enum:
      - ALL_CLIENTS
      - NO_CLIENTS
      type: string
    OAuth2ScopesMediationPolicyRuleCondition:
      properties:
        include:
          items:
            type: string
          type: array
      type: object
    OAuth2Token:
      example:
        lastUpdated: 2000-01-23T04:56:07.000+00:00
        clientId: clientId
        _embedded:
          key: "{}"
        _links:
          key: "{}"
        created: 2000-01-23T04:56:07.000+00:00
        id: id
        scopes:
        - scopes
        - scopes
        userId: userId
        expiresAt: 2000-01-23T04:56:07.000+00:00
        issuer: issuer
        status: null
      properties:
        clientId:
          type: string
        created:
          format: date-time
          readOnly: true
          type: string
        expiresAt:
          format: date-time
          readOnly: true
          type: string
        id:
          readOnly: true
          type: string
        issuer:
          type: string
        lastUpdated:
          format: date-time
          readOnly: true
          type: string
        scopes:
          items:
            type: string
          type: array
        status:
          $ref: '#/components/schemas/GrantOrTokenStatus'
        userId:
          type: string
        _embedded:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
        _links:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
      type: object
    OAuthApplicationCredentials:
      allOf:
      - $ref: '#/components/schemas/ApplicationCredentials'
      - $ref: '#/components/schemas/OAuthApplicationCredentials_allOf'
    OAuthEndpointAuthenticationMethod:
      enum:
      - client_secret_basic
      - client_secret_jwt
      - client_secret_post
      - none
      - private_key_jwt
      type: string
    OAuthGrantType:
      enum:
      - authorization_code
      - client_credentials
      - implicit
      - interaction_code
      - password
      - refresh_token
      - urn:ietf:params:oauth:grant-type:device_code
      - urn:ietf:params:oauth:grant-type:saml2-bearer
      - urn:ietf:params:oauth:grant-type:token-exchange
      type: string
    OAuthResponseType:
      enum:
      - code
      - id_token
      - token
      type: string
    OktaSignOnPolicy:
      allOf:
      - $ref: '#/components/schemas/Policy'
      - $ref: '#/components/schemas/OktaSignOnPolicy_allOf'
    OktaSignOnPolicyConditions:
      allOf:
      - $ref: '#/components/schemas/PolicyRuleConditions'
      - $ref: '#/components/schemas/OktaSignOnPolicyConditions_allOf'
    OktaSignOnPolicyFactorPromptMode:
      enum:
      - ALWAYS
      - DEVICE
      - SESSION
      type: string
    OktaSignOnPolicyRule:
      allOf:
      - $ref: '#/components/schemas/PolicyRule'
      - $ref: '#/components/schemas/OktaSignOnPolicyRule_allOf'
    OktaSignOnPolicyRuleActions:
      allOf:
      - $ref: '#/components/schemas/PolicyRuleActions'
      - $ref: '#/components/schemas/OktaSignOnPolicyRuleActions_allOf'
    OktaSignOnPolicyRuleConditions:
      allOf:
      - $ref: '#/components/schemas/PolicyRuleConditions'
      - $ref: '#/components/schemas/OktaSignOnPolicyRuleConditions_allOf'
    OktaSignOnPolicyRuleSignonActions:
      properties:
        access:
          $ref: '#/components/schemas/PolicyAccess'
        factorLifetime:
          type: integer
        factorPromptMode:
          $ref: '#/components/schemas/OktaSignOnPolicyFactorPromptMode'
        rememberDeviceByDefault:
          default: false
          type: boolean
        requireFactor:
          default: false
          type: boolean
        session:
          $ref: '#/components/schemas/OktaSignOnPolicyRuleSignonSessionActions'
      type: object
    OktaSignOnPolicyRuleSignonSessionActions:
      properties:
        maxSessionIdleMinutes:
          type: integer
        maxSessionLifetimeMinutes:
          type: integer
        usePersistentCookie:
          default: false
          type: boolean
      type: object
    OpenIdConnectApplication:
      allOf:
      - $ref: '#/components/schemas/Application'
      - $ref: '#/components/schemas/OpenIdConnectApplication_allOf'
      x-okta-defined-as:
        name: oidc_client
    OpenIdConnectApplicationConsentMethod:
      enum:
      - REQUIRED
      - TRUSTED
      type: string
    OpenIdConnectApplicationIdpInitiatedLogin:
      properties:
        default_scope:
          items:
            type: string
          type: array
        mode:
          type: string
      type: object
    OpenIdConnectApplicationIssuerMode:
      enum:
      - CUSTOM_URL
      - DYNAMIC
      - ORG_URL
      type: string
    OpenIdConnectApplicationSettings:
      allOf:
      - $ref: '#/components/schemas/ApplicationSettings'
      - $ref: '#/components/schemas/OpenIdConnectApplicationSettings_allOf'
    OpenIdConnectApplicationSettingsClient:
      properties:
        application_type:
          $ref: '#/components/schemas/OpenIdConnectApplicationType'
        client_uri:
          type: string
        consent_method:
          $ref: '#/components/schemas/OpenIdConnectApplicationConsentMethod'
        grant_types:
          items:
            $ref: '#/components/schemas/OAuthGrantType'
          type: array
        idp_initiated_login:
          $ref: '#/components/schemas/OpenIdConnectApplicationIdpInitiatedLogin'
        initiate_login_uri:
          type: string
        issuer_mode:
          $ref: '#/components/schemas/OpenIdConnectApplicationIssuerMode'
        jwks:
          $ref: '#/components/schemas/OpenIdConnectApplicationSettingsClientKeys'
        logo_uri:
          type: string
        policy_uri:
          type: string
        post_logout_redirect_uris:
          items:
            type: string
          type: array
        redirect_uris:
          items:
            type: string
          type: array
        refresh_token:
          $ref: '#/components/schemas/OpenIdConnectApplicationSettingsRefreshToken'
        response_types:
          items:
            $ref: '#/components/schemas/OAuthResponseType'
          type: array
        tos_uri:
          type: string
        wildcard_redirect:
          type: string
      type: object
    OpenIdConnectApplicationSettingsClientKeys:
      properties:
        keys:
          items:
            $ref: '#/components/schemas/JsonWebKey'
          type: array
      type: object
    OpenIdConnectApplicationSettingsRefreshToken:
      properties:
        leeway:
          type: integer
        rotation_type:
          $ref: '#/components/schemas/OpenIdConnectRefreshTokenRotationType'
      type: object
    OpenIdConnectApplicationType:
      enum:
      - browser
      - native
      - service
      - web
      type: string
    OpenIdConnectRefreshTokenRotationType:
      enum:
      - ROTATE
      - STATIC
      type: string
    OperationalStatus:
      description: Operational status of a given agent
      enum:
      - DEGRADED
      - DISRUPTED
      - INACTIVE
      - OPERATIONAL
      type: string
    OrgContactType:
      enum:
      - BILLING
      - TECHNICAL
      type: string
    OrgContactTypeObj:
      example:
        _links:
          key: "{}"
        contactType: null
      properties:
        contactType:
          $ref: '#/components/schemas/OrgContactType'
        _links:
          additionalProperties:
            type: object
          type: object
      type: object
    OrgContactUser:
      example:
        _links:
          key: "{}"
        userId: userId
      properties:
        userId:
          type: string
        _links:
          additionalProperties:
            type: object
          readOnly: true
          type: object
      type: object
    OrgOktaCommunicationSetting:
      example:
        _links:
          key: "{}"
        optOutEmailUsers: true
      properties:
        optOutEmailUsers:
          readOnly: true
          type: boolean
        _links:
          additionalProperties:
            type: object
          type: object
      type: object
    OrgOktaSupportSetting:
      enum:
      - DISABLED
      - ENABLED
      type: string
    OrgOktaSupportSettingsObj:
      example:
        _links:
          key: "{}"
        expiration: 2000-01-23T04:56:07.000+00:00
        support: null
      properties:
        expiration:
          format: date-time
          readOnly: true
          type: string
        support:
          $ref: '#/components/schemas/OrgOktaSupportSetting'
        _links:
          additionalProperties:
            type: object
          type: object
      type: object
    OrgPreferences:
      example:
        _links:
          key: "{}"
        showEndUserFooter: true
      properties:
        showEndUserFooter:
          readOnly: true
          type: boolean
        _links:
          additionalProperties:
            type: object
          type: object
      type: object
    OrgSetting:
      example:
        country: country
        website: website
        supportPhoneNumber: supportPhoneNumber
        address2: address2
        city: city
        _links:
          key: "{}"
        address1: address1
        created: 2000-01-23T04:56:07.000+00:00
        companyName: companyName
        postalCode: postalCode
        expiresAt: 2000-01-23T04:56:07.000+00:00
        lastUpdated: 2000-01-23T04:56:07.000+00:00
        phoneNumber: phoneNumber
        endUserSupportHelpURL: endUserSupportHelpURL
        subdomain: subdomain
        id: id
        state: state
        status: status
      properties:
        address1:
          type: string
        address2:
          type: string
        city:
          type: string
        companyName:
          type: string
        country:
          type: string
        created:
          format: date-time
          readOnly: true
          type: string
        endUserSupportHelpURL:
          type: string
        expiresAt:
          format: date-time
          readOnly: true
          type: string
        id:
          readOnly: true
          type: string
        lastUpdated:
          format: date-time
          readOnly: true
          type: string
        phoneNumber:
          type: string
        postalCode:
          type: string
        state:
          type: string
        status:
          readOnly: true
          type: string
        subdomain:
          readOnly: true
          type: string
        supportPhoneNumber:
          type: string
        website:
          type: string
        _links:
          additionalProperties:
            type: object
          type: object
      type: object
    PageRoot:
      example:
        _embedded:
          preview:
            pageContent: pageContent
          default:
            pageContent: pageContent
          customized:
            pageContent: pageContent
          previewUrl: https://openapi-generator.tech
          customizedUrl: https://openapi-generator.tech
        _links:
          preview:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          default:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          customized:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          self:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
      properties:
        _embedded:
          $ref: '#/components/schemas/PageRoot__embedded'
        _links:
          $ref: '#/components/schemas/PageRoot__links'
      type: object
    PasswordCredential:
      example:
        hook:
          type: type
        value: value
        hash:
          salt: salt
          saltOrder: saltOrder
          workFactor: 0
          value: value
          algorithm: null
      properties:
        hash:
          $ref: '#/components/schemas/PasswordCredentialHash'
        hook:
          $ref: '#/components/schemas/PasswordCredentialHook'
        value:
          format: password
          type: string
      type: object
    PasswordCredentialHash:
      example:
        salt: salt
        saltOrder: saltOrder
        workFactor: 0
        value: value
        algorithm: null
      properties:
        algorithm:
          $ref: '#/components/schemas/PasswordCredentialHashAlgorithm'
        salt:
          type: string
        saltOrder:
          type: string
        value:
          type: string
        workFactor:
          type: integer
      type: object
    PasswordCredentialHashAlgorithm:
      enum:
      - BCRYPT
      - MD5
      - SHA-1
      - SHA-256
      - SHA-512
      type: string
    PasswordCredentialHook:
      example:
        type: type
      properties:
        type:
          type: string
      type: object
    PasswordDictionary:
      properties:
        common:
          $ref: '#/components/schemas/PasswordDictionaryCommon'
      type: object
    PasswordDictionaryCommon:
      properties:
        exclude:
          default: false
          type: boolean
      type: object
    PasswordExpirationPolicyRuleCondition:
      properties:
        number:
          type: integer
        unit:
          type: string
      type: object
    PasswordPolicy:
      allOf:
      - $ref: '#/components/schemas/Policy'
      - $ref: '#/components/schemas/PasswordPolicy_allOf'
    PasswordPolicyAuthenticationProviderCondition:
      properties:
        include:
          items:
            type: string
          type: array
        provider:
          $ref: '#/components/schemas/PasswordPolicyAuthenticationProviderType'
      type: object
    PasswordPolicyAuthenticationProviderType:
      enum:
      - ACTIVE_DIRECTORY
      - ANY
      - LDAP
      - OKTA
      type: string
    PasswordPolicyConditions:
      allOf:
      - $ref: '#/components/schemas/PolicyRuleConditions'
      - $ref: '#/components/schemas/PasswordPolicyConditions_allOf'
    PasswordPolicyDelegationSettings:
      properties:
        options:
          $ref: '#/components/schemas/PasswordPolicyDelegationSettingsOptions'
      type: object
    PasswordPolicyDelegationSettingsOptions:
      properties:
        skipUnlock:
          type: boolean
      type: object
    PasswordPolicyPasswordSettings:
      properties:
        age:
          $ref: '#/components/schemas/PasswordPolicyPasswordSettingsAge'
        complexity:
          $ref: '#/components/schemas/PasswordPolicyPasswordSettingsComplexity'
        lockout:
          $ref: '#/components/schemas/PasswordPolicyPasswordSettingsLockout'
      type: object
    PasswordPolicyPasswordSettingsAge:
      properties:
        expireWarnDays:
          type: integer
        historyCount:
          type: integer
        maxAgeDays:
          type: integer
        minAgeMinutes:
          type: integer
      type: object
    PasswordPolicyPasswordSettingsComplexity:
      properties:
        dictionary:
          $ref: '#/components/schemas/PasswordDictionary'
        excludeAttributes:
          items:
            type: string
          type: array
        excludeUsername:
          default: true
          type: boolean
        minLength:
          type: integer
        minLowerCase:
          type: integer
        minNumber:
          type: integer
        minSymbol:
          type: integer
        minUpperCase:
          type: integer
      type: object
    PasswordPolicyPasswordSettingsLockout:
      properties:
        autoUnlockMinutes:
          type: integer
        maxAttempts:
          type: integer
        showLockoutFailures:
          type: boolean
        userLockoutNotificationChannels:
          items:
            type: string
          type: array
      type: object
    PasswordPolicyRecoveryEmail:
      properties:
        properties:
          $ref: '#/components/schemas/PasswordPolicyRecoveryEmailProperties'
        status:
          $ref: '#/components/schemas/LifecycleStatus'
      type: object
    PasswordPolicyRecoveryEmailProperties:
      properties:
        recoveryToken:
          $ref: '#/components/schemas/PasswordPolicyRecoveryEmailRecoveryToken'
      type: object
    PasswordPolicyRecoveryEmailRecoveryToken:
      properties:
        tokenLifetimeMinutes:
          type: integer
      type: object
    PasswordPolicyRecoveryFactorSettings:
      properties:
        status:
          $ref: '#/components/schemas/LifecycleStatus'
      type: object
    PasswordPolicyRecoveryFactors:
      properties:
        okta_call:
          $ref: '#/components/schemas/PasswordPolicyRecoveryFactorSettings'
        okta_email:
          $ref: '#/components/schemas/PasswordPolicyRecoveryEmail'
        okta_sms:
          $ref: '#/components/schemas/PasswordPolicyRecoveryFactorSettings'
        recovery_question:
          $ref: '#/components/schemas/PasswordPolicyRecoveryQuestion'
      type: object
    PasswordPolicyRecoveryQuestion:
      properties:
        properties:
          $ref: '#/components/schemas/PasswordPolicyRecoveryQuestionProperties'
        status:
          $ref: '#/components/schemas/LifecycleStatus'
      type: object
    PasswordPolicyRecoveryQuestionComplexity:
      properties:
        minLength:
          readOnly: true
          type: integer
      type: object
    PasswordPolicyRecoveryQuestionProperties:
      properties:
        complexity:
          $ref: '#/components/schemas/PasswordPolicyRecoveryQuestionComplexity'
      type: object
    PasswordPolicyRecoverySettings:
      properties:
        factors:
          $ref: '#/components/schemas/PasswordPolicyRecoveryFactors'
      type: object
    PasswordPolicyRule:
      allOf:
      - $ref: '#/components/schemas/PolicyRule'
      - $ref: '#/components/schemas/PasswordPolicyRule_allOf'
    PasswordPolicyRuleAction:
      properties:
        access:
          $ref: '#/components/schemas/PolicyAccess'
      type: object
    PasswordPolicyRuleActions:
      allOf:
      - $ref: '#/components/schemas/PolicyRuleActions'
      - $ref: '#/components/schemas/PasswordPolicyRuleActions_allOf'
    PasswordPolicyRuleConditions:
      allOf:
      - $ref: '#/components/schemas/PolicyRuleConditions'
      - $ref: '#/components/schemas/PasswordPolicyRuleConditions_allOf'
    PasswordPolicySettings:
      properties:
        delegation:
          $ref: '#/components/schemas/PasswordPolicyDelegationSettings'
        password:
          $ref: '#/components/schemas/PasswordPolicyPasswordSettings'
        recovery:
          $ref: '#/components/schemas/PasswordPolicyRecoverySettings'
      type: object
    PasswordSettingObject:
      example:
        seed: null
        change: null
        status: null
      properties:
        change:
          $ref: '#/components/schemas/ChangeEnum'
        seed:
          $ref: '#/components/schemas/SeedEnum'
        status:
          $ref: '#/components/schemas/EnabledStatus'
      type: object
    PerClientRateLimitMode:
      enum:
      - DISABLE
      - ENFORCE
      - PREVIEW
      type: string
    PerClientRateLimitSettings:
      description: ""
      example:
        defaultMode: null
        useCaseModeOverrides:
          LOGIN_PAGE: null
          OIE_APP_INTENT: null
          OAUTH2_AUTHORIZE: null
      properties:
        defaultMode:
          $ref: '#/components/schemas/PerClientRateLimitMode'
        useCaseModeOverrides:
          $ref: '#/components/schemas/PerClientRateLimitSettings_useCaseModeOverrides'
      required:
      - defaultMode
      title: PerClientRateLimitSettings
      type: object
    Permission:
      example:
        lastUpdated: 2000-01-23T04:56:07.000+00:00
        _links:
          role:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          self:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
        created: 2000-01-23T04:56:07.000+00:00
        label: label
      properties:
        created:
          description: Timestamp when the role was created
          format: date-time
          readOnly: true
          type: string
        label:
          description: The permission type
          readOnly: true
          type: string
        lastUpdated:
          description: Timestamp when the role was last updated
          format: date-time
          readOnly: true
          type: string
        _links:
          $ref: '#/components/schemas/Permission__links'
      type: object
    Permissions:
      example:
        permissions:
        - lastUpdated: 2000-01-23T04:56:07.000+00:00
          _links:
            role:
              hints:
                allow:
                - null
                - null
              name: name
              href: href
              type: type
            self:
              hints:
                allow:
                - null
                - null
              name: name
              href: href
              type: type
          created: 2000-01-23T04:56:07.000+00:00
          label: label
        - lastUpdated: 2000-01-23T04:56:07.000+00:00
          _links:
            role:
              hints:
                allow:
                - null
                - null
              name: name
              href: href
              type: type
            self:
              hints:
                allow:
                - null
                - null
              name: name
              href: href
              type: type
          created: 2000-01-23T04:56:07.000+00:00
          label: label
      properties:
        permissions:
          items:
            $ref: '#/components/schemas/Permission'
          type: array
      type: object
    PipelineType:
      description: "The authentication pipeline of the org. `idx` means the org is\
        \ using the Identity Engine, while `v1` means the org is using the Classic\
        \ authentication pipeline."
      enum:
      - idx
      - v1
      type: string
    Platform:
      enum:
      - ANDROID
      - IOS
      - MACOS
      - WINDOWS
      type: string
    PlatformConditionEvaluatorPlatform:
      properties:
        os:
          $ref: '#/components/schemas/PlatformConditionEvaluatorPlatformOperatingSystem'
        type:
          $ref: '#/components/schemas/PolicyPlatformType'
      type: object
    PlatformConditionEvaluatorPlatformOperatingSystem:
      properties:
        expression:
          type: string
        type:
          $ref: '#/components/schemas/PolicyPlatformOperatingSystemType'
        version:
          $ref: '#/components/schemas/PlatformConditionEvaluatorPlatformOperatingSystemVersion'
      type: object
    PlatformConditionEvaluatorPlatformOperatingSystemVersion:
      properties:
        matchType:
          $ref: '#/components/schemas/PlatformConditionOperatingSystemVersionMatchType'
        value:
          type: string
      type: object
    PlatformConditionOperatingSystemVersionMatchType:
      enum:
      - EXPRESSION
      - SEMVER
      type: string
    PlatformPolicyRuleCondition:
      properties:
        exclude:
          items:
            $ref: '#/components/schemas/PlatformConditionEvaluatorPlatform'
          type: array
        include:
          items:
            $ref: '#/components/schemas/PlatformConditionEvaluatorPlatform'
          type: array
      type: object
    Policy:
      discriminator:
        mapping:
          ACCESS_POLICY: '#/components/schemas/AccessPolicy'
          IDP_DISCOVERY: '#/components/schemas/IdentityProviderPolicy'
          MFA_ENROLL: '#/components/schemas/MultifactorEnrollmentPolicy'
          OAUTH_AUTHORIZATION_POLICY: '#/components/schemas/AuthorizationServerPolicy'
          OKTA_SIGN_ON: '#/components/schemas/OktaSignOnPolicy'
          PASSWORD: '#/components/schemas/PasswordPolicy'
          PROFILE_ENROLLMENT: '#/components/schemas/ProfileEnrollmentPolicy'
        propertyName: type
      properties:
        created:
          format: date-time
          readOnly: true
          type: string
        description:
          type: string
        id:
          readOnly: true
          type: string
        lastUpdated:
          format: date-time
          readOnly: true
          type: string
        name:
          type: string
        priority:
          type: integer
        status:
          $ref: '#/components/schemas/LifecycleStatus'
        system:
          type: boolean
        type:
          $ref: '#/components/schemas/PolicyType'
        _embedded:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
        _links:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
      type: object
    PolicyAccess:
      enum:
      - ALLOW
      - DENY
      type: string
    PolicyAccountLink:
      properties:
        action:
          $ref: '#/components/schemas/PolicyAccountLinkAction'
        filter:
          $ref: '#/components/schemas/PolicyAccountLinkFilter'
      type: object
    PolicyAccountLinkAction:
      enum:
      - AUTO
      - DISABLED
      type: string
    PolicyAccountLinkFilter:
      properties:
        groups:
          $ref: '#/components/schemas/PolicyAccountLinkFilterGroups'
      type: object
    PolicyAccountLinkFilterGroups:
      properties:
        include:
          items:
            type: string
          type: array
      type: object
    PolicyNetworkCondition:
      properties:
        connection:
          $ref: '#/components/schemas/PolicyNetworkConnection'
        exclude:
          items:
            type: string
          type: array
        include:
          items:
            type: string
          type: array
      type: object
    PolicyNetworkConnection:
      enum:
      - ANYWHERE
      - ZONE
      type: string
    PolicyPeopleCondition:
      properties:
        groups:
          $ref: '#/components/schemas/GroupCondition'
        users:
          $ref: '#/components/schemas/UserCondition'
      type: object
    PolicyPlatformOperatingSystemType:
      enum:
      - ANDROID
      - ANY
      - IOS
      - OSX
      - OTHER
      - WINDOWS
      type: string
    PolicyPlatformType:
      enum:
      - ANY
      - DESKTOP
      - MOBILE
      - OTHER
      type: string
    PolicyRule:
      discriminator:
        mapping:
          ACCESS_POLICY: '#/components/schemas/AccessPolicyRule'
          PASSWORD: '#/components/schemas/PasswordPolicyRule'
          PROFILE_ENROLLMENT: '#/components/schemas/ProfileEnrollmentPolicyRule'
          RESOURCE_ACCESS: '#/components/schemas/AuthorizationServerPolicyRule'
          SIGN_ON: '#/components/schemas/OktaSignOnPolicyRule'
        propertyName: type
      properties:
        created:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        id:
          type: string
        lastUpdated:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        name:
          type: string
        priority:
          type: integer
        status:
          $ref: '#/components/schemas/LifecycleStatus'
        system:
          default: false
          type: boolean
        type:
          $ref: '#/components/schemas/PolicyRuleType'
      type: object
    PolicyRuleActions:
      properties:
        enroll:
          $ref: '#/components/schemas/PolicyRuleActionsEnroll'
        idp:
          $ref: '#/components/schemas/IdpPolicyRuleAction'
        passwordChange:
          $ref: '#/components/schemas/PasswordPolicyRuleAction'
        selfServicePasswordReset:
          $ref: '#/components/schemas/PasswordPolicyRuleAction'
        selfServiceUnlock:
          $ref: '#/components/schemas/PasswordPolicyRuleAction'
        signon:
          $ref: '#/components/schemas/OktaSignOnPolicyRuleSignonActions'
      type: object
    PolicyRuleActionsEnroll:
      properties:
        self:
          $ref: '#/components/schemas/PolicyRuleActionsEnrollSelf'
      type: object
    PolicyRuleActionsEnrollSelf:
      enum:
      - CHALLENGE
      - LOGIN
      - NEVER
      type: string
    PolicyRuleAuthContextCondition:
      properties:
        authType:
          $ref: '#/components/schemas/PolicyRuleAuthContextType'
      type: object
    PolicyRuleAuthContextType:
      enum:
      - ANY
      - RADIUS
      type: string
    PolicyRuleConditions:
      properties:
        app:
          $ref: '#/components/schemas/AppAndInstancePolicyRuleCondition'
        apps:
          $ref: '#/components/schemas/AppInstancePolicyRuleCondition'
        authContext:
          $ref: '#/components/schemas/PolicyRuleAuthContextCondition'
        authProvider:
          $ref: '#/components/schemas/PasswordPolicyAuthenticationProviderCondition'
        beforeScheduledAction:
          $ref: '#/components/schemas/BeforeScheduledActionPolicyRuleCondition'
        clients:
          $ref: '#/components/schemas/ClientPolicyCondition'
        context:
          $ref: '#/components/schemas/ContextPolicyRuleCondition'
        device:
          $ref: '#/components/schemas/DevicePolicyRuleCondition'
        grantTypes:
          $ref: '#/components/schemas/GrantTypePolicyRuleCondition'
        groups:
          $ref: '#/components/schemas/GroupPolicyRuleCondition'
        identityProvider:
          $ref: '#/components/schemas/IdentityProviderPolicyRuleCondition'
        mdmEnrollment:
          $ref: '#/components/schemas/MDMEnrollmentPolicyRuleCondition'
        network:
          $ref: '#/components/schemas/PolicyNetworkCondition'
        people:
          $ref: '#/components/schemas/PolicyPeopleCondition'
        platform:
          $ref: '#/components/schemas/PlatformPolicyRuleCondition'
        risk:
          $ref: '#/components/schemas/RiskPolicyRuleCondition'
        riskScore:
          $ref: '#/components/schemas/RiskScorePolicyRuleCondition'
        scopes:
          $ref: '#/components/schemas/OAuth2ScopesMediationPolicyRuleCondition'
        userIdentifier:
          $ref: '#/components/schemas/UserIdentifierPolicyRuleCondition'
        users:
          $ref: '#/components/schemas/UserPolicyRuleCondition'
        userStatus:
          $ref: '#/components/schemas/UserStatusPolicyRuleCondition'
      type: object
    PolicyRuleType:
      enum:
      - ACCESS_POLICY
      - IDP_DISCOVERY
      - MFA_ENROLL
      - PASSWORD
      - PROFILE_ENROLLMENT
      - RESOURCE_ACCESS
      - SIGN_ON
      type: string
    PolicySubject:
      properties:
        filter:
          type: string
        format:
          items:
            type: string
          type: array
        matchAttribute:
          type: string
        matchType:
          $ref: '#/components/schemas/PolicySubjectMatchType'
        userNameTemplate:
          $ref: '#/components/schemas/PolicyUserNameTemplate'
      type: object
    PolicySubjectMatchType:
      enum:
      - CUSTOM_ATTRIBUTE
      - EMAIL
      - USERNAME
      - USERNAME_OR_EMAIL
      type: string
    PolicyType:
      enum:
      - ACCESS_POLICY
      - IDP_DISCOVERY
      - MFA_ENROLL
      - OAUTH_AUTHORIZATION_POLICY
      - OKTA_SIGN_ON
      - PASSWORD
      - PROFILE_ENROLLMENT
      type: string
    PolicyUserNameTemplate:
      properties:
        template:
          type: string
      type: object
    PolicyUserStatus:
      enum:
      - ACTIVATING
      - ACTIVE
      - DELETED
      - DELETING
      - EXPIRED_PASSWORD
      - INACTIVE
      - PENDING
      - SUSPENDED
      type: string
    PossessionConstraint:
      allOf:
      - $ref: '#/components/schemas/AccessPolicyConstraint'
      - $ref: '#/components/schemas/PossessionConstraint_allOf'
    PreRegistrationInlineHook:
      properties:
        inlineHookId:
          type: string
      type: object
    PrincipalRateLimitEntity:
      description: ""
      example:
        defaultConcurrencyPercentage: 0
        lastUpdatedBy: lastUpdatedBy
        createdDate: 2000-01-23T04:56:07.000+00:00
        createdBy: createdBy
        lastUpdate: 2000-01-23T04:56:07.000+00:00
        defaultPercentage: 6
        principalId: principalId
        id: id
        orgId: orgId
        principalType: null
      properties:
        createdBy:
          readOnly: true
          type: string
        createdDate:
          format: date-time
          readOnly: true
          type: string
        defaultConcurrencyPercentage:
          readOnly: true
          type: integer
        defaultPercentage:
          readOnly: true
          type: integer
        id:
          readOnly: true
          type: string
        lastUpdate:
          format: date-time
          readOnly: true
          type: string
        lastUpdatedBy:
          readOnly: true
          type: string
        orgId:
          readOnly: true
          type: string
        principalId:
          type: string
        principalType:
          $ref: '#/components/schemas/PrincipalType'
      required:
      - principalId
      - principalType
      title: PrincipalRateLimitEntity
      type: object
    PrincipalType:
      enum:
      - SSWS_TOKEN
      type: string
    ProfileEnrollmentPolicy:
      allOf:
      - $ref: '#/components/schemas/Policy'
      - $ref: '#/components/schemas/AccessPolicy_allOf'
    ProfileEnrollmentPolicyRule:
      allOf:
      - $ref: '#/components/schemas/PolicyRule'
      - $ref: '#/components/schemas/ProfileEnrollmentPolicyRule_allOf'
    ProfileEnrollmentPolicyRuleAction:
      properties:
        access:
          type: string
        activationRequirements:
          $ref: '#/components/schemas/ProfileEnrollmentPolicyRuleActivationRequirement'
        preRegistrationInlineHooks:
          items:
            $ref: '#/components/schemas/PreRegistrationInlineHook'
          type: array
        profileAttributes:
          items:
            $ref: '#/components/schemas/ProfileEnrollmentPolicyRuleProfileAttribute'
          type: array
        targetGroupIds:
          items:
            type: string
          type: array
        unknownUserAction:
          type: string
      type: object
    ProfileEnrollmentPolicyRuleActions:
      allOf:
      - $ref: '#/components/schemas/PolicyRuleActions'
      - $ref: '#/components/schemas/ProfileEnrollmentPolicyRuleActions_allOf'
    ProfileEnrollmentPolicyRuleActivationRequirement:
      properties:
        emailVerification:
          type: boolean
      type: object
    ProfileEnrollmentPolicyRuleProfileAttribute:
      properties:
        label:
          type: string
        name:
          type: string
        required:
          type: boolean
      type: object
    ProfileMapping:
      example:
        _links:
          key: "{}"
        id: id
        source:
          _links:
            key: "{}"
          name: name
          id: id
          type: type
        properties:
          key:
            expression: expression
            pushStatus: null
        target:
          _links:
            key: "{}"
          name: name
          id: id
          type: type
      properties:
        id:
          readOnly: true
          type: string
        properties:
          additionalProperties:
            $ref: '#/components/schemas/ProfileMappingProperty'
          readOnly: true
          type: object
        source:
          $ref: '#/components/schemas/ProfileMappingSource'
        target:
          $ref: '#/components/schemas/ProfileMappingSource'
        _links:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
      type: object
    ProfileMappingProperty:
      example:
        expression: expression
        pushStatus: null
      properties:
        expression:
          type: string
        pushStatus:
          $ref: '#/components/schemas/ProfileMappingPropertyPushStatus'
      type: object
    ProfileMappingPropertyPushStatus:
      enum:
      - DONT_PUSH
      - PUSH
      type: string
    ProfileMappingSource:
      example:
        _links:
          key: "{}"
        name: name
        id: id
        type: type
      properties:
        id:
          readOnly: true
          type: string
        name:
          readOnly: true
          type: string
        type:
          readOnly: true
          type: string
        _links:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
      type: object
    ProfileSettingObject:
      example:
        status: null
      properties:
        status:
          $ref: '#/components/schemas/EnabledStatus'
      type: object
    Protocol:
      example:
        algorithms:
          request:
            signature:
              scope: null
              algorithm: algorithm
          response:
            signature:
              scope: null
              algorithm: algorithm
        relayState:
          format: null
        settings:
          nameFormat: nameFormat
        endpoints:
          acs:
            destination: destination
            binding: null
            type: null
            url: url
          authorization:
            destination: destination
            binding: null
            type: null
            url: url
          userInfo:
            destination: destination
            binding: null
            type: null
            url: url
          metadata:
            destination: destination
            binding: null
            type: null
            url: url
          jwks:
            destination: destination
            binding: null
            type: null
            url: url
          slo:
            destination: destination
            binding: null
            type: null
            url: url
          sso:
            destination: destination
            binding: null
            type: null
            url: url
          token:
            destination: destination
            binding: null
            type: null
            url: url
        credentials:
          trust:
            revocation: null
            audience: audience
            revocationCacheLifetime: 0
            kid: kid
            issuer: issuer
          client:
            client_secret: client_secret
            client_id: client_id
          signing:
            kid: kid
        scopes:
        - scopes
        - scopes
        type: null
        issuer:
          destination: destination
          binding: null
          type: null
          url: url
      properties:
        algorithms:
          $ref: '#/components/schemas/ProtocolAlgorithms'
        credentials:
          $ref: '#/components/schemas/IdentityProviderCredentials'
        endpoints:
          $ref: '#/components/schemas/ProtocolEndpoints'
        issuer:
          $ref: '#/components/schemas/ProtocolEndpoint'
        relayState:
          $ref: '#/components/schemas/ProtocolRelayState'
        scopes:
          items:
            type: string
          type: array
        settings:
          $ref: '#/components/schemas/ProtocolSettings'
        type:
          $ref: '#/components/schemas/ProtocolType'
      type: object
    ProtocolAlgorithmType:
      example:
        signature:
          scope: null
          algorithm: algorithm
      properties:
        signature:
          $ref: '#/components/schemas/ProtocolAlgorithmTypeSignature'
      type: object
    ProtocolAlgorithmTypeSignature:
      example:
        scope: null
        algorithm: algorithm
      properties:
        algorithm:
          type: string
        scope:
          $ref: '#/components/schemas/ProtocolAlgorithmTypeSignatureScope'
      type: object
    ProtocolAlgorithmTypeSignatureScope:
      enum:
      - ANY
      - NONE
      - REQUEST
      - RESPONSE
      - TOKEN
      type: string
    ProtocolAlgorithms:
      example:
        request:
          signature:
            scope: null
            algorithm: algorithm
        response:
          signature:
            scope: null
            algorithm: algorithm
      properties:
        request:
          $ref: '#/components/schemas/ProtocolAlgorithmType'
        response:
          $ref: '#/components/schemas/ProtocolAlgorithmType'
      type: object
    ProtocolEndpoint:
      example:
        destination: destination
        binding: null
        type: null
        url: url
      properties:
        binding:
          $ref: '#/components/schemas/ProtocolEndpointBinding'
        destination:
          type: string
        type:
          $ref: '#/components/schemas/ProtocolEndpointType'
        url:
          type: string
      type: object
    ProtocolEndpointBinding:
      enum:
      - HTTP-POST
      - HTTP-REDIRECT
      type: string
    ProtocolEndpointType:
      enum:
      - INSTANCE
      - ORG
      type: string
    ProtocolEndpoints:
      example:
        acs:
          destination: destination
          binding: null
          type: null
          url: url
        authorization:
          destination: destination
          binding: null
          type: null
          url: url
        userInfo:
          destination: destination
          binding: null
          type: null
          url: url
        metadata:
          destination: destination
          binding: null
          type: null
          url: url
        jwks:
          destination: destination
          binding: null
          type: null
          url: url
        slo:
          destination: destination
          binding: null
          type: null
          url: url
        sso:
          destination: destination
          binding: null
          type: null
          url: url
        token:
          destination: destination
          binding: null
          type: null
          url: url
      properties:
        acs:
          $ref: '#/components/schemas/ProtocolEndpoint'
        authorization:
          $ref: '#/components/schemas/ProtocolEndpoint'
        jwks:
          $ref: '#/components/schemas/ProtocolEndpoint'
        metadata:
          $ref: '#/components/schemas/ProtocolEndpoint'
        slo:
          $ref: '#/components/schemas/ProtocolEndpoint'
        sso:
          $ref: '#/components/schemas/ProtocolEndpoint'
        token:
          $ref: '#/components/schemas/ProtocolEndpoint'
        userInfo:
          $ref: '#/components/schemas/ProtocolEndpoint'
      type: object
    ProtocolRelayState:
      example:
        format: null
      properties:
        format:
          $ref: '#/components/schemas/ProtocolRelayStateFormat'
      type: object
    ProtocolRelayStateFormat:
      enum:
      - FROM_URL
      - OPAQUE
      type: string
    ProtocolSettings:
      example:
        nameFormat: nameFormat
      properties:
        nameFormat:
          type: string
      type: object
    ProtocolType:
      enum:
      - MTLS
      - OAUTH2
      - OIDC
      - SAML2
      type: string
    ProviderType:
      enum:
      - APNS
      - FCM
      type: string
    Provisioning:
      properties:
        action:
          $ref: '#/components/schemas/ProvisioningAction'
        conditions:
          $ref: '#/components/schemas/ProvisioningConditions'
        groups:
          $ref: '#/components/schemas/ProvisioningGroups'
        profileMaster:
          type: boolean
      type: object
    ProvisioningAction:
      enum:
      - AUTO
      - CALLOUT
      - DISABLED
      type: string
    ProvisioningConditions:
      properties:
        deprovisioned:
          $ref: '#/components/schemas/ProvisioningDeprovisionedCondition'
        suspended:
          $ref: '#/components/schemas/ProvisioningSuspendedCondition'
      type: object
    ProvisioningConnection:
      example:
        _links:
          key: "{}"
        authScheme: null
        status: null
      properties:
        authScheme:
          $ref: '#/components/schemas/ProvisioningConnectionAuthScheme'
        status:
          $ref: '#/components/schemas/ProvisioningConnectionStatus'
        _links:
          additionalProperties:
            type: object
          readOnly: true
          type: object
      type: object
    ProvisioningConnectionAuthScheme:
      enum:
      - TOKEN
      - UNKNOWN
      type: string
    ProvisioningConnectionProfile:
      example:
        authScheme: null
        token: token
      properties:
        authScheme:
          $ref: '#/components/schemas/ProvisioningConnectionAuthScheme'
        token:
          type: string
      type: object
    ProvisioningConnectionRequest:
      example:
        profile:
          authScheme: null
          token: token
      properties:
        profile:
          $ref: '#/components/schemas/ProvisioningConnectionProfile'
      type: object
    ProvisioningConnectionStatus:
      enum:
      - DISABLED
      - ENABLED
      - UNKNOWN
      type: string
    ProvisioningDeprovisionedAction:
      enum:
      - NONE
      - REACTIVATE
      type: string
    ProvisioningDeprovisionedCondition:
      properties:
        action:
          $ref: '#/components/schemas/ProvisioningDeprovisionedAction'
      type: object
    ProvisioningGroups:
      properties:
        action:
          $ref: '#/components/schemas/ProvisioningGroupsAction'
        assignments:
          items:
            type: string
          type: array
        filter:
          items:
            type: string
          type: array
        sourceAttributeName:
          type: string
      type: object
    ProvisioningGroupsAction:
      enum:
      - APPEND
      - ASSIGN
      - NONE
      - SYNC
      type: string
    ProvisioningSuspendedAction:
      enum:
      - NONE
      - UNSUSPEND
      type: string
    ProvisioningSuspendedCondition:
      properties:
        action:
          $ref: '#/components/schemas/ProvisioningSuspendedAction'
      type: object
    PushProvider:
      discriminator:
        mapping:
          APNS: '#/components/schemas/APNSPushProvider'
          FCM: '#/components/schemas/FCMPushProvider'
        propertyName: providerType
      properties:
        id:
          readOnly: true
          type: string
        lastUpdatedDate:
          readOnly: true
          type: string
        name:
          description: Display name of the push provider
          type: string
        providerType:
          $ref: '#/components/schemas/ProviderType'
        _links:
          $ref: '#/components/schemas/ApiToken__link'
      title: PushProvider
      type: object
    PushUserFactor:
      allOf:
      - $ref: '#/components/schemas/UserFactor'
      - $ref: '#/components/schemas/PushUserFactor_allOf'
    PushUserFactorProfile:
      properties:
        credentialId:
          type: string
        deviceToken:
          type: string
        deviceType:
          type: string
        name:
          type: string
        platform:
          type: string
        version:
          type: string
      type: object
    RateLimitAdminNotifications:
      description: ""
      example:
        notificationsEnabled: true
      properties:
        notificationsEnabled:
          type: boolean
      required:
      - notificationsEnabled
      title: RateLimitAdminNotifications
      type: object
    RecoveryQuestionCredential:
      example:
        answer: answer
        question: question
      properties:
        answer:
          type: string
        question:
          type: string
      type: object
    ReleaseChannel:
      description: Release channel for auto-update
      enum:
      - BETA
      - EA
      - GA
      - TEST
      type: string
    RequiredEnum:
      enum:
      - ALWAYS
      - HIGH_RISK_ONLY
      - NEVER
      type: string
    ResetPasswordToken:
      example:
        resetPasswordUrl: resetPasswordUrl
      properties:
        resetPasswordUrl:
          readOnly: true
          type: string
      type: object
    ResourceSet:
      example:
        lastUpdated: 2000-01-23T04:56:07.000+00:00
        _links:
          bindings:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          self:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          resources:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
        created: 2000-01-23T04:56:07.000+00:00
        description: description
        id: id
        label: label
      properties:
        created:
          description: Timestamp when the role was created
          format: date-time
          readOnly: true
          type: string
        description:
          description: Description of the resource set
          type: string
        id:
          description: Unique key for the role
          readOnly: true
          type: string
        label:
          description: Unique label for the resource set
          type: string
        lastUpdated:
          description: Timestamp when the role was last updated
          format: date-time
          readOnly: true
          type: string
        _links:
          $ref: '#/components/schemas/ResourceSet__links'
      type: object
    ResourceSetBindingAddMembersRequest:
      example:
        additions:
        - additions
        - additions
      properties:
        additions:
          items:
            type: string
          type: array
      type: object
    ResourceSetBindingCreateRequest:
      example:
        role: role
        members:
        - members
        - members
      properties:
        members:
          items:
            type: string
          type: array
        role:
          description: Unique key for the role
          type: string
      type: object
    ResourceSetBindingMember:
      example:
        lastUpdated: 2000-01-23T04:56:07.000+00:00
        _links:
          self:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
        created: 2000-01-23T04:56:07.000+00:00
        id: id
      properties:
        created:
          description: Timestamp when the role was created
          format: date-time
          readOnly: true
          type: string
        id:
          description: Unique key for the role
          readOnly: true
          type: string
        lastUpdated:
          description: Timestamp when the role was last updated
          format: date-time
          readOnly: true
          type: string
        _links:
          $ref: '#/components/schemas/ApiToken__link'
      type: object
    ResourceSetBindingMembers:
      example:
        _links:
          next:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          binding:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
        members:
        - lastUpdated: 2000-01-23T04:56:07.000+00:00
          _links:
            self:
              hints:
                allow:
                - null
                - null
              name: name
              href: href
              type: type
          created: 2000-01-23T04:56:07.000+00:00
          id: id
        - lastUpdated: 2000-01-23T04:56:07.000+00:00
          _links:
            self:
              hints:
                allow:
                - null
                - null
              name: name
              href: href
              type: type
          created: 2000-01-23T04:56:07.000+00:00
          id: id
      properties:
        members:
          items:
            $ref: '#/components/schemas/ResourceSetBindingMember'
          type: array
        _links:
          $ref: '#/components/schemas/ResourceSetBindingMembers__links'
      type: object
    ResourceSetBindingResponse:
      example:
        _links:
          resource-set:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          bindings:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          self:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
        id: id
      properties:
        id:
          description: '`id` of the role'
          type: string
        _links:
          $ref: '#/components/schemas/ResourceSetBindingResponse__links'
      type: object
    ResourceSetBindingRole:
      example:
        _links:
          members:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          self:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
        id: id
      properties:
        id:
          type: string
        _links:
          $ref: '#/components/schemas/ResourceSetBindingRole__links'
      type: object
    ResourceSetBindings:
      example:
        _links:
          resource-set:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          bindings:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          self:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
        roles:
        - _links:
            members:
              hints:
                allow:
                - null
                - null
              name: name
              href: href
              type: type
            self:
              hints:
                allow:
                - null
                - null
              name: name
              href: href
              type: type
          id: id
        - _links:
            members:
              hints:
                allow:
                - null
                - null
              name: name
              href: href
              type: type
            self:
              hints:
                allow:
                - null
                - null
              name: name
              href: href
              type: type
          id: id
      properties:
        roles:
          items:
            $ref: '#/components/schemas/ResourceSetBindingRole'
          type: array
        _links:
          $ref: '#/components/schemas/ResourceSetBindingResponse__links'
      type: object
    ResourceSetResource:
      example:
        lastUpdated: 2000-01-23T04:56:07.000+00:00
        _links:
          key: "{}"
        created: 2000-01-23T04:56:07.000+00:00
        description: description
        id: id
      properties:
        created:
          description: Timestamp when the role was created
          format: date-time
          readOnly: true
          type: string
        description:
          description: Description of the resource set
          type: string
        id:
          description: Unique key for the role
          readOnly: true
          type: string
        lastUpdated:
          description: Timestamp when the role was last updated
          format: date-time
          readOnly: true
          type: string
        _links:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
      type: object
    ResourceSetResourcePatchRequest:
      example:
        additions:
        - additions
        - additions
      properties:
        additions:
          items:
            type: string
          type: array
      type: object
    ResourceSetResources:
      example:
        _links:
          next:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          resource-set:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
        resources:
        - lastUpdated: 2000-01-23T04:56:07.000+00:00
          _links:
            key: "{}"
          created: 2000-01-23T04:56:07.000+00:00
          description: description
          id: id
        - lastUpdated: 2000-01-23T04:56:07.000+00:00
          _links:
            key: "{}"
          created: 2000-01-23T04:56:07.000+00:00
          description: description
          id: id
      properties:
        resources:
          items:
            $ref: '#/components/schemas/ResourceSetResource'
          type: array
        _links:
          $ref: '#/components/schemas/ResourceSetResources__links'
      type: object
    ResourceSets:
      example:
        resource-sets:
        - lastUpdated: 2000-01-23T04:56:07.000+00:00
          _links:
            bindings:
              hints:
                allow:
                - null
                - null
              name: name
              href: href
              type: type
            self:
              hints:
                allow:
                - null
                - null
              name: name
              href: href
              type: type
            resources:
              hints:
                allow:
                - null
                - null
              name: name
              href: href
              type: type
          created: 2000-01-23T04:56:07.000+00:00
          description: description
          id: id
          label: label
        - lastUpdated: 2000-01-23T04:56:07.000+00:00
          _links:
            bindings:
              hints:
                allow:
                - null
                - null
              name: name
              href: href
              type: type
            self:
              hints:
                allow:
                - null
                - null
              name: name
              href: href
              type: type
            resources:
              hints:
                allow:
                - null
                - null
              name: name
              href: href
              type: type
          created: 2000-01-23T04:56:07.000+00:00
          description: description
          id: id
          label: label
        _links:
          next:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
      properties:
        resource-sets:
          items:
            $ref: '#/components/schemas/ResourceSet'
          type: array
        _links:
          $ref: '#/components/schemas/IamRoles__links'
      type: object
    ResponseLinks:
      type: object
    RiskEvent:
      example:
        subjects:
        - riskLevel: null
          ip: ip
          message: message
        - riskLevel: null
          ip: ip
          message: message
        expiresAt: 2000-01-23T04:56:07.000+00:00
        timestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        expiresAt:
          description: "Time stamp at which the event expires (Expressed as a UTC\
            \ time zone using ISO 8601 format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z'). If this\
            \ optional field is not included, Okta automatically expires the event\
            \ 24 hours after the event is consumed."
          format: date-time
          type: string
        subjects:
          items:
            $ref: '#/components/schemas/RiskEventSubject'
          type: array
        timestamp:
          description: "Time stamp at which the event is produced (Expressed as a\
            \ UTC time zone using ISO 8601 format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z')."
          format: date-time
          type: string
      required:
      - subjects
      type: object
    RiskEventSubject:
      example:
        riskLevel: null
        ip: ip
        message: message
      properties:
        ip:
          description: Either an IpV4 or IpV6 address.
          type: string
        message:
          description: Any additional message that the provider can send specifying
            the reason for the risk level of the IP.
          maxLength: 512
          pattern: "^[a-zA-Z0-9.\\-_]$"
          type: string
        riskLevel:
          $ref: '#/components/schemas/RiskEventSubjectRiskLevel'
      required:
      - ip
      type: object
    RiskEventSubjectRiskLevel:
      enum:
      - HIGH
      - LOW
      - MEDIUM
      type: string
    RiskPolicyRuleCondition:
      properties:
        behaviors:
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    RiskProvider:
      example:
        lastUpdated: 2000-01-23T04:56:07.000+00:00
        clientId: clientId
        _links:
          self:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
        created: 2000-01-23T04:56:07.000+00:00
        name: name
        action: null
        id: id
      properties:
        action:
          $ref: '#/components/schemas/RiskProviderAction'
        clientId:
          description: "The ID of the [OAuth service app](https://developer.okta.com/docs/guides/implement-oauth-for-okta-serviceapp/main/#create-a-service-app-and-grant-scopes)\
            \ that is used to send risk events to Okta"
          type: string
        created:
          description: Timestamp when the risk provider was created
          format: date-time
          readOnly: true
          type: string
        id:
          description: The ID of the risk provider
          readOnly: true
          type: string
        lastUpdated:
          description: Timestamp when the risk provider was last updated
          format: date-time
          readOnly: true
          type: string
        name:
          description: Name of the risk provider
          maxLength: 50
          type: string
        _links:
          $ref: '#/components/schemas/ApiToken__link'
      required:
      - clientId
      - name
      type: object
    RiskProviderAction:
      default: log_only
      description: The action taken by Okta during authentication attempts based on
        the risk events sent by this provider. Logging can be found in the SystemLogs.
      enum:
      - enforce_and_log
      - log_only
      - none
      type: string
    RiskScorePolicyRuleCondition:
      properties:
        level:
          type: string
      type: object
    Role:
      example:
        lastUpdated: 2000-01-23T04:56:07.000+00:00
        _embedded:
          key: "{}"
        _links:
          key: "{}"
        created: 2000-01-23T04:56:07.000+00:00
        description: description
        id: id
        label: label
        type: null
        assignmentType: null
        status: null
      properties:
        assignmentType:
          $ref: '#/components/schemas/RoleAssignmentType'
        created:
          format: date-time
          readOnly: true
          type: string
        description:
          type: string
        id:
          readOnly: true
          type: string
        label:
          readOnly: true
          type: string
        lastUpdated:
          format: date-time
          readOnly: true
          type: string
        status:
          $ref: '#/components/schemas/LifecycleStatus'
        type:
          $ref: '#/components/schemas/RoleType'
        _embedded:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
        _links:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
      type: object
    RoleAssignmentType:
      enum:
      - GROUP
      - USER
      type: string
    RolePermissionType:
      enum:
      - okta.apps.assignment.manage
      - okta.apps.manage
      - okta.apps.manageFirstPartyApps
      - okta.apps.read
      - okta.authzServers.manage
      - okta.authzServers.read
      - okta.customizations.manage
      - okta.customizations.read
      - okta.governance.accessCertifications.manage
      - okta.governance.accessRequests.manage
      - okta.groups.appAssignment.manage
      - okta.groups.create
      - okta.groups.manage
      - okta.groups.members.manage
      - okta.groups.read
      - okta.profilesources.import.run
      - okta.users.appAssignment.manage
      - okta.users.create
      - okta.users.credentials.expirePassword
      - okta.users.credentials.manage
      - okta.users.credentials.resetFactors
      - okta.users.credentials.resetPassword
      - okta.users.groupMembership.manage
      - okta.users.lifecycle.activate
      - okta.users.lifecycle.clearSessions
      - okta.users.lifecycle.deactivate
      - okta.users.lifecycle.delete
      - okta.users.lifecycle.manage
      - okta.users.lifecycle.suspend
      - okta.users.lifecycle.unlock
      - okta.users.lifecycle.unsuspend
      - okta.users.manage
      - okta.users.read
      - okta.users.userprofile.manage
      type: string
    RoleType:
      enum:
      - API_ACCESS_MANAGEMENT_ADMIN
      - APP_ADMIN
      - GROUP_MEMBERSHIP_ADMIN
      - HELP_DESK_ADMIN
      - MOBILE_ADMIN
      - ORG_ADMIN
      - READ_ONLY_ADMIN
      - REPORT_ADMIN
      - SUPER_ADMIN
      - USER_ADMIN
      type: string
    SamlApplication:
      allOf:
      - $ref: '#/components/schemas/Application'
      - $ref: '#/components/schemas/SamlApplication_allOf'
    SamlApplicationSettings:
      allOf:
      - $ref: '#/components/schemas/ApplicationSettings'
      - $ref: '#/components/schemas/SamlApplicationSettings_allOf'
    SamlApplicationSettingsApplication:
      properties:
        acsUrl:
          type: string
        audRestriction:
          type: string
        baseUrl:
          type: string
      type: object
    SamlApplicationSettingsSignOn:
      properties:
        acsEndpoints:
          items:
            $ref: '#/components/schemas/AcsEndpoint'
          type: array
        allowMultipleAcsEndpoints:
          type: boolean
        assertionSigned:
          type: boolean
        attributeStatements:
          items:
            $ref: '#/components/schemas/SamlAttributeStatement'
          type: array
        audience:
          type: string
        audienceOverride:
          type: string
        authnContextClassRef:
          type: string
        defaultRelayState:
          type: string
        destination:
          type: string
        destinationOverride:
          type: string
        digestAlgorithm:
          type: string
        honorForceAuthn:
          type: boolean
        idpIssuer:
          type: string
        inlineHooks:
          items:
            $ref: '#/components/schemas/SignOnInlineHook'
          type: array
        recipient:
          type: string
        recipientOverride:
          type: string
        requestCompressed:
          type: boolean
        responseSigned:
          type: boolean
        signatureAlgorithm:
          type: string
        slo:
          $ref: '#/components/schemas/SingleLogout'
        spCertificate:
          $ref: '#/components/schemas/SpCertificate'
        spIssuer:
          type: string
        ssoAcsUrl:
          type: string
        ssoAcsUrlOverride:
          type: string
        subjectNameIdFormat:
          type: string
        subjectNameIdTemplate:
          type: string
      type: object
    SamlAttributeStatement:
      properties:
        filterType:
          type: string
        filterValue:
          type: string
        name:
          type: string
        namespace:
          type: string
        type:
          type: string
        values:
          items:
            type: string
          type: array
      type: object
    ScheduledUserLifecycleAction:
      properties:
        status:
          $ref: '#/components/schemas/PolicyUserStatus'
      type: object
    SchemeApplicationCredentials:
      allOf:
      - $ref: '#/components/schemas/ApplicationCredentials'
      - $ref: '#/components/schemas/SchemeApplicationCredentials_allOf'
    ScreenLockType:
      enum:
      - BIOMETRIC
      - PASSCODE
      type: string
    SecurePasswordStoreApplication:
      allOf:
      - $ref: '#/components/schemas/Application'
      - $ref: '#/components/schemas/SecurePasswordStoreApplication_allOf'
      x-okta-defined-as:
        name: template_sps
    SecurePasswordStoreApplicationSettings:
      allOf:
      - $ref: '#/components/schemas/ApplicationSettings'
      - $ref: '#/components/schemas/SecurePasswordStoreApplicationSettings_allOf'
    SecurePasswordStoreApplicationSettingsApplication:
      properties:
        optionalField1:
          type: string
        optionalField1Value:
          type: string
        optionalField2:
          type: string
        optionalField2Value:
          type: string
        optionalField3:
          type: string
        optionalField3Value:
          type: string
        passwordField:
          type: string
        url:
          type: string
        usernameField:
          type: string
      type: object
    SecurityQuestion:
      example:
        answer: answer
        question: question
        questionText: questionText
      properties:
        answer:
          type: string
        question:
          type: string
        questionText:
          type: string
      type: object
    SecurityQuestionUserFactor:
      allOf:
      - $ref: '#/components/schemas/UserFactor'
      - $ref: '#/components/schemas/SecurityQuestionUserFactor_allOf'
    SecurityQuestionUserFactorProfile:
      properties:
        answer:
          type: string
        question:
          type: string
        questionText:
          type: string
      type: object
    SeedEnum:
      enum:
      - OKTA
      - RANDOM
      type: string
    Session:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        lastFactorVerification: 2000-01-23T04:56:07.000+00:00
        idp:
          id: id
          type: null
        _links:
          key: "{}"
        amr:
        - null
        - null
        id: id
        login: login
        userId: userId
        expiresAt: 2000-01-23T04:56:07.000+00:00
        lastPasswordVerification: 2000-01-23T04:56:07.000+00:00
        status: null
      properties:
        amr:
          items:
            $ref: '#/components/schemas/SessionAuthenticationMethod'
          readOnly: true
          type: array
        createdAt:
          format: date-time
          readOnly: true
          type: string
        expiresAt:
          format: date-time
          readOnly: true
          type: string
        id:
          readOnly: true
          type: string
        idp:
          $ref: '#/components/schemas/SessionIdentityProvider'
        lastFactorVerification:
          format: date-time
          readOnly: true
          type: string
        lastPasswordVerification:
          format: date-time
          readOnly: true
          type: string
        login:
          readOnly: true
          type: string
        status:
          $ref: '#/components/schemas/SessionStatus'
        userId:
          readOnly: true
          type: string
        _links:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
      type: object
    SessionAuthenticationMethod:
      enum:
      - fpt
      - geo
      - hwk
      - kba
      - mca
      - mfa
      - otp
      - pwd
      - sc
      - sms
      - swk
      - tel
      type: string
    SessionIdentityProvider:
      example:
        id: id
        type: null
      properties:
        id:
          readOnly: true
          type: string
        type:
          $ref: '#/components/schemas/SessionIdentityProviderType'
      type: object
    SessionIdentityProviderType:
      enum:
      - ACTIVE_DIRECTORY
      - FEDERATION
      - LDAP
      - OKTA
      - SOCIAL
      type: string
    SessionStatus:
      enum:
      - ACTIVE
      - MFA_ENROLL
      - MFA_REQUIRED
      type: string
    SignInPage:
      allOf:
      - $ref: '#/components/schemas/CustomizablePage'
      - $ref: '#/components/schemas/SignInPage_allOf'
    SignInPageTouchPointVariant:
      enum:
      - BACKGROUND_IMAGE
      - BACKGROUND_SECONDARY_COLOR
      - OKTA_DEFAULT
      type: string
    SignOnInlineHook:
      properties:
        id:
          readOnly: false
          type: string
    SingleLogout:
      properties:
        enabled:
          type: boolean
        issuer:
          type: string
        logoutUrl:
          type: string
      type: object
    SmsTemplate:
      example:
        template: template
        lastUpdated: 2000-01-23T04:56:07.000+00:00
        created: 2000-01-23T04:56:07.000+00:00
        translations: "{}"
        name: name
        id: id
        type: null
      properties:
        created:
          format: date-time
          readOnly: true
          type: string
        id:
          readOnly: true
          type: string
        lastUpdated:
          format: date-time
          readOnly: true
          type: string
        name:
          type: string
        template:
          type: string
        translations:
          type: object
          x-okta-extensible: true
        type:
          $ref: '#/components/schemas/SmsTemplateType'
      type: object
    SmsTemplateTranslations:
      type: object
      x-okta-extensible: true
    SmsTemplateType:
      enum:
      - SMS_VERIFY_CODE
      type: string
    SmsUserFactor:
      allOf:
      - $ref: '#/components/schemas/UserFactor'
      - $ref: '#/components/schemas/SmsUserFactor_allOf'
    SmsUserFactorProfile:
      properties:
        phoneNumber:
          type: string
      type: object
    SocialAuthToken:
      example:
        id: id
        scopes:
        - scopes
        - scopes
        tokenType: tokenType
        expiresAt: 2000-01-23T04:56:07.000+00:00
        tokenAuthScheme: tokenAuthScheme
        token: token
      properties:
        expiresAt:
          format: date-time
          readOnly: true
          type: string
        id:
          readOnly: true
          type: string
        scopes:
          items:
            type: string
          type: array
        token:
          type: string
        tokenAuthScheme:
          type: string
        tokenType:
          type: string
      type: object
    SpCertificate:
      properties:
        x5c:
          items:
            type: string
          type: array
      type: object
    Subscription:
      example:
        channels:
        - channels
        - channels
        _links:
          key: "{}"
        notificationType: null
        status: null
      properties:
        channels:
          items:
            type: string
          type: array
        notificationType:
          $ref: '#/components/schemas/NotificationType'
        status:
          $ref: '#/components/schemas/SubscriptionStatus'
        _links:
          additionalProperties:
            type: object
          readOnly: true
          type: object
      type: object
    SubscriptionStatus:
      enum:
      - subscribed
      - unsubscribed
      type: string
    SwaApplicationSettings:
      allOf:
      - $ref: '#/components/schemas/ApplicationSettings'
      - $ref: '#/components/schemas/SwaApplicationSettings_allOf'
    SwaApplicationSettingsApplication:
      properties:
        buttonField:
          type: string
        buttonSelector:
          type: string
        checkbox:
          type: string
        extraFieldSelector:
          type: string
        extraFieldValue:
          type: string
        loginUrlRegex:
          type: string
        passwordField:
          type: string
        passwordSelector:
          type: string
        redirectUrl:
          type: string
        targetURL:
          type: string
        url:
          type: string
        usernameField:
          type: string
        userNameSelector:
          type: string
      type: object
    TempPassword:
      example:
        tempPassword: tempPassword
      properties:
        tempPassword:
          readOnly: true
          type: string
      type: object
    Theme:
      example:
        emailTemplateTouchPointVariant: null
        signInPageTouchPointVariant: null
        primaryColorContrastHex: primaryColorContrastHex
        loadingPageTouchPointVariant: null
        _links:
          key: "{}"
        backgroundImage: backgroundImage
        secondaryColorHex: secondaryColorHex
        secondaryColorContrastHex: secondaryColorContrastHex
        primaryColorHex: primaryColorHex
        errorPageTouchPointVariant: null
        endUserDashboardTouchPointVariant: null
      properties:
        backgroundImage:
          readOnly: true
          type: string
        emailTemplateTouchPointVariant:
          $ref: '#/components/schemas/EmailTemplateTouchPointVariant'
        endUserDashboardTouchPointVariant:
          $ref: '#/components/schemas/EndUserDashboardTouchPointVariant'
        errorPageTouchPointVariant:
          $ref: '#/components/schemas/ErrorPageTouchPointVariant'
        loadingPageTouchPointVariant:
          $ref: '#/components/schemas/LoadingPageTouchPointVariant'
        primaryColorContrastHex:
          type: string
        primaryColorHex:
          type: string
        secondaryColorContrastHex:
          type: string
        secondaryColorHex:
          type: string
        signInPageTouchPointVariant:
          $ref: '#/components/schemas/SignInPageTouchPointVariant'
        _links:
          additionalProperties:
            type: object
          readOnly: true
          type: object
      type: object
    ThemeResponse:
      example:
        primaryColorContrastHex: primaryColorContrastHex
        favicon: favicon
        _links:
          key: "{}"
        backgroundImage: backgroundImage
        secondaryColorHex: secondaryColorHex
        secondaryColorContrastHex: secondaryColorContrastHex
        primaryColorHex: primaryColorHex
        errorPageTouchPointVariant: null
        emailTemplateTouchPointVariant: null
        signInPageTouchPointVariant: null
        loadingPageTouchPointVariant: null
        logo: logo
        id: id
        endUserDashboardTouchPointVariant: null
      properties:
        backgroundImage:
          readOnly: true
          type: string
        emailTemplateTouchPointVariant:
          $ref: '#/components/schemas/EmailTemplateTouchPointVariant'
        endUserDashboardTouchPointVariant:
          $ref: '#/components/schemas/EndUserDashboardTouchPointVariant'
        errorPageTouchPointVariant:
          $ref: '#/components/schemas/ErrorPageTouchPointVariant'
        favicon:
          readOnly: true
          type: string
        id:
          readOnly: true
          type: string
        loadingPageTouchPointVariant:
          $ref: '#/components/schemas/LoadingPageTouchPointVariant'
        logo:
          readOnly: true
          type: string
        primaryColorContrastHex:
          type: string
        primaryColorHex:
          type: string
        secondaryColorContrastHex:
          type: string
        secondaryColorHex:
          type: string
        signInPageTouchPointVariant:
          $ref: '#/components/schemas/SignInPageTouchPointVariant'
        _links:
          additionalProperties:
            type: object
          readOnly: true
          type: object
      type: object
    ThreatInsightConfiguration:
      example:
        lastUpdated: 2000-01-23T04:56:07.000+00:00
        _links:
          key: "{}"
        created: 2000-01-23T04:56:07.000+00:00
        excludeZones:
        - excludeZones
        - excludeZones
        action: action
      properties:
        action:
          type: string
        created:
          format: date-time
          readOnly: true
          type: string
        excludeZones:
          items:
            type: string
          type: array
        lastUpdated:
          format: date-time
          readOnly: true
          type: string
        _links:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
      type: object
    TimeDuration:
      description: "A time duration specified as an [ISO-8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations)."
      pattern: ^P(?!$)(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d)(\d+H)?(\d+M)?(\d+S)?)?$
      type: string
    TokenAuthorizationServerPolicyRuleAction:
      properties:
        accessTokenLifetimeMinutes:
          type: integer
        inlineHook:
          $ref: '#/components/schemas/TokenAuthorizationServerPolicyRuleActionInlineHook'
        refreshTokenLifetimeMinutes:
          type: integer
        refreshTokenWindowMinutes:
          type: integer
      type: object
    TokenAuthorizationServerPolicyRuleActionInlineHook:
      properties:
        id:
          readOnly: false
          type: string
      type: object
    TokenUserFactor:
      allOf:
      - $ref: '#/components/schemas/UserFactor'
      - $ref: '#/components/schemas/TokenUserFactor_allOf'
    TokenUserFactorProfile:
      properties:
        credentialId:
          type: string
      type: object
    TotpUserFactor:
      allOf:
      - $ref: '#/components/schemas/UserFactor'
      - $ref: '#/components/schemas/TotpUserFactor_allOf'
    TotpUserFactorProfile:
      properties:
        credentialId:
          type: string
      type: object
    TrustedOrigin:
      example:
        lastUpdated: 2000-01-23T04:56:07.000+00:00
        lastUpdatedBy: lastUpdatedBy
        createdBy: createdBy
        _links:
          key: "{}"
        created: 2000-01-23T04:56:07.000+00:00
        origin: origin
        name: name
        id: id
        scopes:
        - allowedOktaApps:
          - null
          - null
          type: null
        - allowedOktaApps:
          - null
          - null
          type: null
        status: status
      properties:
        created:
          format: date-time
          readOnly: true
          type: string
        createdBy:
          type: string
        id:
          readOnly: true
          type: string
        lastUpdated:
          format: date-time
          readOnly: true
          type: string
        lastUpdatedBy:
          type: string
        name:
          type: string
        origin:
          type: string
        scopes:
          items:
            $ref: '#/components/schemas/TrustedOriginScope'
          type: array
        status:
          type: string
        _links:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
      type: object
    TrustedOriginScope:
      example:
        allowedOktaApps:
        - null
        - null
        type: null
      properties:
        allowedOktaApps:
          items:
            $ref: '#/components/schemas/IframeEmbedScopeAllowedApps'
          type: array
        type:
          $ref: '#/components/schemas/TrustedOriginScopeType'
      type: object
    TrustedOriginScopeType:
      enum:
      - CORS
      - IFRAME_EMBED
      - REDIRECT
      type: string
    U2fUserFactor:
      allOf:
      - $ref: '#/components/schemas/UserFactor'
      - $ref: '#/components/schemas/U2fUserFactor_allOf'
    U2fUserFactorProfile:
      properties:
        credentialId:
          type: string
      type: object
    UpdateDomain:
      example:
        brandId: brandId
      properties:
        brandId:
          type: string
      type: object
    UpdateEmailDomain:
      allOf:
      - $ref: '#/components/schemas/BaseEmailDomain'
    UpdateUserRequest:
      example:
        credentials:
          password:
            hook:
              type: type
            value: value
            hash:
              salt: salt
              saltOrder: saltOrder
              workFactor: 0
              value: value
              algorithm: null
          provider:
            name: name
            type: null
          recovery_question:
            answer: answer
            question: question
        profile:
          profileUrl: profileUrl
          lastName: lastName
          zipCode: zipCode
          preferredLanguage: preferredLanguage
          city: city
          displayName: displayName
          timezone: timezone
          locale: locale
          login: login
          title: title
          employeeNumber: employeeNumber
          division: division
          honorificSuffix: honorificSuffix
          countryCode: countryCode
          state: state
          department: department
          email: email
          manager: manager
          costCenter: costCenter
          nickName: nickName
          secondEmail: secondEmail
          honorificPrefix: honorificPrefix
          managerId: managerId
          firstName: firstName
          primaryPhone: primaryPhone
          postalAddress: postalAddress
          mobilePhone: mobilePhone
          streetAddress: streetAddress
          organization: organization
          middleName: middleName
          userType: userType
      properties:
        credentials:
          $ref: '#/components/schemas/UserCredentials'
        profile:
          $ref: '#/components/schemas/UserProfile'
      type: object
    User:
      example:
        lastLogin: 2000-01-23T04:56:07.000+00:00
        transitioningToStatus: null
        credentials:
          password:
            hook:
              type: type
            value: value
            hash:
              salt: salt
              saltOrder: saltOrder
              workFactor: 0
              value: value
              algorithm: null
          provider:
            name: name
            type: null
          recovery_question:
            answer: answer
            question: question
        _links:
          key: "{}"
        created: 2000-01-23T04:56:07.000+00:00
        profile:
          profileUrl: profileUrl
          lastName: lastName
          zipCode: zipCode
          preferredLanguage: preferredLanguage
          city: city
          displayName: displayName
          timezone: timezone
          locale: locale
          login: login
          title: title
          employeeNumber: employeeNumber
          division: division
          honorificSuffix: honorificSuffix
          countryCode: countryCode
          state: state
          department: department
          email: email
          manager: manager
          costCenter: costCenter
          nickName: nickName
          secondEmail: secondEmail
          honorificPrefix: honorificPrefix
          managerId: managerId
          firstName: firstName
          primaryPhone: primaryPhone
          postalAddress: postalAddress
          mobilePhone: mobilePhone
          streetAddress: streetAddress
          organization: organization
          middleName: middleName
          userType: userType
        type:
          lastUpdated: 2000-01-23T04:56:07.000+00:00
          lastUpdatedBy: lastUpdatedBy
          default: true
          createdBy: createdBy
          _links:
            key: "{}"
          created: 2000-01-23T04:56:07.000+00:00
          displayName: displayName
          name: name
          description: description
          id: id
        lastUpdated: 2000-01-23T04:56:07.000+00:00
        passwordChanged: 2000-01-23T04:56:07.000+00:00
        _embedded:
          key: "{}"
        statusChanged: 2000-01-23T04:56:07.000+00:00
        id: id
        activated: 2000-01-23T04:56:07.000+00:00
        status: null
      properties:
        activated:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        created:
          format: date-time
          readOnly: true
          type: string
        credentials:
          $ref: '#/components/schemas/UserCredentials'
        id:
          readOnly: true
          type: string
        lastLogin:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        lastUpdated:
          format: date-time
          readOnly: true
          type: string
        passwordChanged:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        profile:
          $ref: '#/components/schemas/UserProfile'
        status:
          $ref: '#/components/schemas/UserStatus'
        statusChanged:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        transitioningToStatus:
          $ref: '#/components/schemas/UserStatus'
        type:
          $ref: '#/components/schemas/UserType'
        _embedded:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
        _links:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
      type: object
    UserActivationToken:
      example:
        activationUrl: activationUrl
        activationToken: activationToken
      properties:
        activationToken:
          readOnly: true
          type: string
        activationUrl:
          readOnly: true
          type: string
      type: object
    UserBlock:
      example:
        appliesTo: appliesTo
        type: type
      properties:
        appliesTo:
          readOnly: true
          type: string
        type:
          readOnly: true
          type: string
      type: object
    UserCondition:
      properties:
        exclude:
          items:
            type: string
          type: array
        include:
          items:
            type: string
          type: array
      type: object
    UserCredentials:
      example:
        password:
          hook:
            type: type
          value: value
          hash:
            salt: salt
            saltOrder: saltOrder
            workFactor: 0
            value: value
            algorithm: null
        provider:
          name: name
          type: null
        recovery_question:
          answer: answer
          question: question
      properties:
        password:
          $ref: '#/components/schemas/PasswordCredential'
        provider:
          $ref: '#/components/schemas/AuthenticationProvider'
        recovery_question:
          $ref: '#/components/schemas/RecoveryQuestionCredential'
      type: object
    UserFactor:
      discriminator:
        mapping:
          call: '#/components/schemas/CallUserFactor'
          email: '#/components/schemas/EmailUserFactor'
          push: '#/components/schemas/PushUserFactor'
          question: '#/components/schemas/SecurityQuestionUserFactor'
          sms: '#/components/schemas/SmsUserFactor'
          token: '#/components/schemas/TokenUserFactor'
          token:hardware: '#/components/schemas/HardwareUserFactor'
          token:hotp: '#/components/schemas/CustomHotpUserFactor'
          token:software:totp: '#/components/schemas/TotpUserFactor'
          u2f: '#/components/schemas/U2fUserFactor'
          web: '#/components/schemas/WebUserFactor'
          webauthn: '#/components/schemas/WebAuthnUserFactor'
          hotp: '#/components/schemas/CustomHotpUserFactor'
        propertyName: factorType
      properties:
        created:
          format: date-time
          readOnly: true
          type: string
        factorType:
          $ref: '#/components/schemas/FactorType'
        id:
          readOnly: true
          type: string
        lastUpdated:
          format: date-time
          readOnly: true
          type: string
        provider:
          $ref: '#/components/schemas/FactorProvider'
        status:
          $ref: '#/components/schemas/FactorStatus'
        verify:
          $ref: '#/components/schemas/VerifyFactorRequest'
        _embedded:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
        _links:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
      type: object
    UserIdentifierConditionEvaluatorPattern:
      properties:
        matchType:
          $ref: '#/components/schemas/UserIdentifierMatchType'
        value:
          type: string
      type: object
    UserIdentifierMatchType:
      enum:
      - CONTAINS
      - EQUALS
      - EXPRESSION
      - STARTS_WITH
      - SUFFIX
      type: string
    UserIdentifierPolicyRuleCondition:
      properties:
        attribute:
          type: string
        patterns:
          items:
            $ref: '#/components/schemas/UserIdentifierConditionEvaluatorPattern'
          type: array
        type:
          $ref: '#/components/schemas/UserIdentifierType'
      type: object
    UserIdentifierType:
      enum:
      - ATTRIBUTE
      - IDENTIFIER
      type: string
    UserIdentityProviderLinkRequest:
      example:
        externalId: externalId
      properties:
        externalId:
          type: string
      type: object
    UserLifecycleAttributePolicyRuleCondition:
      properties:
        attributeName:
          type: string
        matchingValue:
          type: string
      type: object
    UserLockoutSettings:
      example:
        preventBruteForceLockoutFromUnknownDevices: true
      properties:
        preventBruteForceLockoutFromUnknownDevices:
          description: Prevents brute-force lockout from unknown devices for the password
            authenticator.
          type: boolean
      type: object
    UserNextLogin:
      enum:
      - changePassword
      type: string
    UserPolicyRuleCondition:
      properties:
        exclude:
          items:
            type: string
          type: array
        inactivity:
          $ref: '#/components/schemas/InactivityPolicyRuleCondition'
        include:
          items:
            type: string
          type: array
        lifecycleExpiration:
          $ref: '#/components/schemas/LifecycleExpirationPolicyRuleCondition'
        passwordExpiration:
          $ref: '#/components/schemas/PasswordExpirationPolicyRuleCondition'
        userLifecycleAttribute:
          $ref: '#/components/schemas/UserLifecycleAttributePolicyRuleCondition'
      type: object
    UserProfile:
      additionalProperties: true
      example:
        profileUrl: profileUrl
        lastName: lastName
        zipCode: zipCode
        preferredLanguage: preferredLanguage
        city: city
        displayName: displayName
        timezone: timezone
        locale: locale
        login: login
        title: title
        employeeNumber: employeeNumber
        division: division
        honorificSuffix: honorificSuffix
        countryCode: countryCode
        state: state
        department: department
        email: email
        manager: manager
        costCenter: costCenter
        nickName: nickName
        secondEmail: secondEmail
        honorificPrefix: honorificPrefix
        managerId: managerId
        firstName: firstName
        primaryPhone: primaryPhone
        postalAddress: postalAddress
        mobilePhone: mobilePhone
        streetAddress: streetAddress
        organization: organization
        middleName: middleName
        userType: userType
      properties:
        city:
          maxLength: 128
          nullable: true
          type: string
        costCenter:
          type: string
        countryCode:
          maxLength: 2
          nullable: true
          type: string
        department:
          type: string
        displayName:
          type: string
        division:
          type: string
        email:
          format: email
          maxLength: 100
          minLength: 5
          type: string
        employeeNumber:
          type: string
        firstName:
          maxLength: 50
          minLength: 1
          nullable: true
          type: string
        honorificPrefix:
          type: string
        honorificSuffix:
          type: string
        lastName:
          maxLength: 50
          minLength: 1
          nullable: true
          type: string
        locale:
          description: "The language specified as an [IETF BCP 47 language tag](https://datatracker.ietf.org/doc/html/rfc5646)."
          type: string
        login:
          maxLength: 100
          type: string
        manager:
          type: string
        managerId:
          type: string
        middleName:
          type: string
        mobilePhone:
          maxLength: 100
          nullable: true
          type: string
        nickName:
          type: string
        organization:
          type: string
        postalAddress:
          maxLength: 4096
          nullable: true
          type: string
        preferredLanguage:
          type: string
        primaryPhone:
          maxLength: 100
          nullable: true
          type: string
        profileUrl:
          type: string
        secondEmail:
          format: email
          maxLength: 100
          minLength: 5
          nullable: true
          type: string
        state:
          maxLength: 128
          nullable: true
          type: string
        streetAddress:
          maxLength: 1024
          nullable: true
          type: string
        timezone:
          type: string
        title:
          type: string
        userType:
          type: string
        zipCode:
          maxLength: 50
          nullable: true
          type: string
      type: object
    UserSchema:
      example:
        lastUpdated: lastUpdated
        $schema: $schema
        _links:
          key: "{}"
        created: created
        name: name
        id: id
        title: title
        type: type
        definitions:
          custom:
            id: id
            type: type
            properties:
              key:
                minLength: 6
                externalNamespace: externalNamespace
                pattern: pattern
                description: description
                union: null
                title: title
                type: null
                enum:
                - enum
                - enum
                required: true
                master:
                  priority:
                  - type: type
                    value: value
                  - type: type
                    value: value
                  type: null
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                permissions:
                - principal: principal
                  action: action
                - principal: principal
                  action: action
                externalName: externalName
                scope: null
                unique: unique
                mutability: mutability
                items:
                  oneOf:
                  - const: const
                    title: title
                  - const: const
                    title: title
                  type: type
                  enum:
                  - enum
                  - enum
                maxLength: 0
            required:
            - required
            - required
          base:
            id: id
            type: type
            properties:
              profileUrl:
                minLength: 6
                externalNamespace: externalNamespace
                pattern: pattern
                description: description
                union: null
                title: title
                type: null
                enum:
                - enum
                - enum
                required: true
                master:
                  priority:
                  - type: type
                    value: value
                  - type: type
                    value: value
                  type: null
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                permissions:
                - principal: principal
                  action: action
                - principal: principal
                  action: action
                externalName: externalName
                scope: null
                unique: unique
                mutability: mutability
                items:
                  oneOf:
                  - const: const
                    title: title
                  - const: const
                    title: title
                  type: type
                  enum:
                  - enum
                  - enum
                maxLength: 0
              lastName:
                minLength: 6
                externalNamespace: externalNamespace
                pattern: pattern
                description: description
                union: null
                title: title
                type: null
                enum:
                - enum
                - enum
                required: true
                master:
                  priority:
                  - type: type
                    value: value
                  - type: type
                    value: value
                  type: null
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                permissions:
                - principal: principal
                  action: action
                - principal: principal
                  action: action
                externalName: externalName
                scope: null
                unique: unique
                mutability: mutability
                items:
                  oneOf:
                  - const: const
                    title: title
                  - const: const
                    title: title
                  type: type
                  enum:
                  - enum
                  - enum
                maxLength: 0
              zipCode:
                minLength: 6
                externalNamespace: externalNamespace
                pattern: pattern
                description: description
                union: null
                title: title
                type: null
                enum:
                - enum
                - enum
                required: true
                master:
                  priority:
                  - type: type
                    value: value
                  - type: type
                    value: value
                  type: null
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                permissions:
                - principal: principal
                  action: action
                - principal: principal
                  action: action
                externalName: externalName
                scope: null
                unique: unique
                mutability: mutability
                items:
                  oneOf:
                  - const: const
                    title: title
                  - const: const
                    title: title
                  type: type
                  enum:
                  - enum
                  - enum
                maxLength: 0
              preferredLanguage:
                minLength: 6
                externalNamespace: externalNamespace
                pattern: pattern
                description: description
                union: null
                title: title
                type: null
                enum:
                - enum
                - enum
                required: true
                master:
                  priority:
                  - type: type
                    value: value
                  - type: type
                    value: value
                  type: null
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                permissions:
                - principal: principal
                  action: action
                - principal: principal
                  action: action
                externalName: externalName
                scope: null
                unique: unique
                mutability: mutability
                items:
                  oneOf:
                  - const: const
                    title: title
                  - const: const
                    title: title
                  type: type
                  enum:
                  - enum
                  - enum
                maxLength: 0
              city:
                minLength: 6
                externalNamespace: externalNamespace
                pattern: pattern
                description: description
                union: null
                title: title
                type: null
                enum:
                - enum
                - enum
                required: true
                master:
                  priority:
                  - type: type
                    value: value
                  - type: type
                    value: value
                  type: null
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                permissions:
                - principal: principal
                  action: action
                - principal: principal
                  action: action
                externalName: externalName
                scope: null
                unique: unique
                mutability: mutability
                items:
                  oneOf:
                  - const: const
                    title: title
                  - const: const
                    title: title
                  type: type
                  enum:
                  - enum
                  - enum
                maxLength: 0
              displayName:
                minLength: 6
                externalNamespace: externalNamespace
                pattern: pattern
                description: description
                union: null
                title: title
                type: null
                enum:
                - enum
                - enum
                required: true
                master:
                  priority:
                  - type: type
                    value: value
                  - type: type
                    value: value
                  type: null
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                permissions:
                - principal: principal
                  action: action
                - principal: principal
                  action: action
                externalName: externalName
                scope: null
                unique: unique
                mutability: mutability
                items:
                  oneOf:
                  - const: const
                    title: title
                  - const: const
                    title: title
                  type: type
                  enum:
                  - enum
                  - enum
                maxLength: 0
              timezone:
                minLength: 6
                externalNamespace: externalNamespace
                pattern: pattern
                description: description
                union: null
                title: title
                type: null
                enum:
                - enum
                - enum
                required: true
                master:
                  priority:
                  - type: type
                    value: value
                  - type: type
                    value: value
                  type: null
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                permissions:
                - principal: principal
                  action: action
                - principal: principal
                  action: action
                externalName: externalName
                scope: null
                unique: unique
                mutability: mutability
                items:
                  oneOf:
                  - const: const
                    title: title
                  - const: const
                    title: title
                  type: type
                  enum:
                  - enum
                  - enum
                maxLength: 0
              locale:
                minLength: 6
                externalNamespace: externalNamespace
                pattern: pattern
                description: description
                union: null
                title: title
                type: null
                enum:
                - enum
                - enum
                required: true
                master:
                  priority:
                  - type: type
                    value: value
                  - type: type
                    value: value
                  type: null
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                permissions:
                - principal: principal
                  action: action
                - principal: principal
                  action: action
                externalName: externalName
                scope: null
                unique: unique
                mutability: mutability
                items:
                  oneOf:
                  - const: const
                    title: title
                  - const: const
                    title: title
                  type: type
                  enum:
                  - enum
                  - enum
                maxLength: 0
              login:
                minLength: 6
                externalNamespace: externalNamespace
                pattern: pattern
                description: description
                union: null
                title: title
                type: null
                enum:
                - enum
                - enum
                required: true
                master:
                  priority:
                  - type: type
                    value: value
                  - type: type
                    value: value
                  type: null
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                permissions:
                - principal: principal
                  action: action
                - principal: principal
                  action: action
                externalName: externalName
                scope: null
                unique: unique
                mutability: mutability
                items:
                  oneOf:
                  - const: const
                    title: title
                  - const: const
                    title: title
                  type: type
                  enum:
                  - enum
                  - enum
                maxLength: 0
              title:
                minLength: 6
                externalNamespace: externalNamespace
                pattern: pattern
                description: description
                union: null
                title: title
                type: null
                enum:
                - enum
                - enum
                required: true
                master:
                  priority:
                  - type: type
                    value: value
                  - type: type
                    value: value
                  type: null
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                permissions:
                - principal: principal
                  action: action
                - principal: principal
                  action: action
                externalName: externalName
                scope: null
                unique: unique
                mutability: mutability
                items:
                  oneOf:
                  - const: const
                    title: title
                  - const: const
                    title: title
                  type: type
                  enum:
                  - enum
                  - enum
                maxLength: 0
              employeeNumber:
                minLength: 6
                externalNamespace: externalNamespace
                pattern: pattern
                description: description
                union: null
                title: title
                type: null
                enum:
                - enum
                - enum
                required: true
                master:
                  priority:
                  - type: type
                    value: value
                  - type: type
                    value: value
                  type: null
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                permissions:
                - principal: principal
                  action: action
                - principal: principal
                  action: action
                externalName: externalName
                scope: null
                unique: unique
                mutability: mutability
                items:
                  oneOf:
                  - const: const
                    title: title
                  - const: const
                    title: title
                  type: type
                  enum:
                  - enum
                  - enum
                maxLength: 0
              division:
                minLength: 6
                externalNamespace: externalNamespace
                pattern: pattern
                description: description
                union: null
                title: title
                type: null
                enum:
                - enum
                - enum
                required: true
                master:
                  priority:
                  - type: type
                    value: value
                  - type: type
                    value: value
                  type: null
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                permissions:
                - principal: principal
                  action: action
                - principal: principal
                  action: action
                externalName: externalName
                scope: null
                unique: unique
                mutability: mutability
                items:
                  oneOf:
                  - const: const
                    title: title
                  - const: const
                    title: title
                  type: type
                  enum:
                  - enum
                  - enum
                maxLength: 0
              honorificSuffix:
                minLength: 6
                externalNamespace: externalNamespace
                pattern: pattern
                description: description
                union: null
                title: title
                type: null
                enum:
                - enum
                - enum
                required: true
                master:
                  priority:
                  - type: type
                    value: value
                  - type: type
                    value: value
                  type: null
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                permissions:
                - principal: principal
                  action: action
                - principal: principal
                  action: action
                externalName: externalName
                scope: null
                unique: unique
                mutability: mutability
                items:
                  oneOf:
                  - const: const
                    title: title
                  - const: const
                    title: title
                  type: type
                  enum:
                  - enum
                  - enum
                maxLength: 0
              countryCode:
                minLength: 6
                externalNamespace: externalNamespace
                pattern: pattern
                description: description
                union: null
                title: title
                type: null
                enum:
                - enum
                - enum
                required: true
                master:
                  priority:
                  - type: type
                    value: value
                  - type: type
                    value: value
                  type: null
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                permissions:
                - principal: principal
                  action: action
                - principal: principal
                  action: action
                externalName: externalName
                scope: null
                unique: unique
                mutability: mutability
                items:
                  oneOf:
                  - const: const
                    title: title
                  - const: const
                    title: title
                  type: type
                  enum:
                  - enum
                  - enum
                maxLength: 0
              state:
                minLength: 6
                externalNamespace: externalNamespace
                pattern: pattern
                description: description
                union: null
                title: title
                type: null
                enum:
                - enum
                - enum
                required: true
                master:
                  priority:
                  - type: type
                    value: value
                  - type: type
                    value: value
                  type: null
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                permissions:
                - principal: principal
                  action: action
                - principal: principal
                  action: action
                externalName: externalName
                scope: null
                unique: unique
                mutability: mutability
                items:
                  oneOf:
                  - const: const
                    title: title
                  - const: const
                    title: title
                  type: type
                  enum:
                  - enum
                  - enum
                maxLength: 0
              department:
                minLength: 6
                externalNamespace: externalNamespace
                pattern: pattern
                description: description
                union: null
                title: title
                type: null
                enum:
                - enum
                - enum
                required: true
                master:
                  priority:
                  - type: type
                    value: value
                  - type: type
                    value: value
                  type: null
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                permissions:
                - principal: principal
                  action: action
                - principal: principal
                  action: action
                externalName: externalName
                scope: null
                unique: unique
                mutability: mutability
                items:
                  oneOf:
                  - const: const
                    title: title
                  - const: const
                    title: title
                  type: type
                  enum:
                  - enum
                  - enum
                maxLength: 0
              email:
                minLength: 6
                externalNamespace: externalNamespace
                pattern: pattern
                description: description
                union: null
                title: title
                type: null
                enum:
                - enum
                - enum
                required: true
                master:
                  priority:
                  - type: type
                    value: value
                  - type: type
                    value: value
                  type: null
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                permissions:
                - principal: principal
                  action: action
                - principal: principal
                  action: action
                externalName: externalName
                scope: null
                unique: unique
                mutability: mutability
                items:
                  oneOf:
                  - const: const
                    title: title
                  - const: const
                    title: title
                  type: type
                  enum:
                  - enum
                  - enum
                maxLength: 0
              manager:
                minLength: 6
                externalNamespace: externalNamespace
                pattern: pattern
                description: description
                union: null
                title: title
                type: null
                enum:
                - enum
                - enum
                required: true
                master:
                  priority:
                  - type: type
                    value: value
                  - type: type
                    value: value
                  type: null
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                permissions:
                - principal: principal
                  action: action
                - principal: principal
                  action: action
                externalName: externalName
                scope: null
                unique: unique
                mutability: mutability
                items:
                  oneOf:
                  - const: const
                    title: title
                  - const: const
                    title: title
                  type: type
                  enum:
                  - enum
                  - enum
                maxLength: 0
              costCenter:
                minLength: 6
                externalNamespace: externalNamespace
                pattern: pattern
                description: description
                union: null
                title: title
                type: null
                enum:
                - enum
                - enum
                required: true
                master:
                  priority:
                  - type: type
                    value: value
                  - type: type
                    value: value
                  type: null
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                permissions:
                - principal: principal
                  action: action
                - principal: principal
                  action: action
                externalName: externalName
                scope: null
                unique: unique
                mutability: mutability
                items:
                  oneOf:
                  - const: const
                    title: title
                  - const: const
                    title: title
                  type: type
                  enum:
                  - enum
                  - enum
                maxLength: 0
              nickName:
                minLength: 6
                externalNamespace: externalNamespace
                pattern: pattern
                description: description
                union: null
                title: title
                type: null
                enum:
                - enum
                - enum
                required: true
                master:
                  priority:
                  - type: type
                    value: value
                  - type: type
                    value: value
                  type: null
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                permissions:
                - principal: principal
                  action: action
                - principal: principal
                  action: action
                externalName: externalName
                scope: null
                unique: unique
                mutability: mutability
                items:
                  oneOf:
                  - const: const
                    title: title
                  - const: const
                    title: title
                  type: type
                  enum:
                  - enum
                  - enum
                maxLength: 0
              secondEmail:
                minLength: 6
                externalNamespace: externalNamespace
                pattern: pattern
                description: description
                union: null
                title: title
                type: null
                enum:
                - enum
                - enum
                required: true
                master:
                  priority:
                  - type: type
                    value: value
                  - type: type
                    value: value
                  type: null
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                permissions:
                - principal: principal
                  action: action
                - principal: principal
                  action: action
                externalName: externalName
                scope: null
                unique: unique
                mutability: mutability
                items:
                  oneOf:
                  - const: const
                    title: title
                  - const: const
                    title: title
                  type: type
                  enum:
                  - enum
                  - enum
                maxLength: 0
              honorificPrefix:
                minLength: 6
                externalNamespace: externalNamespace
                pattern: pattern
                description: description
                union: null
                title: title
                type: null
                enum:
                - enum
                - enum
                required: true
                master:
                  priority:
                  - type: type
                    value: value
                  - type: type
                    value: value
                  type: null
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                permissions:
                - principal: principal
                  action: action
                - principal: principal
                  action: action
                externalName: externalName
                scope: null
                unique: unique
                mutability: mutability
                items:
                  oneOf:
                  - const: const
                    title: title
                  - const: const
                    title: title
                  type: type
                  enum:
                  - enum
                  - enum
                maxLength: 0
              managerId:
                minLength: 6
                externalNamespace: externalNamespace
                pattern: pattern
                description: description
                union: null
                title: title
                type: null
                enum:
                - enum
                - enum
                required: true
                master:
                  priority:
                  - type: type
                    value: value
                  - type: type
                    value: value
                  type: null
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                permissions:
                - principal: principal
                  action: action
                - principal: principal
                  action: action
                externalName: externalName
                scope: null
                unique: unique
                mutability: mutability
                items:
                  oneOf:
                  - const: const
                    title: title
                  - const: const
                    title: title
                  type: type
                  enum:
                  - enum
                  - enum
                maxLength: 0
              firstName:
                minLength: 6
                externalNamespace: externalNamespace
                pattern: pattern
                description: description
                union: null
                title: title
                type: null
                enum:
                - enum
                - enum
                required: true
                master:
                  priority:
                  - type: type
                    value: value
                  - type: type
                    value: value
                  type: null
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                permissions:
                - principal: principal
                  action: action
                - principal: principal
                  action: action
                externalName: externalName
                scope: null
                unique: unique
                mutability: mutability
                items:
                  oneOf:
                  - const: const
                    title: title
                  - const: const
                    title: title
                  type: type
                  enum:
                  - enum
                  - enum
                maxLength: 0
              primaryPhone:
                minLength: 6
                externalNamespace: externalNamespace
                pattern: pattern
                description: description
                union: null
                title: title
                type: null
                enum:
                - enum
                - enum
                required: true
                master:
                  priority:
                  - type: type
                    value: value
                  - type: type
                    value: value
                  type: null
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                permissions:
                - principal: principal
                  action: action
                - principal: principal
                  action: action
                externalName: externalName
                scope: null
                unique: unique
                mutability: mutability
                items:
                  oneOf:
                  - const: const
                    title: title
                  - const: const
                    title: title
                  type: type
                  enum:
                  - enum
                  - enum
                maxLength: 0
              postalAddress:
                minLength: 6
                externalNamespace: externalNamespace
                pattern: pattern
                description: description
                union: null
                title: title
                type: null
                enum:
                - enum
                - enum
                required: true
                master:
                  priority:
                  - type: type
                    value: value
                  - type: type
                    value: value
                  type: null
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                permissions:
                - principal: principal
                  action: action
                - principal: principal
                  action: action
                externalName: externalName
                scope: null
                unique: unique
                mutability: mutability
                items:
                  oneOf:
                  - const: const
                    title: title
                  - const: const
                    title: title
                  type: type
                  enum:
                  - enum
                  - enum
                maxLength: 0
              mobilePhone:
                minLength: 6
                externalNamespace: externalNamespace
                pattern: pattern
                description: description
                union: null
                title: title
                type: null
                enum:
                - enum
                - enum
                required: true
                master:
                  priority:
                  - type: type
                    value: value
                  - type: type
                    value: value
                  type: null
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                permissions:
                - principal: principal
                  action: action
                - principal: principal
                  action: action
                externalName: externalName
                scope: null
                unique: unique
                mutability: mutability
                items:
                  oneOf:
                  - const: const
                    title: title
                  - const: const
                    title: title
                  type: type
                  enum:
                  - enum
                  - enum
                maxLength: 0
              streetAddress:
                minLength: 6
                externalNamespace: externalNamespace
                pattern: pattern
                description: description
                union: null
                title: title
                type: null
                enum:
                - enum
                - enum
                required: true
                master:
                  priority:
                  - type: type
                    value: value
                  - type: type
                    value: value
                  type: null
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                permissions:
                - principal: principal
                  action: action
                - principal: principal
                  action: action
                externalName: externalName
                scope: null
                unique: unique
                mutability: mutability
                items:
                  oneOf:
                  - const: const
                    title: title
                  - const: const
                    title: title
                  type: type
                  enum:
                  - enum
                  - enum
                maxLength: 0
              organization:
                minLength: 6
                externalNamespace: externalNamespace
                pattern: pattern
                description: description
                union: null
                title: title
                type: null
                enum:
                - enum
                - enum
                required: true
                master:
                  priority:
                  - type: type
                    value: value
                  - type: type
                    value: value
                  type: null
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                permissions:
                - principal: principal
                  action: action
                - principal: principal
                  action: action
                externalName: externalName
                scope: null
                unique: unique
                mutability: mutability
                items:
                  oneOf:
                  - const: const
                    title: title
                  - const: const
                    title: title
                  type: type
                  enum:
                  - enum
                  - enum
                maxLength: 0
              middleName:
                minLength: 6
                externalNamespace: externalNamespace
                pattern: pattern
                description: description
                union: null
                title: title
                type: null
                enum:
                - enum
                - enum
                required: true
                master:
                  priority:
                  - type: type
                    value: value
                  - type: type
                    value: value
                  type: null
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                permissions:
                - principal: principal
                  action: action
                - principal: principal
                  action: action
                externalName: externalName
                scope: null
                unique: unique
                mutability: mutability
                items:
                  oneOf:
                  - const: const
                    title: title
                  - const: const
                    title: title
                  type: type
                  enum:
                  - enum
                  - enum
                maxLength: 0
              userType:
                minLength: 6
                externalNamespace: externalNamespace
                pattern: pattern
                description: description
                union: null
                title: title
                type: null
                enum:
                - enum
                - enum
                required: true
                master:
                  priority:
                  - type: type
                    value: value
                  - type: type
                    value: value
                  type: null
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                permissions:
                - principal: principal
                  action: action
                - principal: principal
                  action: action
                externalName: externalName
                scope: null
                unique: unique
                mutability: mutability
                items:
                  oneOf:
                  - const: const
                    title: title
                  - const: const
                    title: title
                  type: type
                  enum:
                  - enum
                  - enum
                maxLength: 0
            required:
            - required
            - required
        properties:
          profile:
            allOf:
            - $ref: $ref
            - $ref: $ref
      properties:
        $schema:
          readOnly: true
          type: string
        created:
          readOnly: true
          type: string
        definitions:
          $ref: '#/components/schemas/UserSchemaDefinitions'
        id:
          readOnly: true
          type: string
        lastUpdated:
          readOnly: true
          type: string
        name:
          readOnly: true
          type: string
        properties:
          $ref: '#/components/schemas/UserSchemaProperties'
        title:
          type: string
        type:
          readOnly: true
          type: string
        _links:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
      type: object
    UserSchemaAttribute:
      example:
        minLength: 6
        externalNamespace: externalNamespace
        pattern: pattern
        description: description
        union: null
        title: title
        type: null
        enum:
        - enum
        - enum
        required: true
        master:
          priority:
          - type: type
            value: value
          - type: type
            value: value
          type: null
        oneOf:
        - const: const
          title: title
        - const: const
          title: title
        permissions:
        - principal: principal
          action: action
        - principal: principal
          action: action
        externalName: externalName
        scope: null
        unique: unique
        mutability: mutability
        items:
          oneOf:
          - const: const
            title: title
          - const: const
            title: title
          type: type
          enum:
          - enum
          - enum
        maxLength: 0
      properties:
        description:
          type: string
        enum:
          items:
            type: string
          type: array
        externalName:
          type: string
        externalNamespace:
          type: string
        items:
          $ref: '#/components/schemas/UserSchemaAttributeItems'
        master:
          $ref: '#/components/schemas/UserSchemaAttributeMaster'
        maxLength:
          type: integer
        minLength:
          type: integer
        mutability:
          type: string
        oneOf:
          items:
            $ref: '#/components/schemas/UserSchemaAttributeEnum'
          type: array
        pattern:
          type: string
        permissions:
          items:
            $ref: '#/components/schemas/UserSchemaAttributePermission'
          type: array
        required:
          type: boolean
        scope:
          $ref: '#/components/schemas/UserSchemaAttributeScope'
        title:
          type: string
        type:
          $ref: '#/components/schemas/UserSchemaAttributeType'
        union:
          $ref: '#/components/schemas/UserSchemaAttributeUnion'
        unique:
          type: string
      type: object
      x-okta-allow-null-property-value-for-updates: true
    UserSchemaAttributeEnum:
      example:
        const: const
        title: title
      properties:
        const:
          type: string
        title:
          type: string
      type: object
    UserSchemaAttributeItems:
      example:
        oneOf:
        - const: const
          title: title
        - const: const
          title: title
        type: type
        enum:
        - enum
        - enum
      properties:
        enum:
          items:
            type: string
          type: array
        oneOf:
          items:
            $ref: '#/components/schemas/UserSchemaAttributeEnum'
          type: array
        type:
          type: string
      type: object
    UserSchemaAttributeMaster:
      example:
        priority:
        - type: type
          value: value
        - type: type
          value: value
        type: null
      properties:
        priority:
          items:
            $ref: '#/components/schemas/UserSchemaAttributeMasterPriority'
          type: array
        type:
          $ref: '#/components/schemas/UserSchemaAttributeMasterType'
      type: object
    UserSchemaAttributeMasterPriority:
      example:
        type: type
        value: value
      properties:
        type:
          type: string
        value:
          type: string
      type: object
    UserSchemaAttributeMasterType:
      enum:
      - OKTA
      - OVERRIDE
      - PROFILE_MASTER
      type: string
    UserSchemaAttributePermission:
      example:
        principal: principal
        action: action
      properties:
        action:
          type: string
        principal:
          type: string
      type: object
    UserSchemaAttributeScope:
      enum:
      - NONE
      - SELF
      type: string
    UserSchemaAttributeType:
      enum:
      - array
      - boolean
      - integer
      - number
      - string
      type: string
    UserSchemaAttributeUnion:
      enum:
      - DISABLE
      - ENABLE
      type: string
    UserSchemaBase:
      example:
        id: id
        type: type
        properties:
          profileUrl:
            minLength: 6
            externalNamespace: externalNamespace
            pattern: pattern
            description: description
            union: null
            title: title
            type: null
            enum:
            - enum
            - enum
            required: true
            master:
              priority:
              - type: type
                value: value
              - type: type
                value: value
              type: null
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            permissions:
            - principal: principal
              action: action
            - principal: principal
              action: action
            externalName: externalName
            scope: null
            unique: unique
            mutability: mutability
            items:
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              type: type
              enum:
              - enum
              - enum
            maxLength: 0
          lastName:
            minLength: 6
            externalNamespace: externalNamespace
            pattern: pattern
            description: description
            union: null
            title: title
            type: null
            enum:
            - enum
            - enum
            required: true
            master:
              priority:
              - type: type
                value: value
              - type: type
                value: value
              type: null
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            permissions:
            - principal: principal
              action: action
            - principal: principal
              action: action
            externalName: externalName
            scope: null
            unique: unique
            mutability: mutability
            items:
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              type: type
              enum:
              - enum
              - enum
            maxLength: 0
          zipCode:
            minLength: 6
            externalNamespace: externalNamespace
            pattern: pattern
            description: description
            union: null
            title: title
            type: null
            enum:
            - enum
            - enum
            required: true
            master:
              priority:
              - type: type
                value: value
              - type: type
                value: value
              type: null
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            permissions:
            - principal: principal
              action: action
            - principal: principal
              action: action
            externalName: externalName
            scope: null
            unique: unique
            mutability: mutability
            items:
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              type: type
              enum:
              - enum
              - enum
            maxLength: 0
          preferredLanguage:
            minLength: 6
            externalNamespace: externalNamespace
            pattern: pattern
            description: description
            union: null
            title: title
            type: null
            enum:
            - enum
            - enum
            required: true
            master:
              priority:
              - type: type
                value: value
              - type: type
                value: value
              type: null
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            permissions:
            - principal: principal
              action: action
            - principal: principal
              action: action
            externalName: externalName
            scope: null
            unique: unique
            mutability: mutability
            items:
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              type: type
              enum:
              - enum
              - enum
            maxLength: 0
          city:
            minLength: 6
            externalNamespace: externalNamespace
            pattern: pattern
            description: description
            union: null
            title: title
            type: null
            enum:
            - enum
            - enum
            required: true
            master:
              priority:
              - type: type
                value: value
              - type: type
                value: value
              type: null
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            permissions:
            - principal: principal
              action: action
            - principal: principal
              action: action
            externalName: externalName
            scope: null
            unique: unique
            mutability: mutability
            items:
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              type: type
              enum:
              - enum
              - enum
            maxLength: 0
          displayName:
            minLength: 6
            externalNamespace: externalNamespace
            pattern: pattern
            description: description
            union: null
            title: title
            type: null
            enum:
            - enum
            - enum
            required: true
            master:
              priority:
              - type: type
                value: value
              - type: type
                value: value
              type: null
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            permissions:
            - principal: principal
              action: action
            - principal: principal
              action: action
            externalName: externalName
            scope: null
            unique: unique
            mutability: mutability
            items:
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              type: type
              enum:
              - enum
              - enum
            maxLength: 0
          timezone:
            minLength: 6
            externalNamespace: externalNamespace
            pattern: pattern
            description: description
            union: null
            title: title
            type: null
            enum:
            - enum
            - enum
            required: true
            master:
              priority:
              - type: type
                value: value
              - type: type
                value: value
              type: null
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            permissions:
            - principal: principal
              action: action
            - principal: principal
              action: action
            externalName: externalName
            scope: null
            unique: unique
            mutability: mutability
            items:
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              type: type
              enum:
              - enum
              - enum
            maxLength: 0
          locale:
            minLength: 6
            externalNamespace: externalNamespace
            pattern: pattern
            description: description
            union: null
            title: title
            type: null
            enum:
            - enum
            - enum
            required: true
            master:
              priority:
              - type: type
                value: value
              - type: type
                value: value
              type: null
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            permissions:
            - principal: principal
              action: action
            - principal: principal
              action: action
            externalName: externalName
            scope: null
            unique: unique
            mutability: mutability
            items:
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              type: type
              enum:
              - enum
              - enum
            maxLength: 0
          login:
            minLength: 6
            externalNamespace: externalNamespace
            pattern: pattern
            description: description
            union: null
            title: title
            type: null
            enum:
            - enum
            - enum
            required: true
            master:
              priority:
              - type: type
                value: value
              - type: type
                value: value
              type: null
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            permissions:
            - principal: principal
              action: action
            - principal: principal
              action: action
            externalName: externalName
            scope: null
            unique: unique
            mutability: mutability
            items:
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              type: type
              enum:
              - enum
              - enum
            maxLength: 0
          title:
            minLength: 6
            externalNamespace: externalNamespace
            pattern: pattern
            description: description
            union: null
            title: title
            type: null
            enum:
            - enum
            - enum
            required: true
            master:
              priority:
              - type: type
                value: value
              - type: type
                value: value
              type: null
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            permissions:
            - principal: principal
              action: action
            - principal: principal
              action: action
            externalName: externalName
            scope: null
            unique: unique
            mutability: mutability
            items:
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              type: type
              enum:
              - enum
              - enum
            maxLength: 0
          employeeNumber:
            minLength: 6
            externalNamespace: externalNamespace
            pattern: pattern
            description: description
            union: null
            title: title
            type: null
            enum:
            - enum
            - enum
            required: true
            master:
              priority:
              - type: type
                value: value
              - type: type
                value: value
              type: null
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            permissions:
            - principal: principal
              action: action
            - principal: principal
              action: action
            externalName: externalName
            scope: null
            unique: unique
            mutability: mutability
            items:
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              type: type
              enum:
              - enum
              - enum
            maxLength: 0
          division:
            minLength: 6
            externalNamespace: externalNamespace
            pattern: pattern
            description: description
            union: null
            title: title
            type: null
            enum:
            - enum
            - enum
            required: true
            master:
              priority:
              - type: type
                value: value
              - type: type
                value: value
              type: null
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            permissions:
            - principal: principal
              action: action
            - principal: principal
              action: action
            externalName: externalName
            scope: null
            unique: unique
            mutability: mutability
            items:
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              type: type
              enum:
              - enum
              - enum
            maxLength: 0
          honorificSuffix:
            minLength: 6
            externalNamespace: externalNamespace
            pattern: pattern
            description: description
            union: null
            title: title
            type: null
            enum:
            - enum
            - enum
            required: true
            master:
              priority:
              - type: type
                value: value
              - type: type
                value: value
              type: null
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            permissions:
            - principal: principal
              action: action
            - principal: principal
              action: action
            externalName: externalName
            scope: null
            unique: unique
            mutability: mutability
            items:
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              type: type
              enum:
              - enum
              - enum
            maxLength: 0
          countryCode:
            minLength: 6
            externalNamespace: externalNamespace
            pattern: pattern
            description: description
            union: null
            title: title
            type: null
            enum:
            - enum
            - enum
            required: true
            master:
              priority:
              - type: type
                value: value
              - type: type
                value: value
              type: null
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            permissions:
            - principal: principal
              action: action
            - principal: principal
              action: action
            externalName: externalName
            scope: null
            unique: unique
            mutability: mutability
            items:
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              type: type
              enum:
              - enum
              - enum
            maxLength: 0
          state:
            minLength: 6
            externalNamespace: externalNamespace
            pattern: pattern
            description: description
            union: null
            title: title
            type: null
            enum:
            - enum
            - enum
            required: true
            master:
              priority:
              - type: type
                value: value
              - type: type
                value: value
              type: null
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            permissions:
            - principal: principal
              action: action
            - principal: principal
              action: action
            externalName: externalName
            scope: null
            unique: unique
            mutability: mutability
            items:
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              type: type
              enum:
              - enum
              - enum
            maxLength: 0
          department:
            minLength: 6
            externalNamespace: externalNamespace
            pattern: pattern
            description: description
            union: null
            title: title
            type: null
            enum:
            - enum
            - enum
            required: true
            master:
              priority:
              - type: type
                value: value
              - type: type
                value: value
              type: null
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            permissions:
            - principal: principal
              action: action
            - principal: principal
              action: action
            externalName: externalName
            scope: null
            unique: unique
            mutability: mutability
            items:
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              type: type
              enum:
              - enum
              - enum
            maxLength: 0
          email:
            minLength: 6
            externalNamespace: externalNamespace
            pattern: pattern
            description: description
            union: null
            title: title
            type: null
            enum:
            - enum
            - enum
            required: true
            master:
              priority:
              - type: type
                value: value
              - type: type
                value: value
              type: null
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            permissions:
            - principal: principal
              action: action
            - principal: principal
              action: action
            externalName: externalName
            scope: null
            unique: unique
            mutability: mutability
            items:
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              type: type
              enum:
              - enum
              - enum
            maxLength: 0
          manager:
            minLength: 6
            externalNamespace: externalNamespace
            pattern: pattern
            description: description
            union: null
            title: title
            type: null
            enum:
            - enum
            - enum
            required: true
            master:
              priority:
              - type: type
                value: value
              - type: type
                value: value
              type: null
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            permissions:
            - principal: principal
              action: action
            - principal: principal
              action: action
            externalName: externalName
            scope: null
            unique: unique
            mutability: mutability
            items:
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              type: type
              enum:
              - enum
              - enum
            maxLength: 0
          costCenter:
            minLength: 6
            externalNamespace: externalNamespace
            pattern: pattern
            description: description
            union: null
            title: title
            type: null
            enum:
            - enum
            - enum
            required: true
            master:
              priority:
              - type: type
                value: value
              - type: type
                value: value
              type: null
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            permissions:
            - principal: principal
              action: action
            - principal: principal
              action: action
            externalName: externalName
            scope: null
            unique: unique
            mutability: mutability
            items:
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              type: type
              enum:
              - enum
              - enum
            maxLength: 0
          nickName:
            minLength: 6
            externalNamespace: externalNamespace
            pattern: pattern
            description: description
            union: null
            title: title
            type: null
            enum:
            - enum
            - enum
            required: true
            master:
              priority:
              - type: type
                value: value
              - type: type
                value: value
              type: null
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            permissions:
            - principal: principal
              action: action
            - principal: principal
              action: action
            externalName: externalName
            scope: null
            unique: unique
            mutability: mutability
            items:
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              type: type
              enum:
              - enum
              - enum
            maxLength: 0
          secondEmail:
            minLength: 6
            externalNamespace: externalNamespace
            pattern: pattern
            description: description
            union: null
            title: title
            type: null
            enum:
            - enum
            - enum
            required: true
            master:
              priority:
              - type: type
                value: value
              - type: type
                value: value
              type: null
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            permissions:
            - principal: principal
              action: action
            - principal: principal
              action: action
            externalName: externalName
            scope: null
            unique: unique
            mutability: mutability
            items:
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              type: type
              enum:
              - enum
              - enum
            maxLength: 0
          honorificPrefix:
            minLength: 6
            externalNamespace: externalNamespace
            pattern: pattern
            description: description
            union: null
            title: title
            type: null
            enum:
            - enum
            - enum
            required: true
            master:
              priority:
              - type: type
                value: value
              - type: type
                value: value
              type: null
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            permissions:
            - principal: principal
              action: action
            - principal: principal
              action: action
            externalName: externalName
            scope: null
            unique: unique
            mutability: mutability
            items:
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              type: type
              enum:
              - enum
              - enum
            maxLength: 0
          managerId:
            minLength: 6
            externalNamespace: externalNamespace
            pattern: pattern
            description: description
            union: null
            title: title
            type: null
            enum:
            - enum
            - enum
            required: true
            master:
              priority:
              - type: type
                value: value
              - type: type
                value: value
              type: null
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            permissions:
            - principal: principal
              action: action
            - principal: principal
              action: action
            externalName: externalName
            scope: null
            unique: unique
            mutability: mutability
            items:
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              type: type
              enum:
              - enum
              - enum
            maxLength: 0
          firstName:
            minLength: 6
            externalNamespace: externalNamespace
            pattern: pattern
            description: description
            union: null
            title: title
            type: null
            enum:
            - enum
            - enum
            required: true
            master:
              priority:
              - type: type
                value: value
              - type: type
                value: value
              type: null
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            permissions:
            - principal: principal
              action: action
            - principal: principal
              action: action
            externalName: externalName
            scope: null
            unique: unique
            mutability: mutability
            items:
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              type: type
              enum:
              - enum
              - enum
            maxLength: 0
          primaryPhone:
            minLength: 6
            externalNamespace: externalNamespace
            pattern: pattern
            description: description
            union: null
            title: title
            type: null
            enum:
            - enum
            - enum
            required: true
            master:
              priority:
              - type: type
                value: value
              - type: type
                value: value
              type: null
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            permissions:
            - principal: principal
              action: action
            - principal: principal
              action: action
            externalName: externalName
            scope: null
            unique: unique
            mutability: mutability
            items:
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              type: type
              enum:
              - enum
              - enum
            maxLength: 0
          postalAddress:
            minLength: 6
            externalNamespace: externalNamespace
            pattern: pattern
            description: description
            union: null
            title: title
            type: null
            enum:
            - enum
            - enum
            required: true
            master:
              priority:
              - type: type
                value: value
              - type: type
                value: value
              type: null
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            permissions:
            - principal: principal
              action: action
            - principal: principal
              action: action
            externalName: externalName
            scope: null
            unique: unique
            mutability: mutability
            items:
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              type: type
              enum:
              - enum
              - enum
            maxLength: 0
          mobilePhone:
            minLength: 6
            externalNamespace: externalNamespace
            pattern: pattern
            description: description
            union: null
            title: title
            type: null
            enum:
            - enum
            - enum
            required: true
            master:
              priority:
              - type: type
                value: value
              - type: type
                value: value
              type: null
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            permissions:
            - principal: principal
              action: action
            - principal: principal
              action: action
            externalName: externalName
            scope: null
            unique: unique
            mutability: mutability
            items:
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              type: type
              enum:
              - enum
              - enum
            maxLength: 0
          streetAddress:
            minLength: 6
            externalNamespace: externalNamespace
            pattern: pattern
            description: description
            union: null
            title: title
            type: null
            enum:
            - enum
            - enum
            required: true
            master:
              priority:
              - type: type
                value: value
              - type: type
                value: value
              type: null
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            permissions:
            - principal: principal
              action: action
            - principal: principal
              action: action
            externalName: externalName
            scope: null
            unique: unique
            mutability: mutability
            items:
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              type: type
              enum:
              - enum
              - enum
            maxLength: 0
          organization:
            minLength: 6
            externalNamespace: externalNamespace
            pattern: pattern
            description: description
            union: null
            title: title
            type: null
            enum:
            - enum
            - enum
            required: true
            master:
              priority:
              - type: type
                value: value
              - type: type
                value: value
              type: null
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            permissions:
            - principal: principal
              action: action
            - principal: principal
              action: action
            externalName: externalName
            scope: null
            unique: unique
            mutability: mutability
            items:
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              type: type
              enum:
              - enum
              - enum
            maxLength: 0
          middleName:
            minLength: 6
            externalNamespace: externalNamespace
            pattern: pattern
            description: description
            union: null
            title: title
            type: null
            enum:
            - enum
            - enum
            required: true
            master:
              priority:
              - type: type
                value: value
              - type: type
                value: value
              type: null
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            permissions:
            - principal: principal
              action: action
            - principal: principal
              action: action
            externalName: externalName
            scope: null
            unique: unique
            mutability: mutability
            items:
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              type: type
              enum:
              - enum
              - enum
            maxLength: 0
          userType:
            minLength: 6
            externalNamespace: externalNamespace
            pattern: pattern
            description: description
            union: null
            title: title
            type: null
            enum:
            - enum
            - enum
            required: true
            master:
              priority:
              - type: type
                value: value
              - type: type
                value: value
              type: null
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            permissions:
            - principal: principal
              action: action
            - principal: principal
              action: action
            externalName: externalName
            scope: null
            unique: unique
            mutability: mutability
            items:
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              type: type
              enum:
              - enum
              - enum
            maxLength: 0
        required:
        - required
        - required
      properties:
        id:
          type: string
        properties:
          $ref: '#/components/schemas/UserSchemaBaseProperties'
        required:
          items:
            type: string
          type: array
        type:
          type: string
      type: object
    UserSchemaBaseProperties:
      example:
        profileUrl:
          minLength: 6
          externalNamespace: externalNamespace
          pattern: pattern
          description: description
          union: null
          title: title
          type: null
          enum:
          - enum
          - enum
          required: true
          master:
            priority:
            - type: type
              value: value
            - type: type
              value: value
            type: null
          oneOf:
          - const: const
            title: title
          - const: const
            title: title
          permissions:
          - principal: principal
            action: action
          - principal: principal
            action: action
          externalName: externalName
          scope: null
          unique: unique
          mutability: mutability
          items:
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            type: type
            enum:
            - enum
            - enum
          maxLength: 0
        lastName:
          minLength: 6
          externalNamespace: externalNamespace
          pattern: pattern
          description: description
          union: null
          title: title
          type: null
          enum:
          - enum
          - enum
          required: true
          master:
            priority:
            - type: type
              value: value
            - type: type
              value: value
            type: null
          oneOf:
          - const: const
            title: title
          - const: const
            title: title
          permissions:
          - principal: principal
            action: action
          - principal: principal
            action: action
          externalName: externalName
          scope: null
          unique: unique
          mutability: mutability
          items:
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            type: type
            enum:
            - enum
            - enum
          maxLength: 0
        zipCode:
          minLength: 6
          externalNamespace: externalNamespace
          pattern: pattern
          description: description
          union: null
          title: title
          type: null
          enum:
          - enum
          - enum
          required: true
          master:
            priority:
            - type: type
              value: value
            - type: type
              value: value
            type: null
          oneOf:
          - const: const
            title: title
          - const: const
            title: title
          permissions:
          - principal: principal
            action: action
          - principal: principal
            action: action
          externalName: externalName
          scope: null
          unique: unique
          mutability: mutability
          items:
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            type: type
            enum:
            - enum
            - enum
          maxLength: 0
        preferredLanguage:
          minLength: 6
          externalNamespace: externalNamespace
          pattern: pattern
          description: description
          union: null
          title: title
          type: null
          enum:
          - enum
          - enum
          required: true
          master:
            priority:
            - type: type
              value: value
            - type: type
              value: value
            type: null
          oneOf:
          - const: const
            title: title
          - const: const
            title: title
          permissions:
          - principal: principal
            action: action
          - principal: principal
            action: action
          externalName: externalName
          scope: null
          unique: unique
          mutability: mutability
          items:
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            type: type
            enum:
            - enum
            - enum
          maxLength: 0
        city:
          minLength: 6
          externalNamespace: externalNamespace
          pattern: pattern
          description: description
          union: null
          title: title
          type: null
          enum:
          - enum
          - enum
          required: true
          master:
            priority:
            - type: type
              value: value
            - type: type
              value: value
            type: null
          oneOf:
          - const: const
            title: title
          - const: const
            title: title
          permissions:
          - principal: principal
            action: action
          - principal: principal
            action: action
          externalName: externalName
          scope: null
          unique: unique
          mutability: mutability
          items:
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            type: type
            enum:
            - enum
            - enum
          maxLength: 0
        displayName:
          minLength: 6
          externalNamespace: externalNamespace
          pattern: pattern
          description: description
          union: null
          title: title
          type: null
          enum:
          - enum
          - enum
          required: true
          master:
            priority:
            - type: type
              value: value
            - type: type
              value: value
            type: null
          oneOf:
          - const: const
            title: title
          - const: const
            title: title
          permissions:
          - principal: principal
            action: action
          - principal: principal
            action: action
          externalName: externalName
          scope: null
          unique: unique
          mutability: mutability
          items:
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            type: type
            enum:
            - enum
            - enum
          maxLength: 0
        timezone:
          minLength: 6
          externalNamespace: externalNamespace
          pattern: pattern
          description: description
          union: null
          title: title
          type: null
          enum:
          - enum
          - enum
          required: true
          master:
            priority:
            - type: type
              value: value
            - type: type
              value: value
            type: null
          oneOf:
          - const: const
            title: title
          - const: const
            title: title
          permissions:
          - principal: principal
            action: action
          - principal: principal
            action: action
          externalName: externalName
          scope: null
          unique: unique
          mutability: mutability
          items:
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            type: type
            enum:
            - enum
            - enum
          maxLength: 0
        locale:
          minLength: 6
          externalNamespace: externalNamespace
          pattern: pattern
          description: description
          union: null
          title: title
          type: null
          enum:
          - enum
          - enum
          required: true
          master:
            priority:
            - type: type
              value: value
            - type: type
              value: value
            type: null
          oneOf:
          - const: const
            title: title
          - const: const
            title: title
          permissions:
          - principal: principal
            action: action
          - principal: principal
            action: action
          externalName: externalName
          scope: null
          unique: unique
          mutability: mutability
          items:
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            type: type
            enum:
            - enum
            - enum
          maxLength: 0
        login:
          minLength: 6
          externalNamespace: externalNamespace
          pattern: pattern
          description: description
          union: null
          title: title
          type: null
          enum:
          - enum
          - enum
          required: true
          master:
            priority:
            - type: type
              value: value
            - type: type
              value: value
            type: null
          oneOf:
          - const: const
            title: title
          - const: const
            title: title
          permissions:
          - principal: principal
            action: action
          - principal: principal
            action: action
          externalName: externalName
          scope: null
          unique: unique
          mutability: mutability
          items:
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            type: type
            enum:
            - enum
            - enum
          maxLength: 0
        title:
          minLength: 6
          externalNamespace: externalNamespace
          pattern: pattern
          description: description
          union: null
          title: title
          type: null
          enum:
          - enum
          - enum
          required: true
          master:
            priority:
            - type: type
              value: value
            - type: type
              value: value
            type: null
          oneOf:
          - const: const
            title: title
          - const: const
            title: title
          permissions:
          - principal: principal
            action: action
          - principal: principal
            action: action
          externalName: externalName
          scope: null
          unique: unique
          mutability: mutability
          items:
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            type: type
            enum:
            - enum
            - enum
          maxLength: 0
        employeeNumber:
          minLength: 6
          externalNamespace: externalNamespace
          pattern: pattern
          description: description
          union: null
          title: title
          type: null
          enum:
          - enum
          - enum
          required: true
          master:
            priority:
            - type: type
              value: value
            - type: type
              value: value
            type: null
          oneOf:
          - const: const
            title: title
          - const: const
            title: title
          permissions:
          - principal: principal
            action: action
          - principal: principal
            action: action
          externalName: externalName
          scope: null
          unique: unique
          mutability: mutability
          items:
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            type: type
            enum:
            - enum
            - enum
          maxLength: 0
        division:
          minLength: 6
          externalNamespace: externalNamespace
          pattern: pattern
          description: description
          union: null
          title: title
          type: null
          enum:
          - enum
          - enum
          required: true
          master:
            priority:
            - type: type
              value: value
            - type: type
              value: value
            type: null
          oneOf:
          - const: const
            title: title
          - const: const
            title: title
          permissions:
          - principal: principal
            action: action
          - principal: principal
            action: action
          externalName: externalName
          scope: null
          unique: unique
          mutability: mutability
          items:
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            type: type
            enum:
            - enum
            - enum
          maxLength: 0
        honorificSuffix:
          minLength: 6
          externalNamespace: externalNamespace
          pattern: pattern
          description: description
          union: null
          title: title
          type: null
          enum:
          - enum
          - enum
          required: true
          master:
            priority:
            - type: type
              value: value
            - type: type
              value: value
            type: null
          oneOf:
          - const: const
            title: title
          - const: const
            title: title
          permissions:
          - principal: principal
            action: action
          - principal: principal
            action: action
          externalName: externalName
          scope: null
          unique: unique
          mutability: mutability
          items:
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            type: type
            enum:
            - enum
            - enum
          maxLength: 0
        countryCode:
          minLength: 6
          externalNamespace: externalNamespace
          pattern: pattern
          description: description
          union: null
          title: title
          type: null
          enum:
          - enum
          - enum
          required: true
          master:
            priority:
            - type: type
              value: value
            - type: type
              value: value
            type: null
          oneOf:
          - const: const
            title: title
          - const: const
            title: title
          permissions:
          - principal: principal
            action: action
          - principal: principal
            action: action
          externalName: externalName
          scope: null
          unique: unique
          mutability: mutability
          items:
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            type: type
            enum:
            - enum
            - enum
          maxLength: 0
        state:
          minLength: 6
          externalNamespace: externalNamespace
          pattern: pattern
          description: description
          union: null
          title: title
          type: null
          enum:
          - enum
          - enum
          required: true
          master:
            priority:
            - type: type
              value: value
            - type: type
              value: value
            type: null
          oneOf:
          - const: const
            title: title
          - const: const
            title: title
          permissions:
          - principal: principal
            action: action
          - principal: principal
            action: action
          externalName: externalName
          scope: null
          unique: unique
          mutability: mutability
          items:
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            type: type
            enum:
            - enum
            - enum
          maxLength: 0
        department:
          minLength: 6
          externalNamespace: externalNamespace
          pattern: pattern
          description: description
          union: null
          title: title
          type: null
          enum:
          - enum
          - enum
          required: true
          master:
            priority:
            - type: type
              value: value
            - type: type
              value: value
            type: null
          oneOf:
          - const: const
            title: title
          - const: const
            title: title
          permissions:
          - principal: principal
            action: action
          - principal: principal
            action: action
          externalName: externalName
          scope: null
          unique: unique
          mutability: mutability
          items:
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            type: type
            enum:
            - enum
            - enum
          maxLength: 0
        email:
          minLength: 6
          externalNamespace: externalNamespace
          pattern: pattern
          description: description
          union: null
          title: title
          type: null
          enum:
          - enum
          - enum
          required: true
          master:
            priority:
            - type: type
              value: value
            - type: type
              value: value
            type: null
          oneOf:
          - const: const
            title: title
          - const: const
            title: title
          permissions:
          - principal: principal
            action: action
          - principal: principal
            action: action
          externalName: externalName
          scope: null
          unique: unique
          mutability: mutability
          items:
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            type: type
            enum:
            - enum
            - enum
          maxLength: 0
        manager:
          minLength: 6
          externalNamespace: externalNamespace
          pattern: pattern
          description: description
          union: null
          title: title
          type: null
          enum:
          - enum
          - enum
          required: true
          master:
            priority:
            - type: type
              value: value
            - type: type
              value: value
            type: null
          oneOf:
          - const: const
            title: title
          - const: const
            title: title
          permissions:
          - principal: principal
            action: action
          - principal: principal
            action: action
          externalName: externalName
          scope: null
          unique: unique
          mutability: mutability
          items:
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            type: type
            enum:
            - enum
            - enum
          maxLength: 0
        costCenter:
          minLength: 6
          externalNamespace: externalNamespace
          pattern: pattern
          description: description
          union: null
          title: title
          type: null
          enum:
          - enum
          - enum
          required: true
          master:
            priority:
            - type: type
              value: value
            - type: type
              value: value
            type: null
          oneOf:
          - const: const
            title: title
          - const: const
            title: title
          permissions:
          - principal: principal
            action: action
          - principal: principal
            action: action
          externalName: externalName
          scope: null
          unique: unique
          mutability: mutability
          items:
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            type: type
            enum:
            - enum
            - enum
          maxLength: 0
        nickName:
          minLength: 6
          externalNamespace: externalNamespace
          pattern: pattern
          description: description
          union: null
          title: title
          type: null
          enum:
          - enum
          - enum
          required: true
          master:
            priority:
            - type: type
              value: value
            - type: type
              value: value
            type: null
          oneOf:
          - const: const
            title: title
          - const: const
            title: title
          permissions:
          - principal: principal
            action: action
          - principal: principal
            action: action
          externalName: externalName
          scope: null
          unique: unique
          mutability: mutability
          items:
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            type: type
            enum:
            - enum
            - enum
          maxLength: 0
        secondEmail:
          minLength: 6
          externalNamespace: externalNamespace
          pattern: pattern
          description: description
          union: null
          title: title
          type: null
          enum:
          - enum
          - enum
          required: true
          master:
            priority:
            - type: type
              value: value
            - type: type
              value: value
            type: null
          oneOf:
          - const: const
            title: title
          - const: const
            title: title
          permissions:
          - principal: principal
            action: action
          - principal: principal
            action: action
          externalName: externalName
          scope: null
          unique: unique
          mutability: mutability
          items:
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            type: type
            enum:
            - enum
            - enum
          maxLength: 0
        honorificPrefix:
          minLength: 6
          externalNamespace: externalNamespace
          pattern: pattern
          description: description
          union: null
          title: title
          type: null
          enum:
          - enum
          - enum
          required: true
          master:
            priority:
            - type: type
              value: value
            - type: type
              value: value
            type: null
          oneOf:
          - const: const
            title: title
          - const: const
            title: title
          permissions:
          - principal: principal
            action: action
          - principal: principal
            action: action
          externalName: externalName
          scope: null
          unique: unique
          mutability: mutability
          items:
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            type: type
            enum:
            - enum
            - enum
          maxLength: 0
        managerId:
          minLength: 6
          externalNamespace: externalNamespace
          pattern: pattern
          description: description
          union: null
          title: title
          type: null
          enum:
          - enum
          - enum
          required: true
          master:
            priority:
            - type: type
              value: value
            - type: type
              value: value
            type: null
          oneOf:
          - const: const
            title: title
          - const: const
            title: title
          permissions:
          - principal: principal
            action: action
          - principal: principal
            action: action
          externalName: externalName
          scope: null
          unique: unique
          mutability: mutability
          items:
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            type: type
            enum:
            - enum
            - enum
          maxLength: 0
        firstName:
          minLength: 6
          externalNamespace: externalNamespace
          pattern: pattern
          description: description
          union: null
          title: title
          type: null
          enum:
          - enum
          - enum
          required: true
          master:
            priority:
            - type: type
              value: value
            - type: type
              value: value
            type: null
          oneOf:
          - const: const
            title: title
          - const: const
            title: title
          permissions:
          - principal: principal
            action: action
          - principal: principal
            action: action
          externalName: externalName
          scope: null
          unique: unique
          mutability: mutability
          items:
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            type: type
            enum:
            - enum
            - enum
          maxLength: 0
        primaryPhone:
          minLength: 6
          externalNamespace: externalNamespace
          pattern: pattern
          description: description
          union: null
          title: title
          type: null
          enum:
          - enum
          - enum
          required: true
          master:
            priority:
            - type: type
              value: value
            - type: type
              value: value
            type: null
          oneOf:
          - const: const
            title: title
          - const: const
            title: title
          permissions:
          - principal: principal
            action: action
          - principal: principal
            action: action
          externalName: externalName
          scope: null
          unique: unique
          mutability: mutability
          items:
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            type: type
            enum:
            - enum
            - enum
          maxLength: 0
        postalAddress:
          minLength: 6
          externalNamespace: externalNamespace
          pattern: pattern
          description: description
          union: null
          title: title
          type: null
          enum:
          - enum
          - enum
          required: true
          master:
            priority:
            - type: type
              value: value
            - type: type
              value: value
            type: null
          oneOf:
          - const: const
            title: title
          - const: const
            title: title
          permissions:
          - principal: principal
            action: action
          - principal: principal
            action: action
          externalName: externalName
          scope: null
          unique: unique
          mutability: mutability
          items:
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            type: type
            enum:
            - enum
            - enum
          maxLength: 0
        mobilePhone:
          minLength: 6
          externalNamespace: externalNamespace
          pattern: pattern
          description: description
          union: null
          title: title
          type: null
          enum:
          - enum
          - enum
          required: true
          master:
            priority:
            - type: type
              value: value
            - type: type
              value: value
            type: null
          oneOf:
          - const: const
            title: title
          - const: const
            title: title
          permissions:
          - principal: principal
            action: action
          - principal: principal
            action: action
          externalName: externalName
          scope: null
          unique: unique
          mutability: mutability
          items:
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            type: type
            enum:
            - enum
            - enum
          maxLength: 0
        streetAddress:
          minLength: 6
          externalNamespace: externalNamespace
          pattern: pattern
          description: description
          union: null
          title: title
          type: null
          enum:
          - enum
          - enum
          required: true
          master:
            priority:
            - type: type
              value: value
            - type: type
              value: value
            type: null
          oneOf:
          - const: const
            title: title
          - const: const
            title: title
          permissions:
          - principal: principal
            action: action
          - principal: principal
            action: action
          externalName: externalName
          scope: null
          unique: unique
          mutability: mutability
          items:
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            type: type
            enum:
            - enum
            - enum
          maxLength: 0
        organization:
          minLength: 6
          externalNamespace: externalNamespace
          pattern: pattern
          description: description
          union: null
          title: title
          type: null
          enum:
          - enum
          - enum
          required: true
          master:
            priority:
            - type: type
              value: value
            - type: type
              value: value
            type: null
          oneOf:
          - const: const
            title: title
          - const: const
            title: title
          permissions:
          - principal: principal
            action: action
          - principal: principal
            action: action
          externalName: externalName
          scope: null
          unique: unique
          mutability: mutability
          items:
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            type: type
            enum:
            - enum
            - enum
          maxLength: 0
        middleName:
          minLength: 6
          externalNamespace: externalNamespace
          pattern: pattern
          description: description
          union: null
          title: title
          type: null
          enum:
          - enum
          - enum
          required: true
          master:
            priority:
            - type: type
              value: value
            - type: type
              value: value
            type: null
          oneOf:
          - const: const
            title: title
          - const: const
            title: title
          permissions:
          - principal: principal
            action: action
          - principal: principal
            action: action
          externalName: externalName
          scope: null
          unique: unique
          mutability: mutability
          items:
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            type: type
            enum:
            - enum
            - enum
          maxLength: 0
        userType:
          minLength: 6
          externalNamespace: externalNamespace
          pattern: pattern
          description: description
          union: null
          title: title
          type: null
          enum:
          - enum
          - enum
          required: true
          master:
            priority:
            - type: type
              value: value
            - type: type
              value: value
            type: null
          oneOf:
          - const: const
            title: title
          - const: const
            title: title
          permissions:
          - principal: principal
            action: action
          - principal: principal
            action: action
          externalName: externalName
          scope: null
          unique: unique
          mutability: mutability
          items:
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            type: type
            enum:
            - enum
            - enum
          maxLength: 0
      properties:
        city:
          $ref: '#/components/schemas/UserSchemaAttribute'
        costCenter:
          $ref: '#/components/schemas/UserSchemaAttribute'
        countryCode:
          $ref: '#/components/schemas/UserSchemaAttribute'
        department:
          $ref: '#/components/schemas/UserSchemaAttribute'
        displayName:
          $ref: '#/components/schemas/UserSchemaAttribute'
        division:
          $ref: '#/components/schemas/UserSchemaAttribute'
        email:
          $ref: '#/components/schemas/UserSchemaAttribute'
        employeeNumber:
          $ref: '#/components/schemas/UserSchemaAttribute'
        firstName:
          $ref: '#/components/schemas/UserSchemaAttribute'
        honorificPrefix:
          $ref: '#/components/schemas/UserSchemaAttribute'
        honorificSuffix:
          $ref: '#/components/schemas/UserSchemaAttribute'
        lastName:
          $ref: '#/components/schemas/UserSchemaAttribute'
        locale:
          $ref: '#/components/schemas/UserSchemaAttribute'
        login:
          $ref: '#/components/schemas/UserSchemaAttribute'
        manager:
          $ref: '#/components/schemas/UserSchemaAttribute'
        managerId:
          $ref: '#/components/schemas/UserSchemaAttribute'
        middleName:
          $ref: '#/components/schemas/UserSchemaAttribute'
        mobilePhone:
          $ref: '#/components/schemas/UserSchemaAttribute'
        nickName:
          $ref: '#/components/schemas/UserSchemaAttribute'
        organization:
          $ref: '#/components/schemas/UserSchemaAttribute'
        postalAddress:
          $ref: '#/components/schemas/UserSchemaAttribute'
        preferredLanguage:
          $ref: '#/components/schemas/UserSchemaAttribute'
        primaryPhone:
          $ref: '#/components/schemas/UserSchemaAttribute'
        profileUrl:
          $ref: '#/components/schemas/UserSchemaAttribute'
        secondEmail:
          $ref: '#/components/schemas/UserSchemaAttribute'
        state:
          $ref: '#/components/schemas/UserSchemaAttribute'
        streetAddress:
          $ref: '#/components/schemas/UserSchemaAttribute'
        timezone:
          $ref: '#/components/schemas/UserSchemaAttribute'
        title:
          $ref: '#/components/schemas/UserSchemaAttribute'
        userType:
          $ref: '#/components/schemas/UserSchemaAttribute'
        zipCode:
          $ref: '#/components/schemas/UserSchemaAttribute'
      type: object
    UserSchemaDefinitions:
      example:
        custom:
          id: id
          type: type
          properties:
            key:
              minLength: 6
              externalNamespace: externalNamespace
              pattern: pattern
              description: description
              union: null
              title: title
              type: null
              enum:
              - enum
              - enum
              required: true
              master:
                priority:
                - type: type
                  value: value
                - type: type
                  value: value
                type: null
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              permissions:
              - principal: principal
                action: action
              - principal: principal
                action: action
              externalName: externalName
              scope: null
              unique: unique
              mutability: mutability
              items:
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                type: type
                enum:
                - enum
                - enum
              maxLength: 0
          required:
          - required
          - required
        base:
          id: id
          type: type
          properties:
            profileUrl:
              minLength: 6
              externalNamespace: externalNamespace
              pattern: pattern
              description: description
              union: null
              title: title
              type: null
              enum:
              - enum
              - enum
              required: true
              master:
                priority:
                - type: type
                  value: value
                - type: type
                  value: value
                type: null
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              permissions:
              - principal: principal
                action: action
              - principal: principal
                action: action
              externalName: externalName
              scope: null
              unique: unique
              mutability: mutability
              items:
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                type: type
                enum:
                - enum
                - enum
              maxLength: 0
            lastName:
              minLength: 6
              externalNamespace: externalNamespace
              pattern: pattern
              description: description
              union: null
              title: title
              type: null
              enum:
              - enum
              - enum
              required: true
              master:
                priority:
                - type: type
                  value: value
                - type: type
                  value: value
                type: null
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              permissions:
              - principal: principal
                action: action
              - principal: principal
                action: action
              externalName: externalName
              scope: null
              unique: unique
              mutability: mutability
              items:
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                type: type
                enum:
                - enum
                - enum
              maxLength: 0
            zipCode:
              minLength: 6
              externalNamespace: externalNamespace
              pattern: pattern
              description: description
              union: null
              title: title
              type: null
              enum:
              - enum
              - enum
              required: true
              master:
                priority:
                - type: type
                  value: value
                - type: type
                  value: value
                type: null
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              permissions:
              - principal: principal
                action: action
              - principal: principal
                action: action
              externalName: externalName
              scope: null
              unique: unique
              mutability: mutability
              items:
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                type: type
                enum:
                - enum
                - enum
              maxLength: 0
            preferredLanguage:
              minLength: 6
              externalNamespace: externalNamespace
              pattern: pattern
              description: description
              union: null
              title: title
              type: null
              enum:
              - enum
              - enum
              required: true
              master:
                priority:
                - type: type
                  value: value
                - type: type
                  value: value
                type: null
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              permissions:
              - principal: principal
                action: action
              - principal: principal
                action: action
              externalName: externalName
              scope: null
              unique: unique
              mutability: mutability
              items:
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                type: type
                enum:
                - enum
                - enum
              maxLength: 0
            city:
              minLength: 6
              externalNamespace: externalNamespace
              pattern: pattern
              description: description
              union: null
              title: title
              type: null
              enum:
              - enum
              - enum
              required: true
              master:
                priority:
                - type: type
                  value: value
                - type: type
                  value: value
                type: null
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              permissions:
              - principal: principal
                action: action
              - principal: principal
                action: action
              externalName: externalName
              scope: null
              unique: unique
              mutability: mutability
              items:
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                type: type
                enum:
                - enum
                - enum
              maxLength: 0
            displayName:
              minLength: 6
              externalNamespace: externalNamespace
              pattern: pattern
              description: description
              union: null
              title: title
              type: null
              enum:
              - enum
              - enum
              required: true
              master:
                priority:
                - type: type
                  value: value
                - type: type
                  value: value
                type: null
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              permissions:
              - principal: principal
                action: action
              - principal: principal
                action: action
              externalName: externalName
              scope: null
              unique: unique
              mutability: mutability
              items:
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                type: type
                enum:
                - enum
                - enum
              maxLength: 0
            timezone:
              minLength: 6
              externalNamespace: externalNamespace
              pattern: pattern
              description: description
              union: null
              title: title
              type: null
              enum:
              - enum
              - enum
              required: true
              master:
                priority:
                - type: type
                  value: value
                - type: type
                  value: value
                type: null
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              permissions:
              - principal: principal
                action: action
              - principal: principal
                action: action
              externalName: externalName
              scope: null
              unique: unique
              mutability: mutability
              items:
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                type: type
                enum:
                - enum
                - enum
              maxLength: 0
            locale:
              minLength: 6
              externalNamespace: externalNamespace
              pattern: pattern
              description: description
              union: null
              title: title
              type: null
              enum:
              - enum
              - enum
              required: true
              master:
                priority:
                - type: type
                  value: value
                - type: type
                  value: value
                type: null
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              permissions:
              - principal: principal
                action: action
              - principal: principal
                action: action
              externalName: externalName
              scope: null
              unique: unique
              mutability: mutability
              items:
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                type: type
                enum:
                - enum
                - enum
              maxLength: 0
            login:
              minLength: 6
              externalNamespace: externalNamespace
              pattern: pattern
              description: description
              union: null
              title: title
              type: null
              enum:
              - enum
              - enum
              required: true
              master:
                priority:
                - type: type
                  value: value
                - type: type
                  value: value
                type: null
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              permissions:
              - principal: principal
                action: action
              - principal: principal
                action: action
              externalName: externalName
              scope: null
              unique: unique
              mutability: mutability
              items:
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                type: type
                enum:
                - enum
                - enum
              maxLength: 0
            title:
              minLength: 6
              externalNamespace: externalNamespace
              pattern: pattern
              description: description
              union: null
              title: title
              type: null
              enum:
              - enum
              - enum
              required: true
              master:
                priority:
                - type: type
                  value: value
                - type: type
                  value: value
                type: null
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              permissions:
              - principal: principal
                action: action
              - principal: principal
                action: action
              externalName: externalName
              scope: null
              unique: unique
              mutability: mutability
              items:
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                type: type
                enum:
                - enum
                - enum
              maxLength: 0
            employeeNumber:
              minLength: 6
              externalNamespace: externalNamespace
              pattern: pattern
              description: description
              union: null
              title: title
              type: null
              enum:
              - enum
              - enum
              required: true
              master:
                priority:
                - type: type
                  value: value
                - type: type
                  value: value
                type: null
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              permissions:
              - principal: principal
                action: action
              - principal: principal
                action: action
              externalName: externalName
              scope: null
              unique: unique
              mutability: mutability
              items:
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                type: type
                enum:
                - enum
                - enum
              maxLength: 0
            division:
              minLength: 6
              externalNamespace: externalNamespace
              pattern: pattern
              description: description
              union: null
              title: title
              type: null
              enum:
              - enum
              - enum
              required: true
              master:
                priority:
                - type: type
                  value: value
                - type: type
                  value: value
                type: null
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              permissions:
              - principal: principal
                action: action
              - principal: principal
                action: action
              externalName: externalName
              scope: null
              unique: unique
              mutability: mutability
              items:
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                type: type
                enum:
                - enum
                - enum
              maxLength: 0
            honorificSuffix:
              minLength: 6
              externalNamespace: externalNamespace
              pattern: pattern
              description: description
              union: null
              title: title
              type: null
              enum:
              - enum
              - enum
              required: true
              master:
                priority:
                - type: type
                  value: value
                - type: type
                  value: value
                type: null
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              permissions:
              - principal: principal
                action: action
              - principal: principal
                action: action
              externalName: externalName
              scope: null
              unique: unique
              mutability: mutability
              items:
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                type: type
                enum:
                - enum
                - enum
              maxLength: 0
            countryCode:
              minLength: 6
              externalNamespace: externalNamespace
              pattern: pattern
              description: description
              union: null
              title: title
              type: null
              enum:
              - enum
              - enum
              required: true
              master:
                priority:
                - type: type
                  value: value
                - type: type
                  value: value
                type: null
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              permissions:
              - principal: principal
                action: action
              - principal: principal
                action: action
              externalName: externalName
              scope: null
              unique: unique
              mutability: mutability
              items:
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                type: type
                enum:
                - enum
                - enum
              maxLength: 0
            state:
              minLength: 6
              externalNamespace: externalNamespace
              pattern: pattern
              description: description
              union: null
              title: title
              type: null
              enum:
              - enum
              - enum
              required: true
              master:
                priority:
                - type: type
                  value: value
                - type: type
                  value: value
                type: null
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              permissions:
              - principal: principal
                action: action
              - principal: principal
                action: action
              externalName: externalName
              scope: null
              unique: unique
              mutability: mutability
              items:
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                type: type
                enum:
                - enum
                - enum
              maxLength: 0
            department:
              minLength: 6
              externalNamespace: externalNamespace
              pattern: pattern
              description: description
              union: null
              title: title
              type: null
              enum:
              - enum
              - enum
              required: true
              master:
                priority:
                - type: type
                  value: value
                - type: type
                  value: value
                type: null
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              permissions:
              - principal: principal
                action: action
              - principal: principal
                action: action
              externalName: externalName
              scope: null
              unique: unique
              mutability: mutability
              items:
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                type: type
                enum:
                - enum
                - enum
              maxLength: 0
            email:
              minLength: 6
              externalNamespace: externalNamespace
              pattern: pattern
              description: description
              union: null
              title: title
              type: null
              enum:
              - enum
              - enum
              required: true
              master:
                priority:
                - type: type
                  value: value
                - type: type
                  value: value
                type: null
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              permissions:
              - principal: principal
                action: action
              - principal: principal
                action: action
              externalName: externalName
              scope: null
              unique: unique
              mutability: mutability
              items:
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                type: type
                enum:
                - enum
                - enum
              maxLength: 0
            manager:
              minLength: 6
              externalNamespace: externalNamespace
              pattern: pattern
              description: description
              union: null
              title: title
              type: null
              enum:
              - enum
              - enum
              required: true
              master:
                priority:
                - type: type
                  value: value
                - type: type
                  value: value
                type: null
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              permissions:
              - principal: principal
                action: action
              - principal: principal
                action: action
              externalName: externalName
              scope: null
              unique: unique
              mutability: mutability
              items:
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                type: type
                enum:
                - enum
                - enum
              maxLength: 0
            costCenter:
              minLength: 6
              externalNamespace: externalNamespace
              pattern: pattern
              description: description
              union: null
              title: title
              type: null
              enum:
              - enum
              - enum
              required: true
              master:
                priority:
                - type: type
                  value: value
                - type: type
                  value: value
                type: null
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              permissions:
              - principal: principal
                action: action
              - principal: principal
                action: action
              externalName: externalName
              scope: null
              unique: unique
              mutability: mutability
              items:
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                type: type
                enum:
                - enum
                - enum
              maxLength: 0
            nickName:
              minLength: 6
              externalNamespace: externalNamespace
              pattern: pattern
              description: description
              union: null
              title: title
              type: null
              enum:
              - enum
              - enum
              required: true
              master:
                priority:
                - type: type
                  value: value
                - type: type
                  value: value
                type: null
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              permissions:
              - principal: principal
                action: action
              - principal: principal
                action: action
              externalName: externalName
              scope: null
              unique: unique
              mutability: mutability
              items:
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                type: type
                enum:
                - enum
                - enum
              maxLength: 0
            secondEmail:
              minLength: 6
              externalNamespace: externalNamespace
              pattern: pattern
              description: description
              union: null
              title: title
              type: null
              enum:
              - enum
              - enum
              required: true
              master:
                priority:
                - type: type
                  value: value
                - type: type
                  value: value
                type: null
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              permissions:
              - principal: principal
                action: action
              - principal: principal
                action: action
              externalName: externalName
              scope: null
              unique: unique
              mutability: mutability
              items:
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                type: type
                enum:
                - enum
                - enum
              maxLength: 0
            honorificPrefix:
              minLength: 6
              externalNamespace: externalNamespace
              pattern: pattern
              description: description
              union: null
              title: title
              type: null
              enum:
              - enum
              - enum
              required: true
              master:
                priority:
                - type: type
                  value: value
                - type: type
                  value: value
                type: null
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              permissions:
              - principal: principal
                action: action
              - principal: principal
                action: action
              externalName: externalName
              scope: null
              unique: unique
              mutability: mutability
              items:
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                type: type
                enum:
                - enum
                - enum
              maxLength: 0
            managerId:
              minLength: 6
              externalNamespace: externalNamespace
              pattern: pattern
              description: description
              union: null
              title: title
              type: null
              enum:
              - enum
              - enum
              required: true
              master:
                priority:
                - type: type
                  value: value
                - type: type
                  value: value
                type: null
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              permissions:
              - principal: principal
                action: action
              - principal: principal
                action: action
              externalName: externalName
              scope: null
              unique: unique
              mutability: mutability
              items:
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                type: type
                enum:
                - enum
                - enum
              maxLength: 0
            firstName:
              minLength: 6
              externalNamespace: externalNamespace
              pattern: pattern
              description: description
              union: null
              title: title
              type: null
              enum:
              - enum
              - enum
              required: true
              master:
                priority:
                - type: type
                  value: value
                - type: type
                  value: value
                type: null
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              permissions:
              - principal: principal
                action: action
              - principal: principal
                action: action
              externalName: externalName
              scope: null
              unique: unique
              mutability: mutability
              items:
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                type: type
                enum:
                - enum
                - enum
              maxLength: 0
            primaryPhone:
              minLength: 6
              externalNamespace: externalNamespace
              pattern: pattern
              description: description
              union: null
              title: title
              type: null
              enum:
              - enum
              - enum
              required: true
              master:
                priority:
                - type: type
                  value: value
                - type: type
                  value: value
                type: null
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              permissions:
              - principal: principal
                action: action
              - principal: principal
                action: action
              externalName: externalName
              scope: null
              unique: unique
              mutability: mutability
              items:
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                type: type
                enum:
                - enum
                - enum
              maxLength: 0
            postalAddress:
              minLength: 6
              externalNamespace: externalNamespace
              pattern: pattern
              description: description
              union: null
              title: title
              type: null
              enum:
              - enum
              - enum
              required: true
              master:
                priority:
                - type: type
                  value: value
                - type: type
                  value: value
                type: null
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              permissions:
              - principal: principal
                action: action
              - principal: principal
                action: action
              externalName: externalName
              scope: null
              unique: unique
              mutability: mutability
              items:
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                type: type
                enum:
                - enum
                - enum
              maxLength: 0
            mobilePhone:
              minLength: 6
              externalNamespace: externalNamespace
              pattern: pattern
              description: description
              union: null
              title: title
              type: null
              enum:
              - enum
              - enum
              required: true
              master:
                priority:
                - type: type
                  value: value
                - type: type
                  value: value
                type: null
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              permissions:
              - principal: principal
                action: action
              - principal: principal
                action: action
              externalName: externalName
              scope: null
              unique: unique
              mutability: mutability
              items:
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                type: type
                enum:
                - enum
                - enum
              maxLength: 0
            streetAddress:
              minLength: 6
              externalNamespace: externalNamespace
              pattern: pattern
              description: description
              union: null
              title: title
              type: null
              enum:
              - enum
              - enum
              required: true
              master:
                priority:
                - type: type
                  value: value
                - type: type
                  value: value
                type: null
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              permissions:
              - principal: principal
                action: action
              - principal: principal
                action: action
              externalName: externalName
              scope: null
              unique: unique
              mutability: mutability
              items:
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                type: type
                enum:
                - enum
                - enum
              maxLength: 0
            organization:
              minLength: 6
              externalNamespace: externalNamespace
              pattern: pattern
              description: description
              union: null
              title: title
              type: null
              enum:
              - enum
              - enum
              required: true
              master:
                priority:
                - type: type
                  value: value
                - type: type
                  value: value
                type: null
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              permissions:
              - principal: principal
                action: action
              - principal: principal
                action: action
              externalName: externalName
              scope: null
              unique: unique
              mutability: mutability
              items:
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                type: type
                enum:
                - enum
                - enum
              maxLength: 0
            middleName:
              minLength: 6
              externalNamespace: externalNamespace
              pattern: pattern
              description: description
              union: null
              title: title
              type: null
              enum:
              - enum
              - enum
              required: true
              master:
                priority:
                - type: type
                  value: value
                - type: type
                  value: value
                type: null
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              permissions:
              - principal: principal
                action: action
              - principal: principal
                action: action
              externalName: externalName
              scope: null
              unique: unique
              mutability: mutability
              items:
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                type: type
                enum:
                - enum
                - enum
              maxLength: 0
            userType:
              minLength: 6
              externalNamespace: externalNamespace
              pattern: pattern
              description: description
              union: null
              title: title
              type: null
              enum:
              - enum
              - enum
              required: true
              master:
                priority:
                - type: type
                  value: value
                - type: type
                  value: value
                type: null
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              permissions:
              - principal: principal
                action: action
              - principal: principal
                action: action
              externalName: externalName
              scope: null
              unique: unique
              mutability: mutability
              items:
                oneOf:
                - const: const
                  title: title
                - const: const
                  title: title
                type: type
                enum:
                - enum
                - enum
              maxLength: 0
          required:
          - required
          - required
      properties:
        base:
          $ref: '#/components/schemas/UserSchemaBase'
        custom:
          $ref: '#/components/schemas/UserSchemaPublic'
      type: object
    UserSchemaProperties:
      example:
        profile:
          allOf:
          - $ref: $ref
          - $ref: $ref
      properties:
        profile:
          $ref: '#/components/schemas/UserSchemaPropertiesProfile'
      type: object
    UserSchemaPropertiesProfile:
      example:
        allOf:
        - $ref: $ref
        - $ref: $ref
      properties:
        allOf:
          items:
            $ref: '#/components/schemas/UserSchemaPropertiesProfileItem'
          type: array
      type: object
    UserSchemaPropertiesProfileItem:
      example:
        $ref: $ref
      properties:
        $ref:
          type: string
      type: object
    UserSchemaPublic:
      example:
        id: id
        type: type
        properties:
          key:
            minLength: 6
            externalNamespace: externalNamespace
            pattern: pattern
            description: description
            union: null
            title: title
            type: null
            enum:
            - enum
            - enum
            required: true
            master:
              priority:
              - type: type
                value: value
              - type: type
                value: value
              type: null
            oneOf:
            - const: const
              title: title
            - const: const
              title: title
            permissions:
            - principal: principal
              action: action
            - principal: principal
              action: action
            externalName: externalName
            scope: null
            unique: unique
            mutability: mutability
            items:
              oneOf:
              - const: const
                title: title
              - const: const
                title: title
              type: type
              enum:
              - enum
              - enum
            maxLength: 0
        required:
        - required
        - required
      properties:
        id:
          type: string
        properties:
          additionalProperties:
            $ref: '#/components/schemas/UserSchemaAttribute'
          type: object
        required:
          items:
            type: string
          type: array
        type:
          type: string
      type: object
    UserStatus:
      enum:
      - ACTIVE
      - DEPROVISIONED
      - LOCKED_OUT
      - PASSWORD_EXPIRED
      - PROVISIONED
      - RECOVERY
      - STAGED
      - SUSPENDED
      type: string
    UserStatusPolicyRuleCondition:
      properties:
        value:
          $ref: '#/components/schemas/PolicyUserStatus'
      type: object
    UserType:
      example:
        lastUpdated: 2000-01-23T04:56:07.000+00:00
        lastUpdatedBy: lastUpdatedBy
        default: true
        createdBy: createdBy
        _links:
          key: "{}"
        created: 2000-01-23T04:56:07.000+00:00
        displayName: displayName
        name: name
        description: description
        id: id
      properties:
        created:
          format: date-time
          readOnly: true
          type: string
        createdBy:
          readOnly: true
          type: string
        default:
          readOnly: true
          type: boolean
        description:
          type: string
        displayName:
          type: string
        id:
          type: string
        lastUpdated:
          format: date-time
          readOnly: true
          type: string
        lastUpdatedBy:
          readOnly: true
          type: string
        name:
          type: string
        _links:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
      type: object
    UserTypeCondition:
      properties:
        exclude:
          items:
            type: string
          type: array
        include:
          items:
            type: string
          type: array
    UserVerificationEnum:
      enum:
      - PREFERRED
      - REQUIRED
      type: string
    VerificationMethod:
      properties:
        constraints:
          items:
            $ref: '#/components/schemas/AccessPolicyConstraints'
          type: array
        factorMode:
          type: string
        reauthenticateIn:
          type: string
        type:
          type: string
      type: object
    VerifyFactorRequest:
      example:
        attestation: attestation
        answer: answer
        nextPassCode: nextPassCode
        stateToken: stateToken
        clientData: clientData
        passCode: passCode
        registrationData: registrationData
        activationToken: activationToken
      properties:
        activationToken:
          type: string
        answer:
          type: string
        attestation:
          type: string
        clientData:
          type: string
        nextPassCode:
          type: string
        passCode:
          type: string
        registrationData:
          type: string
        stateToken:
          type: string
      type: object
    VerifyUserFactorResponse:
      example:
        factorResultMessage: factorResultMessage
        _embedded:
          key: "{}"
        _links:
          key: "{}"
        factorResult: null
        expiresAt: 2000-01-23T04:56:07.000+00:00
      properties:
        expiresAt:
          format: date-time
          readOnly: true
          type: string
        factorResult:
          $ref: '#/components/schemas/VerifyUserFactorResult'
        factorResultMessage:
          type: string
        _embedded:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
        _links:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
      type: object
    VerifyUserFactorResult:
      enum:
      - CHALLENGE
      - ERROR
      - EXPIRED
      - FAILED
      - PASSCODE_REPLAYED
      - REJECTED
      - SUCCESS
      - TIMEOUT
      - TIME_WINDOW_EXCEEDED
      - WAITING
      type: string
    Version:
      description: "The version specified as a [Semantic Version](https://semver.org/)."
      pattern: "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\\
        d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\\
        +([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
      type: string
    VersionObject:
      example:
        minimum: minimum
      properties:
        minimum:
          type: string
      type: object
    WebAuthnUserFactor:
      allOf:
      - $ref: '#/components/schemas/UserFactor'
      - $ref: '#/components/schemas/WebAuthnUserFactor_allOf'
    WebAuthnUserFactorProfile:
      properties:
        authenticatorName:
          type: string
        credentialId:
          type: string
      type: object
    WebUserFactor:
      allOf:
      - $ref: '#/components/schemas/UserFactor'
      - $ref: '#/components/schemas/WebUserFactor_allOf'
    WebUserFactorProfile:
      properties:
        credentialId:
          type: string
      type: object
    WellKnownOrgMetadata:
      example:
        pipeline: null
        settings:
          analyticsCollectionEnabled: true
          bugReportingEnabled: true
          omEnabled: true
        _links:
          organization:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
          alternate:
            hints:
              allow:
              - null
              - null
            name: name
            href: href
            type: type
        id: id
      properties:
        id:
          description: The unique identifier of the Org
          type: string
        pipeline:
          $ref: '#/components/schemas/PipelineType'
        settings:
          $ref: '#/components/schemas/WellKnownOrgMetadataSettings'
        _links:
          $ref: '#/components/schemas/WellKnownOrgMetadata__links'
      type: object
    WellKnownOrgMetadataSettings:
      example:
        analyticsCollectionEnabled: true
        bugReportingEnabled: true
        omEnabled: true
      properties:
        analyticsCollectionEnabled:
          type: boolean
        bugReportingEnabled:
          type: boolean
        omEnabled:
          description: Whether the legacy Okta Mobile application is enabled for the
            org
          type: boolean
      type: object
    WsFederationApplication:
      allOf:
      - $ref: '#/components/schemas/Application'
      - $ref: '#/components/schemas/WsFederationApplication_allOf'
      x-okta-defined-as:
        name: template_wsfed
    WsFederationApplicationSettings:
      allOf:
      - $ref: '#/components/schemas/ApplicationSettings'
      - $ref: '#/components/schemas/WsFederationApplicationSettings_allOf'
    WsFederationApplicationSettingsApplication:
      properties:
        attributeStatements:
          type: string
        audienceRestriction:
          type: string
        authnContextClassRef:
          type: string
        groupFilter:
          type: string
        groupName:
          type: string
        groupValueFormat:
          type: string
        nameIDFormat:
          type: string
        realm:
          type: string
        siteURL:
          type: string
        usernameAttribute:
          type: string
        wReplyOverride:
          type: boolean
        wReplyURL:
          type: string
      type: object
    listApplications_200_response_inner:
      discriminator:
        mapping:
          AUTO_LOGIN: '#/components/schemas/AutoLoginApplication'
          BASIC_AUTH: '#/components/schemas/BasicAuthApplication'
          BOOKMARK: '#/components/schemas/BookmarkApplication'
          BROWSER_PLUGIN: '#/components/schemas/BrowserPluginApplication'
          OPENID_CONNECT: '#/components/schemas/OpenIdConnectApplication'
          SAML_1_1: '#/components/schemas/SamlApplication'
          SAML_2_0: '#/components/schemas/SamlApplication'
          SECURE_PASSWORD_STORE: '#/components/schemas/SecurePasswordStoreApplication'
          WS_FEDERATION: '#/components/schemas/WsFederationApplication'
        propertyName: signOnMode
      oneOf:
      - $ref: '#/components/schemas/AutoLoginApplication'
      - $ref: '#/components/schemas/BasicAuthApplication'
      - $ref: '#/components/schemas/BookmarkApplication'
      - $ref: '#/components/schemas/BrowserPluginApplication'
      - $ref: '#/components/schemas/OpenIdConnectApplication'
      - $ref: '#/components/schemas/SamlApplication'
      - $ref: '#/components/schemas/SecurePasswordStoreApplication'
      - $ref: '#/components/schemas/WsFederationApplication'
    uploadApplicationLogo_request:
      properties:
        file:
          format: binary
          type: string
      required:
      - file
      type: object
    listBehaviorDetectionRules_200_response_inner:
      discriminator:
        mapping:
          ANOMALOUS_LOCATION: '#/components/schemas/BehaviorRuleAnomalousLocation'
          ANOMALOUS_IP: '#/components/schemas/BehaviorRuleAnomalousIP'
          ANOMALOUS_DEVICE: '#/components/schemas/BehaviorRuleAnomalousDevice'
          VELOCITY: '#/components/schemas/BehaviorRuleVelocity'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/BehaviorRuleAnomalousLocation'
      - $ref: '#/components/schemas/BehaviorRuleAnomalousIP'
      - $ref: '#/components/schemas/BehaviorRuleAnomalousDevice'
      - $ref: '#/components/schemas/BehaviorRuleVelocity'
    uploadBrandThemeBackgroundImage_request:
      description: "The file must be in PNG, JPG, or GIF format and less than 2 MB\
        \ in size."
      properties:
        file:
          format: binary
          type: string
      required:
      - file
      type: object
    uploadBrandThemeFavicon_request:
      description: "The file must be in PNG, or ico format and less than ?? in size\
        \ and 128 x 128 dimensions"
      properties:
        file:
          format: binary
          type: string
      required:
      - file
      type: object
    uploadBrandThemeLogo_request:
      description: "The file must be in PNG, JPG, or GIF format and less than 100kB\
        \ in size. For best results use landscape orientation, a transparent background,\
        \ and a minimum size of 300px by 50px to prevent upscaling."
      properties:
        file:
          format: binary
          type: string
      required:
      - file
      type: object
    listLogStreams_200_response_inner:
      discriminator:
        mapping:
          aws_eventbridge: '#/components/schemas/LogStreamAws'
          splunk_cloud_logstreaming: '#/components/schemas/LogStreamSplunk'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/LogStreamAws'
      - $ref: '#/components/schemas/LogStreamSplunk'
    listPolicies_200_response_inner:
      discriminator:
        mapping:
          ACCESS_POLICY: '#/components/schemas/AccessPolicy'
          IDP_DISCOVERY: '#/components/schemas/IdentityProviderPolicy'
          MFA_ENROLL: '#/components/schemas/MultifactorEnrollmentPolicy'
          OAUTH_AUTHORIZATION_POLICY: '#/components/schemas/AuthorizationServerPolicy'
          OKTA_SIGN_ON: '#/components/schemas/OktaSignOnPolicy'
          PASSWORD: '#/components/schemas/PasswordPolicy'
          PROFILE_ENROLLMENT: '#/components/schemas/ProfileEnrollmentPolicy'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/AccessPolicy'
      - $ref: '#/components/schemas/IdentityProviderPolicy'
      - $ref: '#/components/schemas/MultifactorEnrollmentPolicy'
      - $ref: '#/components/schemas/AuthorizationServerPolicy'
      - $ref: '#/components/schemas/OktaSignOnPolicy'
      - $ref: '#/components/schemas/PasswordPolicy'
      - $ref: '#/components/schemas/ProfileEnrollmentPolicy'
    listPolicyRules_200_response_inner:
      discriminator:
        mapping:
          ACCESS_POLICY: '#/components/schemas/AccessPolicyRule'
          PASSWORD: '#/components/schemas/PasswordPolicyRule'
          PROFILE_ENROLLMENT: '#/components/schemas/ProfileEnrollmentPolicyRule'
          RESOURCE_ACCESS: '#/components/schemas/AuthorizationServerPolicyRule'
          SIGN_ON: '#/components/schemas/OktaSignOnPolicyRule'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/AccessPolicyRule'
      - $ref: '#/components/schemas/PasswordPolicyRule'
      - $ref: '#/components/schemas/ProfileEnrollmentPolicyRule'
      - $ref: '#/components/schemas/AuthorizationServerPolicyRule'
      - $ref: '#/components/schemas/OktaSignOnPolicyRule'
    listPushProviders_200_response_inner:
      discriminator:
        mapping:
          APNS: '#/components/schemas/APNSPushProvider'
          FCM: '#/components/schemas/FCMPushProvider'
        propertyName: providerType
      oneOf:
      - $ref: '#/components/schemas/APNSPushProvider'
      - $ref: '#/components/schemas/FCMPushProvider'
    listFactors_200_response_inner:
      discriminator:
        mapping:
          call: '#/components/schemas/CallUserFactor'
          email: '#/components/schemas/EmailUserFactor'
          push: '#/components/schemas/PushUserFactor'
          question: '#/components/schemas/SecurityQuestionUserFactor'
          sms: '#/components/schemas/SmsUserFactor'
          token: '#/components/schemas/TokenUserFactor'
          token:hardware: '#/components/schemas/HardwareUserFactor'
          token:hotp: '#/components/schemas/CustomHotpUserFactor'
          token:software:totp: '#/components/schemas/TotpUserFactor'
          u2f: '#/components/schemas/U2fUserFactor'
          web: '#/components/schemas/WebUserFactor'
          webauthn: '#/components/schemas/WebAuthnUserFactor'
          hotp: '#/components/schemas/CustomHotpUserFactor'
        propertyName: factorType
      oneOf:
      - $ref: '#/components/schemas/CallUserFactor'
      - $ref: '#/components/schemas/EmailUserFactor'
      - $ref: '#/components/schemas/PushUserFactor'
      - $ref: '#/components/schemas/SecurityQuestionUserFactor'
      - $ref: '#/components/schemas/SmsUserFactor'
      - $ref: '#/components/schemas/TokenUserFactor'
      - $ref: '#/components/schemas/HardwareUserFactor'
      - $ref: '#/components/schemas/CustomHotpUserFactor'
      - $ref: '#/components/schemas/TotpUserFactor'
      - $ref: '#/components/schemas/U2fUserFactor'
      - $ref: '#/components/schemas/WebUserFactor'
      - $ref: '#/components/schemas/WebAuthnUserFactor'
    APNSPushProvider_allOf:
      properties:
        configuration:
          $ref: '#/components/schemas/APNSConfiguration'
      type: object
    AccessPolicy_allOf:
      properties:
        conditions:
          $ref: '#/components/schemas/PolicyRuleConditions'
      type: object
    AccessPolicyRule_allOf:
      properties:
        actions:
          $ref: '#/components/schemas/AccessPolicyRuleActions'
        conditions:
          $ref: '#/components/schemas/AccessPolicyRuleConditions'
      type: object
    AccessPolicyRuleActions_allOf:
      properties:
        appSignOn:
          $ref: '#/components/schemas/AccessPolicyRuleApplicationSignOn'
      type: object
    AccessPolicyRuleConditions_allOf:
      properties:
        device:
          $ref: '#/components/schemas/DeviceAccessPolicyRuleCondition'
        elCondition:
          $ref: '#/components/schemas/AccessPolicyRuleCustomCondition'
        userType:
          $ref: '#/components/schemas/UserTypeCondition'
      type: object
    ApiToken__link:
      example:
        self:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
      properties:
        self:
          $ref: '#/components/schemas/HrefObject'
      readOnly: true
      type: object
    ApplicationLayout_rule:
      example:
        condition:
          schema:
            key: ""
          scope: scope
        effect: effect
      properties:
        effect:
          type: string
        condition:
          $ref: '#/components/schemas/ApplicationLayoutRuleCondition'
      type: object
    AuthorizationServerPolicyRule_allOf:
      properties:
        actions:
          $ref: '#/components/schemas/AuthorizationServerPolicyRuleActions'
        conditions:
          $ref: '#/components/schemas/AuthorizationServerPolicyRuleConditions'
      type: object
    AuthorizationServerPolicyRuleActions_allOf:
      properties:
        token:
          $ref: '#/components/schemas/TokenAuthorizationServerPolicyRuleAction'
      type: object
    AuthorizationServerPolicyRuleConditions_allOf:
      properties:
        clients:
          $ref: '#/components/schemas/ClientPolicyCondition'
        grantTypes:
          $ref: '#/components/schemas/GrantTypePolicyRuleCondition'
        people:
          $ref: '#/components/schemas/PolicyPeopleCondition'
        scopes:
          $ref: '#/components/schemas/OAuth2ScopesMediationPolicyRuleCondition'
      type: object
    AutoLoginApplication_allOf:
      properties:
        credentials:
          $ref: '#/components/schemas/SchemeApplicationCredentials'
        name:
          type: string
        settings:
          $ref: '#/components/schemas/AutoLoginApplicationSettings'
      type: object
    AutoLoginApplicationSettings_allOf:
      properties:
        signOn:
          $ref: '#/components/schemas/AutoLoginApplicationSettingsSignOn'
      type: object
    BasicApplicationSettings_allOf:
      properties:
        app:
          $ref: '#/components/schemas/BasicApplicationSettingsApplication'
      type: object
    BasicAuthApplication_allOf:
      properties:
        credentials:
          $ref: '#/components/schemas/SchemeApplicationCredentials'
        name:
          default: template_basic_auth
          type: string
        settings:
          $ref: '#/components/schemas/BasicApplicationSettings'
      type: object
    BehaviorRuleAnomalousDevice_allOf:
      properties:
        settings:
          $ref: '#/components/schemas/BehaviorRuleSettingsAnomalousDevice'
      type: object
    BehaviorRuleAnomalousIP_allOf:
      properties:
        settings:
          $ref: '#/components/schemas/BehaviorRuleSettingsAnomalousIP'
      type: object
    BehaviorRuleAnomalousLocation_allOf:
      properties:
        settings:
          $ref: '#/components/schemas/BehaviorRuleSettingsAnomalousLocation'
      type: object
    BehaviorRuleSettingsAnomalousIP_allOf:
      properties:
        maxEventsUsedForEvaluation:
          default: 50
          maximum: 100
          minimum: 0
          type: integer
      type: object
    BehaviorRuleSettingsAnomalousLocation_allOf:
      properties:
        granularity:
          $ref: '#/components/schemas/LocationGranularity'
        radiusKilometers:
          description: Required when `granularity` is `LAT_LONG`. Radius from the
            provided coordinates in kilometers.
          type: integer
      required:
      - granularity
      type: object
    Behavior_Detection_Rule_Settings_based_on_Event_History:
      properties:
        maxEventsUsedForEvaluation:
          default: 20
          maximum: 100
          minimum: 1
          type: integer
        minEventsNeededForEvaluation:
          default: 0
          maximum: 10
          minimum: 0
          type: integer
      title: Behavior Detection Rule Settings based on Event History
      type: object
    Behavior_Detection_Rule_Settings_based_on_device_velocity_in_kilometers_per_hour_:
      properties:
        velocityKph:
          default: 805
          minimum: 1
          type: integer
      required:
      - velocityKph
      title: Behavior Detection Rule Settings based on device velocity in kilometers
        per hour.
      type: object
    BehaviorRuleVelocity_allOf:
      properties:
        settings:
          $ref: '#/components/schemas/BehaviorRuleSettingsVelocity'
      type: object
    BookmarkApplication_allOf:
      properties:
        credentials:
          $ref: '#/components/schemas/ApplicationCredentials'
        name:
          default: bookmark
          type: string
        settings:
          $ref: '#/components/schemas/BookmarkApplicationSettings'
      type: object
    BookmarkApplicationSettings_allOf:
      properties:
        app:
          $ref: '#/components/schemas/BookmarkApplicationSettingsApplication'
      type: object
    Brand_defaultApp:
      example:
        appInstanceId: appInstanceId
        appLinkName: appLinkName
      properties:
        appInstanceId:
          type: string
        appLinkName:
          type: string
      type: object
    Brand__links:
      example:
        themes:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
        self:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
      properties:
        self:
          $ref: '#/components/schemas/HrefObject'
        themes:
          $ref: '#/components/schemas/HrefObject'
      readOnly: true
      type: object
    BrandDomain__links:
      description: Links to resources related to this brand domain
      example:
        domain:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
        self:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
        brand:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
      properties:
        self:
          $ref: '#/components/schemas/HrefObject'
        brand:
          $ref: '#/components/schemas/HrefObject'
        domain:
          $ref: '#/components/schemas/HrefObject'
      readOnly: true
      type: object
    BrowserPluginApplication_allOf:
      properties:
        credentials:
          $ref: '#/components/schemas/SchemeApplicationCredentials'
        name:
          type: string
        settings:
          $ref: '#/components/schemas/SwaApplicationSettings'
      type: object
    CallUserFactor_allOf:
      properties:
        profile:
          $ref: '#/components/schemas/CallUserFactorProfile'
      type: object
    ContextPolicyRuleCondition_allOf:
      properties:
        expression:
          type: string
      type: object
    CustomHotpUserFactor_allOf:
      properties:
        factorProfileId:
          type: string
        profile:
          $ref: '#/components/schemas/CustomHotpUserFactorProfile'
      type: object
    Device__links:
      example:
        suspend:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
        unsuspend:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
        activate:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
        self:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
        users:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
        deactivate:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
      properties:
        self:
          $ref: '#/components/schemas/HrefObject'
        users:
          $ref: '#/components/schemas/HrefObject'
        activate:
          $ref: '#/components/schemas/HrefObject'
        deactivate:
          $ref: '#/components/schemas/HrefObject'
        suspend:
          $ref: '#/components/schemas/HrefObject'
        unsuspend:
          $ref: '#/components/schemas/HrefObject'
      readOnly: true
      type: object
    DeviceAccessPolicyRuleCondition_allOf:
      properties:
        managed:
          type: boolean
        registered:
          type: boolean
      type: object
    DeviceAssurance_diskEncryptionType:
      example:
        include:
        - null
        - null
      properties:
        include:
          items:
            $ref: '#/components/schemas/DiskEncryptionType'
          type: array
      type: object
    DeviceAssurance_screenLockType:
      example:
        include:
        - null
        - null
      properties:
        include:
          items:
            $ref: '#/components/schemas/ScreenLockType'
          type: array
      type: object
    EmailCustomization_allOf__links:
      description: Links to resources related to this email customization.
      properties:
        self:
          $ref: '#/components/schemas/HrefObject'
        template:
          $ref: '#/components/schemas/HrefObject'
        preview:
          $ref: '#/components/schemas/HrefObject'
        test:
          $ref: '#/components/schemas/HrefObject'
      readOnly: true
      type: object
    EmailCustomization_allOf:
      properties:
        created:
          description: The UTC time at which this email customization was created.
          format: date-time
          readOnly: true
          type: string
        id:
          description: A unique identifier for this email customization.
          readOnly: true
          type: string
        isDefault:
          description: Whether this is the default customization for the email template.
            Each customized email template must have exactly one default customization.
            Defaults to `true` for the first customization and `false` thereafter.
          type: boolean
        language:
          description: "The language specified as an [IETF BCP 47 language tag](https://datatracker.ietf.org/doc/html/rfc5646)."
          type: string
        lastUpdated:
          description: The UTC time at which this email customization was last updated.
          format: date-time
          readOnly: true
          type: string
        _links:
          $ref: '#/components/schemas/EmailCustomization_allOf__links'
      required:
      - language
      type: object
    EmailDefaultContent_allOf__links:
      description: Links to resources related to this email template's default content.
      properties:
        self:
          $ref: '#/components/schemas/HrefObject'
        template:
          $ref: '#/components/schemas/HrefObject'
        preview:
          $ref: '#/components/schemas/HrefObject'
        test:
          $ref: '#/components/schemas/HrefObject'
      readOnly: true
      type: object
    EmailDefaultContent_allOf:
      properties:
        _links:
          $ref: '#/components/schemas/EmailDefaultContent_allOf__links'
      type: object
    EmailPreview__links:
      description: Links to resources related to this email preview.
      example:
        template:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
        contentSource:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
        defaultContent:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
        test:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
        self:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
      properties:
        self:
          $ref: '#/components/schemas/HrefObject'
        contentSource:
          $ref: '#/components/schemas/HrefObject'
        template:
          $ref: '#/components/schemas/HrefObject'
        test:
          $ref: '#/components/schemas/HrefObject'
        defaultContent:
          $ref: '#/components/schemas/HrefObject'
      readOnly: true
      type: object
    EmailTemplate__embedded:
      example:
        customizationCount: 0
        settings:
          recipients: ALL_USERS
      properties:
        settings:
          $ref: '#/components/schemas/EmailSettings'
        customizationCount:
          type: integer
      readOnly: true
      type: object
    EmailTemplate__links:
      description: Links to resources related to this email template.
      example:
        settings:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
        defaultContent:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
        test:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
        self:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
        customizations:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
      properties:
        self:
          $ref: '#/components/schemas/HrefObject'
        settings:
          $ref: '#/components/schemas/HrefObject'
        defaultContent:
          $ref: '#/components/schemas/HrefObject'
        customizations:
          $ref: '#/components/schemas/HrefObject'
        test:
          $ref: '#/components/schemas/HrefObject'
      readOnly: true
      type: object
    EmailUserFactor_allOf:
      properties:
        profile:
          $ref: '#/components/schemas/EmailUserFactorProfile'
      type: object
    Error_errorCauses_inner:
      properties:
        errorSummary:
          type: string
      type: object
    FCMPushProvider_allOf:
      properties:
        configuration:
          $ref: '#/components/schemas/FCMConfiguration'
      type: object
    Group__links:
      example:
        logo:
        - hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
        - hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
        self:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
        source:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
        users:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
        apps:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
      properties:
        apps:
          $ref: '#/components/schemas/HrefObject'
        logo:
          items:
            $ref: '#/components/schemas/HrefObject'
          type: array
        self:
          $ref: '#/components/schemas/HrefObject'
        source:
          $ref: '#/components/schemas/HrefObject'
        users:
          $ref: '#/components/schemas/HrefObject'
      readOnly: true
      type: object
    HardwareUserFactor_allOf:
      properties:
        profile:
          $ref: '#/components/schemas/HardwareUserFactorProfile'
      type: object
    HrefObject_hints:
      example:
        allow:
        - null
        - null
      properties:
        allow:
          items:
            $ref: '#/components/schemas/HttpMethod'
          type: array
      type: object
    IamRole__links:
      example:
        permissions:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
        self:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
      properties:
        self:
          $ref: '#/components/schemas/HrefObject'
        permissions:
          $ref: '#/components/schemas/HrefObject'
      readOnly: true
      type: object
    IamRoles__links:
      example:
        next:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
      properties:
        next:
          $ref: '#/components/schemas/HrefObject'
      readOnly: true
      type: object
    IdentityProviderPolicy_allOf:
      properties:
        accountLink:
          $ref: '#/components/schemas/PolicyAccountLink'
        conditions:
          $ref: '#/components/schemas/PolicyRuleConditions'
        maxClockSkew:
          type: integer
        provisioning:
          $ref: '#/components/schemas/Provisioning'
        subject:
          $ref: '#/components/schemas/PolicySubject'
      type: object
    InlineHookChannelHttp_allOf:
      properties:
        config:
          $ref: '#/components/schemas/InlineHookChannelConfig'
      type: object
    InlineHookChannelOAuth_allOf:
      properties:
        config:
          $ref: '#/components/schemas/InlineHookOAuthChannelConfig'
      type: object
    LogStream__links:
      properties:
        self:
          $ref: '#/components/schemas/HrefObject'
        activate:
          $ref: '#/components/schemas/HrefObject'
        deactivate:
          $ref: '#/components/schemas/HrefObject'
      readOnly: true
      type: object
    LogStreamAws_allOf:
      properties:
        settings:
          $ref: '#/components/schemas/LogStreamSettingsAws'
      type: object
    LogStreamSettingsAws_allOf:
      description: The AWS EventBridge Settings object specifies the configuration
        for the `aws_eventbridge` Log Stream type. This can't be modified after creation.
      properties:
        accountId:
          description: Your AWS account ID
          maxLength: 12
          minLength: 12
          type: string
        eventSourceName:
          description: An alphanumeric name (no spaces) to identify this event source
            in AWS EventBridge
          maxLength: 75
          minLength: 1
          pattern: "^[a-zA-Z0-9.\\-_]$"
          type: string
        region:
          $ref: '#/components/schemas/AwsRegion'
      type: object
    LogStreamSettingsSplunk_allOf:
      description: The Splunk Cloud Settings object specifies the configuration for
        the `splunk_cloud_logstreaming` Log Stream type.
      properties:
        host:
          description: "The domain name for your Splunk Cloud instance. Don't include\
            \ `http` or `https` in the string. For example: `acme.splunkcloud.com`"
          maxLength: 116
          minLength: 17
          type: string
        token:
          description: The HEC token for your Splunk Cloud HTTP Event Collector
          pattern: "(?i)^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
          type: string
      type: object
    LogStreamSplunk_allOf:
      properties:
        settings:
          $ref: '#/components/schemas/LogStreamSettingsSplunk'
      type: object
    MultifactorEnrollmentPolicy_allOf:
      properties:
        conditions:
          $ref: '#/components/schemas/PolicyRuleConditions'
        settings:
          $ref: '#/components/schemas/MultifactorEnrollmentPolicySettings'
      type: object
    MultifactorEnrollmentPolicyAuthenticatorSettings_enroll:
      properties:
        self:
          $ref: '#/components/schemas/MultifactorEnrollmentPolicyAuthenticatorStatus'
      type: object
    OAuthApplicationCredentials_allOf:
      properties:
        oauthClient:
          $ref: '#/components/schemas/ApplicationCredentialsOAuthClient'
      type: object
    OktaSignOnPolicy_allOf:
      properties:
        conditions:
          $ref: '#/components/schemas/OktaSignOnPolicyConditions'
      type: object
    OktaSignOnPolicyConditions_allOf:
      properties:
        people:
          $ref: '#/components/schemas/PolicyPeopleCondition'
      type: object
    OktaSignOnPolicyRule_allOf:
      properties:
        actions:
          $ref: '#/components/schemas/OktaSignOnPolicyRuleActions'
        conditions:
          $ref: '#/components/schemas/OktaSignOnPolicyRuleConditions'
      type: object
    OktaSignOnPolicyRuleActions_allOf:
      properties:
        signon:
          $ref: '#/components/schemas/OktaSignOnPolicyRuleSignonActions'
      type: object
    OktaSignOnPolicyRuleConditions_allOf:
      properties:
        authContext:
          $ref: '#/components/schemas/PolicyRuleAuthContextCondition'
        network:
          $ref: '#/components/schemas/PolicyNetworkCondition'
        people:
          $ref: '#/components/schemas/PolicyPeopleCondition'
      type: object
    OpenIdConnectApplication_allOf:
      properties:
        credentials:
          $ref: '#/components/schemas/OAuthApplicationCredentials'
        name:
          default: oidc_client
          type: string
        settings:
          $ref: '#/components/schemas/OpenIdConnectApplicationSettings'
      type: object
    OpenIdConnectApplicationSettings_allOf:
      properties:
        oauthClient:
          $ref: '#/components/schemas/OpenIdConnectApplicationSettingsClient'
      type: object
    PageRoot__embedded:
      example:
        preview:
          pageContent: pageContent
        default:
          pageContent: pageContent
        customized:
          pageContent: pageContent
        previewUrl: https://openapi-generator.tech
        customizedUrl: https://openapi-generator.tech
      properties:
        default:
          $ref: '#/components/schemas/CustomizablePage'
        customized:
          $ref: '#/components/schemas/CustomizablePage'
        customizedUrl:
          format: uri
          type: string
        preview:
          $ref: '#/components/schemas/CustomizablePage'
        previewUrl:
          format: uri
          type: string
      readOnly: true
      type: object
    PageRoot__links:
      example:
        preview:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
        default:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
        customized:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
        self:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
      properties:
        self:
          $ref: '#/components/schemas/HrefObject'
        default:
          $ref: '#/components/schemas/HrefObject'
        customized:
          $ref: '#/components/schemas/HrefObject'
        preview:
          $ref: '#/components/schemas/HrefObject'
      readOnly: true
      type: object
    PasswordPolicy_allOf:
      properties:
        conditions:
          $ref: '#/components/schemas/PasswordPolicyConditions'
        settings:
          $ref: '#/components/schemas/PasswordPolicySettings'
      type: object
    PasswordPolicyConditions_allOf:
      properties:
        authProvider:
          $ref: '#/components/schemas/PasswordPolicyAuthenticationProviderCondition'
        people:
          $ref: '#/components/schemas/PolicyPeopleCondition'
      type: object
    PasswordPolicyRule_allOf:
      properties:
        actions:
          $ref: '#/components/schemas/PasswordPolicyRuleActions'
        conditions:
          $ref: '#/components/schemas/PasswordPolicyRuleConditions'
      type: object
    PasswordPolicyRuleActions_allOf:
      properties:
        passwordChange:
          $ref: '#/components/schemas/PasswordPolicyRuleAction'
        selfServicePasswordReset:
          $ref: '#/components/schemas/PasswordPolicyRuleAction'
        selfServiceUnlock:
          $ref: '#/components/schemas/PasswordPolicyRuleAction'
      type: object
    PasswordPolicyRuleConditions_allOf:
      properties:
        network:
          $ref: '#/components/schemas/PolicyNetworkCondition'
        people:
          $ref: '#/components/schemas/PolicyPeopleCondition'
      type: object
    PerClientRateLimitSettings_useCaseModeOverrides:
      description: A map of Per-Client Rate Limit Use Case to the applicable PerClientRateLimitMode.
        Overrides the `defaultMode` property for the specified use cases.
      example:
        LOGIN_PAGE: null
        OIE_APP_INTENT: null
        OAUTH2_AUTHORIZE: null
      properties:
        LOGIN_PAGE:
          $ref: '#/components/schemas/PerClientRateLimitMode'
        OAUTH2_AUTHORIZE:
          $ref: '#/components/schemas/PerClientRateLimitMode'
        OIE_APP_INTENT:
          $ref: '#/components/schemas/PerClientRateLimitMode'
      type: object
    Permission__links:
      example:
        role:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
        self:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
      properties:
        self:
          $ref: '#/components/schemas/HrefObject'
        role:
          $ref: '#/components/schemas/HrefObject'
      readOnly: true
      type: object
    PossessionConstraint_allOf:
      properties:
        deviceBound:
          type: string
        hardwareProtection:
          type: string
        phishingResistant:
          type: string
        userPresence:
          type: string
      type: object
    ProfileEnrollmentPolicyRule_allOf:
      properties:
        actions:
          $ref: '#/components/schemas/ProfileEnrollmentPolicyRuleActions'
        conditions:
          $ref: '#/components/schemas/PolicyRuleConditions'
      type: object
    ProfileEnrollmentPolicyRuleActions_allOf:
      properties:
        profileEnrollment:
          $ref: '#/components/schemas/ProfileEnrollmentPolicyRuleAction'
      type: object
    PushUserFactor_allOf:
      properties:
        expiresAt:
          format: date-time
          type: string
        factorResult:
          $ref: '#/components/schemas/FactorResultType'
        profile:
          $ref: '#/components/schemas/PushUserFactorProfile'
      type: object
    ResourceSet__links:
      example:
        bindings:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
        self:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
        resources:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
      properties:
        self:
          $ref: '#/components/schemas/HrefObject'
        resources:
          $ref: '#/components/schemas/HrefObject'
        bindings:
          $ref: '#/components/schemas/HrefObject'
      readOnly: true
      type: object
    ResourceSetBindingMembers__links:
      example:
        next:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
        binding:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
      properties:
        binding:
          $ref: '#/components/schemas/HrefObject'
        next:
          $ref: '#/components/schemas/HrefObject'
      readOnly: true
      type: object
    ResourceSetBindingResponse__links:
      example:
        resource-set:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
        bindings:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
        self:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
      properties:
        self:
          $ref: '#/components/schemas/HrefObject'
        bindings:
          $ref: '#/components/schemas/HrefObject'
        resource-set:
          $ref: '#/components/schemas/HrefObject'
      readOnly: true
      type: object
    ResourceSetBindingRole__links:
      example:
        members:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
        self:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
      properties:
        self:
          $ref: '#/components/schemas/HrefObject'
        members:
          $ref: '#/components/schemas/HrefObject'
      type: object
    ResourceSetResources__links:
      example:
        next:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
        resource-set:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
      properties:
        next:
          $ref: '#/components/schemas/HrefObject'
        resource-set:
          $ref: '#/components/schemas/HrefObject'
      type: object
    SamlApplication_allOf:
      properties:
        credentials:
          $ref: '#/components/schemas/ApplicationCredentials'
        name:
          type: string
        settings:
          $ref: '#/components/schemas/SamlApplicationSettings'
      type: object
    SamlApplicationSettings_allOf:
      properties:
        app:
          $ref: '#/components/schemas/SamlApplicationSettingsApplication'
        signOn:
          $ref: '#/components/schemas/SamlApplicationSettingsSignOn'
      type: object
    SchemeApplicationCredentials_allOf:
      properties:
        password:
          $ref: '#/components/schemas/PasswordCredential'
        revealPassword:
          type: boolean
        scheme:
          $ref: '#/components/schemas/ApplicationCredentialsScheme'
        signing:
          $ref: '#/components/schemas/ApplicationCredentialsSigning'
        userName:
          type: string
      type: object
    SecurePasswordStoreApplication_allOf:
      properties:
        credentials:
          $ref: '#/components/schemas/SchemeApplicationCredentials'
        name:
          default: template_sps
          type: string
        settings:
          $ref: '#/components/schemas/SecurePasswordStoreApplicationSettings'
      type: object
    SecurePasswordStoreApplicationSettings_allOf:
      properties:
        app:
          $ref: '#/components/schemas/SecurePasswordStoreApplicationSettingsApplication'
      type: object
    SecurityQuestionUserFactor_allOf:
      properties:
        profile:
          $ref: '#/components/schemas/SecurityQuestionUserFactorProfile'
      type: object
    SignInPage_allOf_widgetCustomizations:
      properties:
        signInLabel:
          type: string
        usernameLabel:
          type: string
        usernameInfoTip:
          type: string
        passwordLabel:
          type: string
        passwordInfoTip:
          type: string
        showPasswordVisibilityToggle:
          type: boolean
        showUserIdentifier:
          type: boolean
        forgotPasswordLabel:
          type: string
        forgotPasswordUrl:
          type: string
        unlockAccountLabel:
          type: string
        unlockAccountUrl:
          type: string
        helpLabel:
          type: string
        helpUrl:
          type: string
        customLink1Label:
          type: string
        customLink1Url:
          type: string
        customLink2Label:
          type: string
        customLink2Url:
          type: string
        authenticatorPageCustomLinkLabel:
          type: string
        authenticatorPageCustomLinkUrl:
          type: string
        classicRecoveryFlowEmailOrUsernameLabel:
          type: string
      type: object
    SignInPage_allOf:
      properties:
        widgetCustomizations:
          $ref: '#/components/schemas/SignInPage_allOf_widgetCustomizations'
        widgetVersion:
          description: "The version specified as a [Semantic Version](https://semver.org/)."
          pattern: "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\\
            d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\\
            +([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
          type: string
      type: object
    SmsUserFactor_allOf:
      properties:
        profile:
          $ref: '#/components/schemas/SmsUserFactorProfile'
      type: object
    SwaApplicationSettings_allOf:
      properties:
        app:
          $ref: '#/components/schemas/SwaApplicationSettingsApplication'
      type: object
    TokenUserFactor_allOf:
      properties:
        profile:
          $ref: '#/components/schemas/TokenUserFactorProfile'
      type: object
    TotpUserFactor_allOf:
      properties:
        profile:
          $ref: '#/components/schemas/TotpUserFactorProfile'
      type: object
    U2fUserFactor_allOf:
      properties:
        profile:
          $ref: '#/components/schemas/U2fUserFactorProfile'
      type: object
    WebAuthnUserFactor_allOf:
      properties:
        profile:
          $ref: '#/components/schemas/WebAuthnUserFactorProfile'
      type: object
    WebUserFactor_allOf:
      properties:
        profile:
          $ref: '#/components/schemas/WebUserFactorProfile'
      type: object
    WellKnownOrgMetadata__links:
      example:
        organization:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
        alternate:
          hints:
            allow:
            - null
            - null
          name: name
          href: href
          type: type
      properties:
        alternate:
          $ref: '#/components/schemas/HrefObject'
        organization:
          $ref: '#/components/schemas/HrefObject'
      type: object
    WsFederationApplication_allOf:
      properties:
        credentials:
          $ref: '#/components/schemas/ApplicationCredentials'
        name:
          default: template_wsfed
          type: string
        settings:
          $ref: '#/components/schemas/WsFederationApplicationSettings'
      type: object
    WsFederationApplicationSettings_allOf:
      properties:
        app:
          $ref: '#/components/schemas/WsFederationApplicationSettingsApplication'
      type: object
  securitySchemes:
    apiToken:
      description: "Pass the API token as the Authorization header value prefixed\
        \ with SSWS: `Authorization: SSWS {API Token}`"
      in: header
      name: Authorization
      type: apiKey
    oauth2:
      description: "Pass the access_token as the value of the Authorization header:\
        \ `Authorization: Bearer {access_token}`"
      flows:
        authorizationCode:
          authorizationUrl: /oauth2/v1/authorize
          scopes:
            okta.agentPools.manage: Allows the app to create and manage agent pools
              in your Okta organization.
            okta.agentPools.read: Allows the app to read agent pools in your Okta
              organization.
            okta.apiToken.manage: Allows the app to manage API Tokens in your Okta
              organization.
            okta.apiToken.read: Allows the app to read API Tokens in your Okta organization.
            okta.apps.manage: Allows the app to create and manage Apps in your Okta
              organization.
            okta.apps.read: Allows the app to read information about Apps in your
              Okta organization.
            okta.authenticators.manage: "Allows the app to manage all authenticators\
              \ (e.g. enrollments, reset)."
            okta.authenticators.read: Allows the app to read org authenticators information.
            okta.authorizationServers.manage: Allows the app to create and manage
              Authorization Servers in your Okta organization.
            okta.authorizationServers.read: Allows the app to read information about
              Authorization Servers in your Okta organization.
            okta.behaviors.manage: Allows the app to create and manage behavior detection
              rules in your Okta organization.
            okta.behaviors.read: Allows the app to read behavior detection rules in
              your Okta organization.
            okta.brands.manage: Allows the app to create and manage Brands and Themes
              in your Okta organization.
            okta.brands.read: Allows the app to read information about Brands and
              Themes in your Okta organization.
            okta.captchas.manage: Allows the app to create and manage CAPTCHAs in
              your Okta organization.
            okta.captchas.read: Allows the app to read information about CAPTCHAs
              in your Okta organization.
            okta.deviceAssurance.manage: Allows the app to manage device assurances.
            okta.deviceAssurance.read: Allows the app to read device assurances.
            okta.devices.manage: Allows the app to manage device status transitions
              and delete a device.
            okta.devices.read: Allows the app to read the existing device's profile
              and search devices.
            okta.domains.manage: Allows the app to manage custom Domains for your
              Okta organization.
            okta.domains.read: Allows the app to read information about custom Domains
              for your Okta organization.
            okta.eventHooks.manage: Allows the app to create and manage Event Hooks
              in your Okta organization.
            okta.eventHooks.read: Allows the app to read information about Event Hooks
              in your Okta organization.
            okta.groups.manage: Allows the app to manage existing groups in your Okta
              organization.
            okta.groups.read: Allows the app to read information about groups and
              their members in your Okta organization.
            okta.identitySources.manage: Allows the custom identity sources to manage
              user entities in your Okta organization
            okta.identitySources.read: Allows to read session information for custom
              identity sources in your Okta organization
            okta.idps.manage: Allows the app to create and manage Identity Providers
              in your Okta organization.
            okta.idps.read: Allows the app to read information about Identity Providers
              in your Okta organization.
            okta.inlineHooks.manage: Allows the app to create and manage Inline Hooks
              in your Okta organization.
            okta.inlineHooks.read: Allows the app to read information about Inline
              Hooks in your Okta organization.
            okta.linkedObjects.manage: Allows the app to manage linked object definitions
              in your Okta organization.
            okta.linkedObjects.read: Allows the app to read linked object definitions
              in your Okta organization.
            okta.logStreams.manage: Allows the app to create and manage log streams
              in your Okta organization.
            okta.logStreams.read: Allows the app to read information about log streams
              in your Okta organization.
            okta.logs.read: Allows the app to read information about System Log entries
              in your Okta organization.
            okta.orgs.manage: Allows the app to manage organization-specific details
              for your Okta organization.
            okta.orgs.read: Allows the app to read organization-specific details about
              your Okta organization.
            okta.policies.manage: Allows the app to manage policies in your Okta organization.
            okta.policies.read: Allows the app to read information about policies
              in your Okta organization.
            okta.principalRateLimits.manage: Allows the app to create and manage Principal
              Rate Limits in your Okta organization.
            okta.principalRateLimits.read: Allows the app to read information about
              Principal Rate Limits in your Okta organization.
            okta.profileMappings.manage: Allows the app to manage user profile mappings
              in your Okta organization.
            okta.profileMappings.read: Allows the app to read user profile mappings
              in your Okta organization.
            okta.pushProviders.manage: Allows the app to create and manage push notification
              providers such as APNs and FCM.
            okta.pushProviders.read: Allows the app to read push notification providers
              such as APNs and FCM.
            okta.rateLimits.manage: Allows the app to create and manage rate limits
              in your Okta organization.
            okta.rateLimits.read: Allows the app to read information about rate limits
              in your Okta organization.
            okta.riskEvents.manage: Allows the app to publish risk events to your
              Okta organization.
            okta.riskProviders.manage: Allows the app to create and manage risk provider
              integrations in your Okta organization.
            okta.riskProviders.read: Allows the app to read all risk provider integrations
              in your Okta organization.
            okta.roles.manage: Allows the app to manage administrative role assignments
              for users in your Okta organization.
            okta.roles.read: Allows the app to read administrative role assignments
              for users in your Okta organization.
            okta.schemas.manage: Allows the app to create and manage Schemas in your
              Okta organization.
            okta.schemas.read: Allows the app to read information about Schemas in
              your Okta organization.
            okta.sessions.manage: Allows the app to manage all sessions in your Okta
              organization.
            okta.sessions.read: Allows the app to read all sessions in your Okta organization.
            okta.templates.manage: Allows the app to manage all custom templates in
              your Okta organization.
            okta.templates.read: Allows the app to read all custom templates in your
              Okta organization.
            okta.trustedOrigins.manage: Allows the app to manage all Trusted Origins
              in your Okta organization.
            okta.trustedOrigins.read: Allows the app to read all Trusted Origins in
              your Okta organization.
            okta.userTypes.manage: Allows the app to manage user types in your Okta
              organization.
            okta.userTypes.read: Allows the app to read user types in your Okta organization.
            okta.users.manage: Allows the app to create new users and to manage all
              users' profile and credentials information.
            okta.users.read: Allows the app to read the existing users' profiles and
              credentials.
          tokenUrl: /oauth2/v1/token
      type: oauth2
