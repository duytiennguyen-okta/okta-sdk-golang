/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// DNSRecordType the model 'DNSRecordType'
type DNSRecordType string

// List of DNSRecordType
const (
	DNSRECORDTYPE_CNAME DNSRecordType = "CNAME"
	DNSRECORDTYPE_TXT   DNSRecordType = "TXT"
)

// All allowed values of DNSRecordType enum
var AllowedDNSRecordTypeEnumValues = []DNSRecordType{
	"CNAME",
	"TXT",
}

func (v *DNSRecordType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DNSRecordType(value)
	for _, existing := range AllowedDNSRecordTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DNSRecordType", value)
}

// NewDNSRecordTypeFromValue returns a pointer to a valid DNSRecordType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDNSRecordTypeFromValue(v string) (*DNSRecordType, error) {
	ev := DNSRecordType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DNSRecordType: valid values are %v", v, AllowedDNSRecordTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DNSRecordType) IsValid() bool {
	for _, existing := range AllowedDNSRecordTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DNSRecordType value
func (v DNSRecordType) Ptr() *DNSRecordType {
	return &v
}

type NullableDNSRecordType struct {
	value *DNSRecordType
	isSet bool
}

func (v NullableDNSRecordType) Get() *DNSRecordType {
	return v.value
}

func (v *NullableDNSRecordType) Set(val *DNSRecordType) {
	v.value = val
	v.isSet = true
}

func (v NullableDNSRecordType) IsSet() bool {
	return v.isSet
}

func (v *NullableDNSRecordType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDNSRecordType(val *DNSRecordType) *NullableDNSRecordType {
	return &NullableDNSRecordType{value: val, isSet: true}
}

func (v NullableDNSRecordType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDNSRecordType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
