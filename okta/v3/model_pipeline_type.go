/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// PipelineType The authentication pipeline of the org. `idx` means the org is using the Identity Engine, while `v1` means the org is using the Classic authentication pipeline.
type PipelineType string

// List of PipelineType
const (
	PIPELINETYPE_IDX PipelineType = "idx"
	PIPELINETYPE_V1  PipelineType = "v1"
)

// All allowed values of PipelineType enum
var AllowedPipelineTypeEnumValues = []PipelineType{
	"idx",
	"v1",
}

func (v *PipelineType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PipelineType(value)
	for _, existing := range AllowedPipelineTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PipelineType", value)
}

// NewPipelineTypeFromValue returns a pointer to a valid PipelineType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPipelineTypeFromValue(v string) (*PipelineType, error) {
	ev := PipelineType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PipelineType: valid values are %v", v, AllowedPipelineTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PipelineType) IsValid() bool {
	for _, existing := range AllowedPipelineTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PipelineType value
func (v PipelineType) Ptr() *PipelineType {
	return &v
}

type NullablePipelineType struct {
	value *PipelineType
	isSet bool
}

func (v NullablePipelineType) Get() *PipelineType {
	return v.value
}

func (v *NullablePipelineType) Set(val *PipelineType) {
	v.value = val
	v.isSet = true
}

func (v NullablePipelineType) IsSet() bool {
	return v.isSet
}

func (v *NullablePipelineType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePipelineType(val *PipelineType) *NullablePipelineType {
	return &NullablePipelineType{value: val, isSet: true}
}

func (v NullablePipelineType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePipelineType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
