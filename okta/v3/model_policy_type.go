/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// PolicyType the model 'PolicyType'
type PolicyType string

// List of PolicyType
const (
	POLICYTYPE_ACCESS_POLICY              PolicyType = "ACCESS_POLICY"
	POLICYTYPE_IDP_DISCOVERY              PolicyType = "IDP_DISCOVERY"
	POLICYTYPE_MFA_ENROLL                 PolicyType = "MFA_ENROLL"
	POLICYTYPE_OAUTH_AUTHORIZATION_POLICY PolicyType = "OAUTH_AUTHORIZATION_POLICY"
	POLICYTYPE_OKTA_SIGN_ON               PolicyType = "OKTA_SIGN_ON"
	POLICYTYPE_PASSWORD                   PolicyType = "PASSWORD"
	POLICYTYPE_PROFILE_ENROLLMENT         PolicyType = "PROFILE_ENROLLMENT"
)

// All allowed values of PolicyType enum
var AllowedPolicyTypeEnumValues = []PolicyType{
	"ACCESS_POLICY",
	"IDP_DISCOVERY",
	"MFA_ENROLL",
	"OAUTH_AUTHORIZATION_POLICY",
	"OKTA_SIGN_ON",
	"PASSWORD",
	"PROFILE_ENROLLMENT",
}

func (v *PolicyType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PolicyType(value)
	for _, existing := range AllowedPolicyTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PolicyType", value)
}

// NewPolicyTypeFromValue returns a pointer to a valid PolicyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPolicyTypeFromValue(v string) (*PolicyType, error) {
	ev := PolicyType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PolicyType: valid values are %v", v, AllowedPolicyTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PolicyType) IsValid() bool {
	for _, existing := range AllowedPolicyTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PolicyType value
func (v PolicyType) Ptr() *PolicyType {
	return &v
}

type NullablePolicyType struct {
	value *PolicyType
	isSet bool
}

func (v NullablePolicyType) Get() *PolicyType {
	return v.value
}

func (v *NullablePolicyType) Set(val *PolicyType) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyType) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyType(val *PolicyType) *NullablePolicyType {
	return &NullablePolicyType{value: val, isSet: true}
}

func (v NullablePolicyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
