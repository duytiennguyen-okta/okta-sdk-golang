/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// Platform the model 'Platform'
type Platform string

// List of Platform
const (
	PLATFORM_ANDROID Platform = "ANDROID"
	PLATFORM_IOS     Platform = "IOS"
	PLATFORM_MACOS   Platform = "MACOS"
	PLATFORM_WINDOWS Platform = "WINDOWS"
)

// All allowed values of Platform enum
var AllowedPlatformEnumValues = []Platform{
	"ANDROID",
	"IOS",
	"MACOS",
	"WINDOWS",
}

func (v *Platform) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Platform(value)
	for _, existing := range AllowedPlatformEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Platform", value)
}

// NewPlatformFromValue returns a pointer to a valid Platform
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPlatformFromValue(v string) (*Platform, error) {
	ev := Platform(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Platform: valid values are %v", v, AllowedPlatformEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Platform) IsValid() bool {
	for _, existing := range AllowedPlatformEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Platform value
func (v Platform) Ptr() *Platform {
	return &v
}

type NullablePlatform struct {
	value *Platform
	isSet bool
}

func (v NullablePlatform) Get() *Platform {
	return v.value
}

func (v *NullablePlatform) Set(val *Platform) {
	v.value = val
	v.isSet = true
}

func (v NullablePlatform) IsSet() bool {
	return v.isSet
}

func (v *NullablePlatform) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlatform(val *Platform) *NullablePlatform {
	return &NullablePlatform{value: val, isSet: true}
}

func (v NullablePlatform) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlatform) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
