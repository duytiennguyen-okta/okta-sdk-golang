/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// MultifactorEnrollmentPolicyAuthenticatorType the model 'MultifactorEnrollmentPolicyAuthenticatorType'
type MultifactorEnrollmentPolicyAuthenticatorType string

// List of MultifactorEnrollmentPolicyAuthenticatorType
const (
	MULTIFACTORENROLLMENTPOLICYAUTHENTICATORTYPE_CUSTOM_APP        MultifactorEnrollmentPolicyAuthenticatorType = "custom_app"
	MULTIFACTORENROLLMENTPOLICYAUTHENTICATORTYPE_CUSTOM_OTP        MultifactorEnrollmentPolicyAuthenticatorType = "custom_otp"
	MULTIFACTORENROLLMENTPOLICYAUTHENTICATORTYPE_DUO               MultifactorEnrollmentPolicyAuthenticatorType = "duo"
	MULTIFACTORENROLLMENTPOLICYAUTHENTICATORTYPE_EXTERNAL_IDP      MultifactorEnrollmentPolicyAuthenticatorType = "external_idp"
	MULTIFACTORENROLLMENTPOLICYAUTHENTICATORTYPE_GOOGLE_OTP        MultifactorEnrollmentPolicyAuthenticatorType = "google_otp"
	MULTIFACTORENROLLMENTPOLICYAUTHENTICATORTYPE_OKTA_EMAIL        MultifactorEnrollmentPolicyAuthenticatorType = "okta_email"
	MULTIFACTORENROLLMENTPOLICYAUTHENTICATORTYPE_OKTA_PASSWORD     MultifactorEnrollmentPolicyAuthenticatorType = "okta_password"
	MULTIFACTORENROLLMENTPOLICYAUTHENTICATORTYPE_OKTA_VERIFY       MultifactorEnrollmentPolicyAuthenticatorType = "okta_verify"
	MULTIFACTORENROLLMENTPOLICYAUTHENTICATORTYPE_ONPREM_MFA        MultifactorEnrollmentPolicyAuthenticatorType = "onprem_mfa"
	MULTIFACTORENROLLMENTPOLICYAUTHENTICATORTYPE_PHONE_NUMBER      MultifactorEnrollmentPolicyAuthenticatorType = "phone_number"
	MULTIFACTORENROLLMENTPOLICYAUTHENTICATORTYPE_RSA_TOKEN         MultifactorEnrollmentPolicyAuthenticatorType = "rsa_token"
	MULTIFACTORENROLLMENTPOLICYAUTHENTICATORTYPE_SECURITY_QUESTION MultifactorEnrollmentPolicyAuthenticatorType = "security_question"
	MULTIFACTORENROLLMENTPOLICYAUTHENTICATORTYPE_SYMANTEC_VIP      MultifactorEnrollmentPolicyAuthenticatorType = "symantec_vip"
	MULTIFACTORENROLLMENTPOLICYAUTHENTICATORTYPE_WEBAUTHN          MultifactorEnrollmentPolicyAuthenticatorType = "webauthn"
	MULTIFACTORENROLLMENTPOLICYAUTHENTICATORTYPE_YUBIKEY_TOKEN     MultifactorEnrollmentPolicyAuthenticatorType = "yubikey_token"
)

// All allowed values of MultifactorEnrollmentPolicyAuthenticatorType enum
var AllowedMultifactorEnrollmentPolicyAuthenticatorTypeEnumValues = []MultifactorEnrollmentPolicyAuthenticatorType{
	"custom_app",
	"custom_otp",
	"duo",
	"external_idp",
	"google_otp",
	"okta_email",
	"okta_password",
	"okta_verify",
	"onprem_mfa",
	"phone_number",
	"rsa_token",
	"security_question",
	"symantec_vip",
	"webauthn",
	"yubikey_token",
}

func (v *MultifactorEnrollmentPolicyAuthenticatorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MultifactorEnrollmentPolicyAuthenticatorType(value)
	for _, existing := range AllowedMultifactorEnrollmentPolicyAuthenticatorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MultifactorEnrollmentPolicyAuthenticatorType", value)
}

// NewMultifactorEnrollmentPolicyAuthenticatorTypeFromValue returns a pointer to a valid MultifactorEnrollmentPolicyAuthenticatorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMultifactorEnrollmentPolicyAuthenticatorTypeFromValue(v string) (*MultifactorEnrollmentPolicyAuthenticatorType, error) {
	ev := MultifactorEnrollmentPolicyAuthenticatorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MultifactorEnrollmentPolicyAuthenticatorType: valid values are %v", v, AllowedMultifactorEnrollmentPolicyAuthenticatorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MultifactorEnrollmentPolicyAuthenticatorType) IsValid() bool {
	for _, existing := range AllowedMultifactorEnrollmentPolicyAuthenticatorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MultifactorEnrollmentPolicyAuthenticatorType value
func (v MultifactorEnrollmentPolicyAuthenticatorType) Ptr() *MultifactorEnrollmentPolicyAuthenticatorType {
	return &v
}

type NullableMultifactorEnrollmentPolicyAuthenticatorType struct {
	value *MultifactorEnrollmentPolicyAuthenticatorType
	isSet bool
}

func (v NullableMultifactorEnrollmentPolicyAuthenticatorType) Get() *MultifactorEnrollmentPolicyAuthenticatorType {
	return v.value
}

func (v *NullableMultifactorEnrollmentPolicyAuthenticatorType) Set(val *MultifactorEnrollmentPolicyAuthenticatorType) {
	v.value = val
	v.isSet = true
}

func (v NullableMultifactorEnrollmentPolicyAuthenticatorType) IsSet() bool {
	return v.isSet
}

func (v *NullableMultifactorEnrollmentPolicyAuthenticatorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultifactorEnrollmentPolicyAuthenticatorType(val *MultifactorEnrollmentPolicyAuthenticatorType) *NullableMultifactorEnrollmentPolicyAuthenticatorType {
	return &NullableMultifactorEnrollmentPolicyAuthenticatorType{value: val, isSet: true}
}

func (v NullableMultifactorEnrollmentPolicyAuthenticatorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultifactorEnrollmentPolicyAuthenticatorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
