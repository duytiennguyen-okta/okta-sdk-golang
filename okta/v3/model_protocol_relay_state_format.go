/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// ProtocolRelayStateFormat the model 'ProtocolRelayStateFormat'
type ProtocolRelayStateFormat string

// List of ProtocolRelayStateFormat
const (
	PROTOCOLRELAYSTATEFORMAT_FROM_URL ProtocolRelayStateFormat = "FROM_URL"
	PROTOCOLRELAYSTATEFORMAT_OPAQUE   ProtocolRelayStateFormat = "OPAQUE"
)

// All allowed values of ProtocolRelayStateFormat enum
var AllowedProtocolRelayStateFormatEnumValues = []ProtocolRelayStateFormat{
	"FROM_URL",
	"OPAQUE",
}

func (v *ProtocolRelayStateFormat) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProtocolRelayStateFormat(value)
	for _, existing := range AllowedProtocolRelayStateFormatEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProtocolRelayStateFormat", value)
}

// NewProtocolRelayStateFormatFromValue returns a pointer to a valid ProtocolRelayStateFormat
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProtocolRelayStateFormatFromValue(v string) (*ProtocolRelayStateFormat, error) {
	ev := ProtocolRelayStateFormat(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProtocolRelayStateFormat: valid values are %v", v, AllowedProtocolRelayStateFormatEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProtocolRelayStateFormat) IsValid() bool {
	for _, existing := range AllowedProtocolRelayStateFormatEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProtocolRelayStateFormat value
func (v ProtocolRelayStateFormat) Ptr() *ProtocolRelayStateFormat {
	return &v
}

type NullableProtocolRelayStateFormat struct {
	value *ProtocolRelayStateFormat
	isSet bool
}

func (v NullableProtocolRelayStateFormat) Get() *ProtocolRelayStateFormat {
	return v.value
}

func (v *NullableProtocolRelayStateFormat) Set(val *ProtocolRelayStateFormat) {
	v.value = val
	v.isSet = true
}

func (v NullableProtocolRelayStateFormat) IsSet() bool {
	return v.isSet
}

func (v *NullableProtocolRelayStateFormat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtocolRelayStateFormat(val *ProtocolRelayStateFormat) *NullableProtocolRelayStateFormat {
	return &NullableProtocolRelayStateFormat{value: val, isSet: true}
}

func (v NullableProtocolRelayStateFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtocolRelayStateFormat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
