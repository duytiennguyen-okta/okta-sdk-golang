/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// FactorResultType the model 'FactorResultType'
type FactorResultType string

// List of FactorResultType
const (
	FACTORRESULTTYPE_CANCELLED            FactorResultType = "CANCELLED"
	FACTORRESULTTYPE_CHALLENGE            FactorResultType = "CHALLENGE"
	FACTORRESULTTYPE_ERROR                FactorResultType = "ERROR"
	FACTORRESULTTYPE_FAILED               FactorResultType = "FAILED"
	FACTORRESULTTYPE_PASSCODE_REPLAYED    FactorResultType = "PASSCODE_REPLAYED"
	FACTORRESULTTYPE_REJECTED             FactorResultType = "REJECTED"
	FACTORRESULTTYPE_SUCCESS              FactorResultType = "SUCCESS"
	FACTORRESULTTYPE_TIMEOUT              FactorResultType = "TIMEOUT"
	FACTORRESULTTYPE_TIME_WINDOW_EXCEEDED FactorResultType = "TIME_WINDOW_EXCEEDED"
	FACTORRESULTTYPE_WAITING              FactorResultType = "WAITING"
)

// All allowed values of FactorResultType enum
var AllowedFactorResultTypeEnumValues = []FactorResultType{
	"CANCELLED",
	"CHALLENGE",
	"ERROR",
	"FAILED",
	"PASSCODE_REPLAYED",
	"REJECTED",
	"SUCCESS",
	"TIMEOUT",
	"TIME_WINDOW_EXCEEDED",
	"WAITING",
}

func (v *FactorResultType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FactorResultType(value)
	for _, existing := range AllowedFactorResultTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FactorResultType", value)
}

// NewFactorResultTypeFromValue returns a pointer to a valid FactorResultType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFactorResultTypeFromValue(v string) (*FactorResultType, error) {
	ev := FactorResultType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FactorResultType: valid values are %v", v, AllowedFactorResultTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FactorResultType) IsValid() bool {
	for _, existing := range AllowedFactorResultTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FactorResultType value
func (v FactorResultType) Ptr() *FactorResultType {
	return &v
}

type NullableFactorResultType struct {
	value *FactorResultType
	isSet bool
}

func (v NullableFactorResultType) Get() *FactorResultType {
	return v.value
}

func (v *NullableFactorResultType) Set(val *FactorResultType) {
	v.value = val
	v.isSet = true
}

func (v NullableFactorResultType) IsSet() bool {
	return v.isSet
}

func (v *NullableFactorResultType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFactorResultType(val *FactorResultType) *NullableFactorResultType {
	return &NullableFactorResultType{value: val, isSet: true}
}

func (v NullableFactorResultType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFactorResultType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
