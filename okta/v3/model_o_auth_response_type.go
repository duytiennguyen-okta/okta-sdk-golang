/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// OAuthResponseType the model 'OAuthResponseType'
type OAuthResponseType string

// List of OAuthResponseType
const (
	OAUTHRESPONSETYPE_CODE     OAuthResponseType = "code"
	OAUTHRESPONSETYPE_ID_TOKEN OAuthResponseType = "id_token"
	OAUTHRESPONSETYPE_TOKEN    OAuthResponseType = "token"
)

// All allowed values of OAuthResponseType enum
var AllowedOAuthResponseTypeEnumValues = []OAuthResponseType{
	"code",
	"id_token",
	"token",
}

func (v *OAuthResponseType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OAuthResponseType(value)
	for _, existing := range AllowedOAuthResponseTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OAuthResponseType", value)
}

// NewOAuthResponseTypeFromValue returns a pointer to a valid OAuthResponseType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOAuthResponseTypeFromValue(v string) (*OAuthResponseType, error) {
	ev := OAuthResponseType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OAuthResponseType: valid values are %v", v, AllowedOAuthResponseTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OAuthResponseType) IsValid() bool {
	for _, existing := range AllowedOAuthResponseTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OAuthResponseType value
func (v OAuthResponseType) Ptr() *OAuthResponseType {
	return &v
}

type NullableOAuthResponseType struct {
	value *OAuthResponseType
	isSet bool
}

func (v NullableOAuthResponseType) Get() *OAuthResponseType {
	return v.value
}

func (v *NullableOAuthResponseType) Set(val *OAuthResponseType) {
	v.value = val
	v.isSet = true
}

func (v NullableOAuthResponseType) IsSet() bool {
	return v.isSet
}

func (v *NullableOAuthResponseType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOAuthResponseType(val *OAuthResponseType) *NullableOAuthResponseType {
	return &NullableOAuthResponseType{value: val, isSet: true}
}

func (v NullableOAuthResponseType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOAuthResponseType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
