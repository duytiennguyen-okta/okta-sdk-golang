/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// RoleAssignmentType the model 'RoleAssignmentType'
type RoleAssignmentType string

// List of RoleAssignmentType
const (
	ROLEASSIGNMENTTYPE_GROUP RoleAssignmentType = "GROUP"
	ROLEASSIGNMENTTYPE_USER  RoleAssignmentType = "USER"
)

// All allowed values of RoleAssignmentType enum
var AllowedRoleAssignmentTypeEnumValues = []RoleAssignmentType{
	"GROUP",
	"USER",
}

func (v *RoleAssignmentType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RoleAssignmentType(value)
	for _, existing := range AllowedRoleAssignmentTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RoleAssignmentType", value)
}

// NewRoleAssignmentTypeFromValue returns a pointer to a valid RoleAssignmentType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRoleAssignmentTypeFromValue(v string) (*RoleAssignmentType, error) {
	ev := RoleAssignmentType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RoleAssignmentType: valid values are %v", v, AllowedRoleAssignmentTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RoleAssignmentType) IsValid() bool {
	for _, existing := range AllowedRoleAssignmentTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RoleAssignmentType value
func (v RoleAssignmentType) Ptr() *RoleAssignmentType {
	return &v
}

type NullableRoleAssignmentType struct {
	value *RoleAssignmentType
	isSet bool
}

func (v NullableRoleAssignmentType) Get() *RoleAssignmentType {
	return v.value
}

func (v *NullableRoleAssignmentType) Set(val *RoleAssignmentType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleAssignmentType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleAssignmentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleAssignmentType(val *RoleAssignmentType) *NullableRoleAssignmentType {
	return &NullableRoleAssignmentType{value: val, isSet: true}
}

func (v NullableRoleAssignmentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleAssignmentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
