/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// ProtocolAlgorithmTypeSignatureScope the model 'ProtocolAlgorithmTypeSignatureScope'
type ProtocolAlgorithmTypeSignatureScope string

// List of ProtocolAlgorithmTypeSignatureScope
const (
	PROTOCOLALGORITHMTYPESIGNATURESCOPE_ANY      ProtocolAlgorithmTypeSignatureScope = "ANY"
	PROTOCOLALGORITHMTYPESIGNATURESCOPE_NONE     ProtocolAlgorithmTypeSignatureScope = "NONE"
	PROTOCOLALGORITHMTYPESIGNATURESCOPE_REQUEST  ProtocolAlgorithmTypeSignatureScope = "REQUEST"
	PROTOCOLALGORITHMTYPESIGNATURESCOPE_RESPONSE ProtocolAlgorithmTypeSignatureScope = "RESPONSE"
	PROTOCOLALGORITHMTYPESIGNATURESCOPE_TOKEN    ProtocolAlgorithmTypeSignatureScope = "TOKEN"
)

// All allowed values of ProtocolAlgorithmTypeSignatureScope enum
var AllowedProtocolAlgorithmTypeSignatureScopeEnumValues = []ProtocolAlgorithmTypeSignatureScope{
	"ANY",
	"NONE",
	"REQUEST",
	"RESPONSE",
	"TOKEN",
}

func (v *ProtocolAlgorithmTypeSignatureScope) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProtocolAlgorithmTypeSignatureScope(value)
	for _, existing := range AllowedProtocolAlgorithmTypeSignatureScopeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProtocolAlgorithmTypeSignatureScope", value)
}

// NewProtocolAlgorithmTypeSignatureScopeFromValue returns a pointer to a valid ProtocolAlgorithmTypeSignatureScope
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProtocolAlgorithmTypeSignatureScopeFromValue(v string) (*ProtocolAlgorithmTypeSignatureScope, error) {
	ev := ProtocolAlgorithmTypeSignatureScope(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProtocolAlgorithmTypeSignatureScope: valid values are %v", v, AllowedProtocolAlgorithmTypeSignatureScopeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProtocolAlgorithmTypeSignatureScope) IsValid() bool {
	for _, existing := range AllowedProtocolAlgorithmTypeSignatureScopeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProtocolAlgorithmTypeSignatureScope value
func (v ProtocolAlgorithmTypeSignatureScope) Ptr() *ProtocolAlgorithmTypeSignatureScope {
	return &v
}

type NullableProtocolAlgorithmTypeSignatureScope struct {
	value *ProtocolAlgorithmTypeSignatureScope
	isSet bool
}

func (v NullableProtocolAlgorithmTypeSignatureScope) Get() *ProtocolAlgorithmTypeSignatureScope {
	return v.value
}

func (v *NullableProtocolAlgorithmTypeSignatureScope) Set(val *ProtocolAlgorithmTypeSignatureScope) {
	v.value = val
	v.isSet = true
}

func (v NullableProtocolAlgorithmTypeSignatureScope) IsSet() bool {
	return v.isSet
}

func (v *NullableProtocolAlgorithmTypeSignatureScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtocolAlgorithmTypeSignatureScope(val *ProtocolAlgorithmTypeSignatureScope) *NullableProtocolAlgorithmTypeSignatureScope {
	return &NullableProtocolAlgorithmTypeSignatureScope{value: val, isSet: true}
}

func (v NullableProtocolAlgorithmTypeSignatureScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtocolAlgorithmTypeSignatureScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
