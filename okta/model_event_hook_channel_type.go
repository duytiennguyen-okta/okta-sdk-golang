/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 4.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// EventHookChannelType the model 'EventHookChannelType'
type EventHookChannelType string

// List of EventHookChannelType
const (
	EVENTHOOKCHANNELTYPE_HTTP EventHookChannelType = "HTTP"
)

// All allowed values of EventHookChannelType enum
var AllowedEventHookChannelTypeEnumValues = []EventHookChannelType{
	"HTTP",
}

func (v *EventHookChannelType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EventHookChannelType(value)
	for _, existing := range AllowedEventHookChannelTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EventHookChannelType", value)
}

// NewEventHookChannelTypeFromValue returns a pointer to a valid EventHookChannelType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEventHookChannelTypeFromValue(v string) (*EventHookChannelType, error) {
	ev := EventHookChannelType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EventHookChannelType: valid values are %v", v, AllowedEventHookChannelTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EventHookChannelType) IsValid() bool {
	for _, existing := range AllowedEventHookChannelTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EventHookChannelType value
func (v EventHookChannelType) Ptr() *EventHookChannelType {
	return &v
}

type NullableEventHookChannelType struct {
	value *EventHookChannelType
	isSet bool
}

func (v NullableEventHookChannelType) Get() *EventHookChannelType {
	return v.value
}

func (v *NullableEventHookChannelType) Set(val *EventHookChannelType) {
	v.value = val
	v.isSet = true
}

func (v NullableEventHookChannelType) IsSet() bool {
	return v.isSet
}

func (v *NullableEventHookChannelType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventHookChannelType(val *EventHookChannelType) *NullableEventHookChannelType {
	return &NullableEventHookChannelType{value: val, isSet: true}
}

func (v NullableEventHookChannelType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventHookChannelType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
